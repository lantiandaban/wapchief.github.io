{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/CNAME.bak","path":"CNAME.bak","modified":1,"renderable":0},{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/instagram.png","path":"img/instagram.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/qq.png","path":"img/qq.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/segmentfault.png","path":"img/segmentfault.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/weixin.png","path":"img/weixin.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/alipayimg.jpg","path":"img/alipayimg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/wechatimg.jpg","path":"img/wechatimg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/like.css","path":"static/api/css/like.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share.js","path":"static/api/js/share.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/bg1.jpg","path":"img/bg1.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562139857939},{"_id":"source/.DS_Store","hash":"06aa98b5f576675d667f1b364f22bcb7ab34691b","modified":1562139653343},{"_id":"source/CNAME.bak","hash":"713b895d867b9c76502ed6381b21fab202099f69","modified":1562139653344},{"_id":"themes/spfk/.DS_Store","hash":"4339a122ddafa9f9b9674f60b16ce86d0115d039","modified":1499599385000},{"_id":"themes/spfk/README.md","hash":"a573ef126efe0747c3a648f07a94b109b3d62984","modified":1493082510000},{"_id":"themes/spfk/_config.yml","hash":"7eefcb1747b5a601b3646fdc06ae8b9a737ed11d","modified":1493100160000},{"_id":"themes/spfk/_config.yml.bak","hash":"d7b9dd7f012ab45e5b2307899945e35eeeb7de6f","modified":1493094622000},{"_id":"source/_posts/.DS_Store","hash":"e26e7aae3ced0a7c9fb0fdf02e6217910479d0d1","modified":1562139653347},{"_id":"source/_posts/1.md","hash":"0e7d30a9d92b9ec04347f79152601beafc770513","modified":1562139653348},{"_id":"source/_posts/2.md","hash":"9c239745a7a0a3785f16594723284c58894f2f74","modified":1562139653349},{"_id":"source/_posts/20170709_1.md","hash":"1766e2e07d9250e3bb532ae8e808217b457d52a4","modified":1562139653350},{"_id":"source/_posts/20170709_2.md","hash":"025e4183e975e789226a926dbff3ee77c25f4d88","modified":1562139653351},{"_id":"source/_posts/20170709_3.md","hash":"8ac053c57a93db435c1cdd87b174fd9749513a09","modified":1562139653351},{"_id":"source/_posts/4.md","hash":"ed44ff9b61098695c136429f87765b26306f3336","modified":1562139653352},{"_id":"source/_posts/20161004.md","hash":"5eb4c9eaef9d82cbb68ecf3c14c583414131cc1c","modified":1562139653349},{"_id":"source/_posts/20170709_4.md","hash":"364254343319b8cdf099577cb9f836adb16310bb","modified":1562139653352},{"_id":"themes/spfk/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1493082510000},{"_id":"themes/spfk/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1493082510000},{"_id":"themes/spfk/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1493082510000},{"_id":"themes/spfk/languages/pt-BR","hash":"9e8a1942a32af8720c9fbca8db14eb89d76c21bd","modified":1493082510000},{"_id":"themes/spfk/languages/es.yml","hash":"87ebcbe17fcc5651eefa9678f0d485e9f3ad0dbc","modified":1493082510000},{"_id":"themes/spfk/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1493082510000},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1493082510000},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1493082510000},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1493082510000},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1493082510000},{"_id":"themes/spfk/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1493082510000},{"_id":"themes/spfk/layout/.DS_Store","hash":"6ffd1ea7fdb54050ebb8146f69a82addb8c1c4e6","modified":1499599380000},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1493082510000},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1493082510000},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1493082510000},{"_id":"themes/spfk/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1493082510000},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493082510000},{"_id":"themes/spfk/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1493082510000},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493082510000},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1493082510000},{"_id":"themes/spfk/source/.DS_Store","hash":"6429243683824b74d5c9debcae91175851670dc0","modified":1499599380000},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"9f960e278a1f8db11d632f35ccab63812e1a0b66","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"653db35030b7edbf721659a8d106fabfbe9fe289","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"4031d2ae2bd23cea8c1059122e7358d6b4943664","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"ff7174ff79bfe82a70b03a07d78583b1e8d1827f","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"db08f6276c2b501ad16a335f5d0d06c1b4e24d35","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"21ffa5e590b1588b61b7de66c81a992ff87e9b36","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"1f2809590152382520abbba13fab2571322db123","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"99b8143b6bfd6a6f3de4bbb34c3b9a50162fa4d4","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"fe5f6a248269db2003d4bde653f56c3adc7a613a","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"34b2d7050db88fed9f70b8233f16f451bad501f4","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"112353124225cada3e44644151f069655db9494b","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"dcd7e89788f050d466d0502e7535397619009360","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"c46a2b624281b09d4aeacf2921cd712837469a1d","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"f0191892b19a19d7bb59f97c659611208b53c81d","modified":1493082510000},{"_id":"themes/spfk/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1493082510000},{"_id":"themes/spfk/source/css/_variables.styl","hash":"06d579447488fb23e40603970dc08ffe6ad31897","modified":1493082510000},{"_id":"themes/spfk/source/css/loading-style.css","hash":"ef12c256b59ed836994afed35bf02556248133ce","modified":1493082510000},{"_id":"themes/spfk/source/css/style.styl","hash":"ab9eae4d2e47e352a0e4f3229b3853ffa8790f6b","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493082510000},{"_id":"themes/spfk/source/css/showshare.css","hash":"176f81997ae8108d07a82fc6ea7cc34f7305bfde","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1493082510000},{"_id":"themes/spfk/source/img/alipay.png","hash":"6ec0c618109aac31a212d252a3b85f2975b82b3a","modified":1493082510000},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1493082510000},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1493082510000},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1493082510000},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1493082510000},{"_id":"themes/spfk/source/img/favicon.png","hash":"79d161ab4f5954ebb8fbcf7c39d133b8d53795b3","modified":1475545034000},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1493082510000},{"_id":"themes/spfk/source/img/head.jpg","hash":"a4b4149c7e15622d1980d48605a6d2bead9488b3","modified":1493094294000},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1493082510000},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1493082510000},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1493082510000},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1493082510000},{"_id":"themes/spfk/source/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1493082510000},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1493082510000},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1493082510000},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1493082510000},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1493082510000},{"_id":"themes/spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1493082510000},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1493082510000},{"_id":"themes/spfk/source/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1493082510000},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1493082510000},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1493082510000},{"_id":"themes/spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1493082510000},{"_id":"themes/spfk/source/img/weixin.png","hash":"92b8df9aba9169c1553c01994bf21a938fa39cb7","modified":1493082510000},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1493082510000},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1493082510000},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"1f60b6ccd135d181b78254468ffda1c7b9d51556","modified":1493082510000},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1493082510000},{"_id":"themes/spfk/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1493082510000},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"91d5acc31d0bcbdf4782166a66344e58fff28d89","modified":1493082510000},{"_id":"themes/spfk/source/js/mobile.js","hash":"baed8d560883c842c2b8c3e0fadcf359f97140d0","modified":1493082510000},{"_id":"themes/spfk/source/js/main.js","hash":"28d30d6dd4ffef17d236f31b5cba7714d770f5c1","modified":1493082510000},{"_id":"themes/spfk/source/js/pace.js","hash":"d9cfcb7e1fc4b827a64491726c9a78b9886b3793","modified":1493082510000},{"_id":"themes/spfk/source/js/plugins.js","hash":"63e93eee75d6a83717af73dcc9829983123e01c1","modified":1493082510000},{"_id":"themes/spfk/source/js/pc.js","hash":"482dc45356756150f0bee80c8d9a0987965b89ea","modified":1493082510000},{"_id":"themes/spfk/source/img/alipayimg.jpg","hash":"02b5b31f517534b85a73c7d70f7d3df6b4842940","modified":1493101520000},{"_id":"themes/spfk/source/img/wechatimg.jpg","hash":"fe66f7c4db4716d25745e8b307628637a9e837d8","modified":1493101584000},{"_id":"themes/spfk/source/js/embed.js","hash":"0c4047c10bffdc5289f4e61700cc7dfbb56ccb0d","modified":1493082510000},{"_id":"source/_posts/.Archive/2.md/2017-04-21 11-15-26.md","hash":"f55dac9b6a41e9977b69d6d4f28f4c056b3b28b9","modified":1562139653346},{"_id":"source/_posts/.Archive/2.md/2017-04-21 11-15-26.md.bak","hash":"1df8ad7b19028cd2b05484c80e0a1ca9b0a5e572","modified":1562139653346},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"da37a6c1631e82533b4cec7d1f5bb246b5b1acfe","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"a1b64506cd6aba3cd8ab48cf3ee0d6477123d6b1","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"9590b381b3b787ca9b1d93d97a8d58e9fd9a4f2a","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post/swiftype.ejs","hash":"90f03e7f0ca811f3caeeaaeb2aaf5283e3ab4bb5","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/share/baidu-share.ejs","hash":"499c1f92b613caff6d3828e5bfc4f40ed7af7b85","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1493082510000},{"_id":"themes/spfk/layout/_partial/share/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1493082510000},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1493082510000},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"4df95b4bb2d092fb4edacaace6da75b68b76ffc9","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"dc3c5531589dc2858e20d01a0db5d116d6b7f507","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"ac1648577fb7cec4674dda53a0c02490b43d4d7b","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"a38dd264db83942da95713b78311e4cca0d99325","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"525dd26d258c566353417fa1b74b9eb57807f898","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"606c4b47dce561443f2d5151382aea4cfef4989a","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"fd30cf933e39ee348e69cc8458455cc4f622b7e9","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"98b6db59fbedee6f2a35b76624cce7b5f8ffce94","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"05bec94ed9f9fafa284926a8711aa52de7c56279","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/reward.styl","hash":"623579f4e261ba826fc0a9ec5e522856d1dd47c9","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"ddcfef2526e6d98f84ae88a87c1ec911649ef791","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1493082510000},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"65ce5d4aac09e570914a075a4fd17941c9a51c47","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1493082510000},{"_id":"themes/spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1493082510000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1493082510000},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1493082510000},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1493082510000},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1493082510000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1493082510000},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1493082510000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1493082510000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1493082510000},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"edfed5def2ad4f7fdad0eb50b26a51c3b010c2b1","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"3571eedc41a7a099fab8cdac5c2143bf10397011","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"e3d6368de04e83d2baaebf80f7d746272bb22264","modified":1493082510000},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1493082510000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/imgshare.css","hash":"7465b359751d368f4a45f7823dc4a1918bba7f5f","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1493082510000},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/base/class.js","hash":"9b2e8af7870bd36a7e271c54b726cb79a375d93a","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1493082510000},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/animate.js","hash":"0adfc191385eb76dc38452af8307d4e2f28436f9","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","hash":"3bf6c59fbcf5d77c595e461dac13478d078b2d48","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","hash":"e2a413a6ae6fa73cd080f5852a06f6c7e3280fd0","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/conf/const.js","hash":"44fb8861c5723e508ebaebfeaeafbaebbc2733ea","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/conf/define.js","hash":"734084a8d672deb373b9ad2ebf82621b9f76cfea","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","hash":"91dc0f3a19bc4f18c44e953e4a22313d9eb4d673","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","hash":"e1a4b51bf73037876517afae9c873c311a70a3ae","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","hash":"f6815b354bc7120e372bf0af0869996132d9c3db","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/start/router.js","hash":"8566cdaed64760ea765d0542a337ba7acc5a447b","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","hash":"bbcbd24ac4a6613a2c633766de78b2f9dd988808","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","hash":"db1ca49efafb70eca0e830a513367c0275368ff1","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","hash":"7403d0215bb28190bd0cfd5480469f13dd27f88b","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","hash":"b2a9e51f2c35ea58d5d2cc036c88895e34fb653e","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1493082510000},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1493082510000},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","hash":"f3ecbed4c05dba6a28df137e9a4e66c9ccfbd220","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1493082510000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1493082510000},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1493082510000},{"_id":"themes/spfk/source/img/bg1.jpg","hash":"8261c69a9a736a321510a28d9a8f3d1584d57734","modified":1475544854000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"必须要会的Git基本使用及常用命令操作","date":"2019-07-03T07:40:53.349Z","_content":"\n之前一直用的svn，后来换了之后才发现git的强大功能，是svn不能比的。缺点就是可能上手比较难一点，刚开始自己研究了两天才摸索出来一些基本使用方法。\n最近做项目需要建库等等，都用到了git，随着越来越多的使用，也越来有越多的认识。\n<!-- more -->\n一开始都是别人建好远程库，克隆下来就行了。\n下面内容只是带你git入门，一些基础的东西，是开发过程中一些基本的操作，单单这些你会用了之后就能发现他的好处，以及使用命令行Enter敲击时的快感，还能提高逼格。\n当然我们还是为了方便项目管理。\n \n#####安装\ngit工具下载地址，可以选择适合自己的操作系统：https://git-scm.com/downloads\n安装完git，要配置环境变量，拷贝git安装目录下的bin文件目录，如D:\\Program Files\\Git\\bin\n,将目录拷贝添加到PATH变量后。\n__注意：与前面的值要用“;”号隔开__\n具体步骤：\n> 右键计算机-属性-高级系统设置-环境变量-PATH将目录添加到后面，%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\Program Files\\Git\\bin\n\n安装完成后使用 ``git --version``命令查看一下git版本，测试是否安装、配置成功。\n#####克隆远程库\n使用cmd（安装过git直接可以右键文件夹使用``git bash here``）定位到要放置仓库的目录\n``git clone [远程仓库地址]``\n远程仓库就是托管到第三方平台上面的库。\n常用的有github，这个私有是收费的，要用免费的只能是公共的。\n目前国内用的比较多的[coding](https://coding.net/) ，和开源中国的[码云](http://git.oschina.net/)。原理都一样，只不过看起来会有点视觉上的差别，个人觉得coding比较简洁,适合学习，刚入门git的新手练习。而且视图更直观。\n码云是我现在用的，功能要比coding多，包括直接下载上传文件以及打包好的apk文件。\n\n在这里要说一下克隆的时候有的坑，__要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员__。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。\n\n前面步骤如果无误，之后会显示克隆的进度，直到完成克隆。\n\n#####创建代码库\n包括远程库（第三方平台）、本地库（存放代码信息）。\n- 创建远程库：根据第三方平台提示进行创建，一般都有步骤说明，按照说明来就好。\n创建完成后建议初始化一下仓库，\n可以在远程上根据提示，创建使用README.md文件初始化项目。\n也可以使用git命令：\n```\ngit init\necho \"# HelloWorld\" >> README.md\ngit add README.md\ngit commit -m \"first commit\"\n```\n建议使用前者，直接在第三方上创建。\n- 创建本地仓库：有两种方法\n1、使用git命令\n``git init``\n2、android Studio中（这里使用AS为例，其它的IDEA、webStorm操作都一样）\n点击``VCS-import into version control-create git repository``\n会弹出选择仓库的路径，直接选当前项目就行，然后确定。\n创建完之后，找到项目路径会发现文件夹下多了个.git文件，这个就是存放代码的仓库。\n而且项目中的文件的名称都会变为红色，说明已经有仓库了，但是这些红色的项目文件，并没有加到本地仓库（.git仓库文件中）。\n__（关于颜色后面我会具体说，各种颜色代表的状态）__\n- 关联本地和远程库\n关联就是把本地仓库的.git仓库文件，和远程（coding）创建的仓库联系起来，每次提交代码，将本地.git中代码，提交到远程库。\n使用命令：\n``git remote add origin [远程仓库地址]``\n如果是首次使用，会提示输入用户名+密码，用户名一般是邮箱，输错是关联不成功的。\n关联成功则无提示，接着输入命令\n``git push origin master``\n如果失败，很大可能是远程仓库已存在文件。可以执行\n``git push -f origin master``强制提交。\n提交过程是能看到进度的。\n提交完成后可以去平台上查看有没有代码就知道是否成功。\n\n\n\n__注意：所有命令行操作必须使用cmd或者git bash定位到项目目录下__\n\n#####仓库基本使用\n提交过程：\n``右键项目-git-add，弹框，选择是``；\n这时候只是把代码添加到本地仓库，\n``再右键项目选择commit  directory 在弹框的commit message中输入提交信息，选择commit and push``\n然后会显示进度。\n在多人协作开发一个项目的时候，提交之前一定要先pull一下（``VCS - pull``）,如果有冲突，选择合并或者是选择远程的，还是本地的，三者选一。\n处理好这些再进行提交操作。\n#####分支管理\n分支作为git一个重要的存在，可以进行版本回退，或者协作开发都是一个很便利的存在。\n在创建仓库的时候，默认会有个master分支，如果是首次开发，则不需要创建分支。\n但是在版本迭代的时候，特别是大版本迭代，就用到了分支，分支是相互独立存在的仓库。\n互不影响，在克隆的时候切换一下分支，就会把不同分支下的仓库内容拷贝过来，就像1.0、2.0版本，是分开的，1.0在master分支，2.0版本在maste2分支，可以随时修改历史版本。\n\n__常用命令__\n创建并切换到新建分支：\n``git checkout -b master2``\n切换分支：\n``git checkout master2``\n删除分支：\n``git branch -d fmaster2``\n将分支推送到远程仓库：\n``git push origin <branch>``\n\n#####关于颜色\n白色（正常色）：未改动或者没有仓库时的颜色。上\n红色：未添加仓库的，在创建仓库时会出现。\n绿色：已添加到本地仓库，没有进行commit push提交远程的。\n蓝色：修改已经提交到本地仓库的代码。\n\n\n#####常见问题\n\n>有一种情况是提交/强制提交的时候出现\n\n``\nerror: src refspec master does not match any.\nerror: failed to push some refs to 'https://github.com/wapchief/chat-room-JFrame.git'\n``\n说明是本地代码库为空\n解决办法：\n1、在项目中，如android studio，打开项目，右键->Git->+Add，然后重新右键->Git->commit Directory->commit and push->commit。执行之后会发现代码文件颜色都变成正常的白色，之后回到命令行执行提交操作\n2、在本地仓库创建一个文件，推送到仓库\n``touch README\ngit add README \ngit commit -m 'first commit'\ngit push origin master``\n如果按照上面的步骤来的话是不会出现这种情况的，这种情况出现于已有现成的项目，并且本地项目的代码未提交到本地仓库。这时候提交到远程，就会判定你本地仓库为空。\n\n> 补充一个在提交过程中出现无法解决问题的办法\n\n如果在使用命令行操作时出现无法解决的错误，直接进入到项目文件，删除``.git``文件,然后右键该项目目录，或者使用cmd定位到该目录，重新执行\n```\ngit init  #初始化本地仓库\ngit remote add origin [远程库地址]  #关联远程库\ngit add . #提交本地代码到本地仓库的暂存区\ngit commit -m '[提交说明]' #提交本地代码到本地仓库，并附上提交说明\ngit push -f origin master #强制推送到远程库\n```\n___\n关于这些只是对于刚入门的学习者有些帮助，在我学习的时候也遇到了好多坑，至今有些问题还能遇到，但是不至于手忙脚乱，起码知道问题出在了哪个环节。\nGit是一个很强大的版本控制工具，有很多功能，需要尝试去深入研究，希望学习者能够感受到他带来的便捷。","source":"_posts/2.md","raw":"---\ntitle: 必须要会的Git基本使用及常用命令操作\ndate: 2017年4月25日13:15:08\ncategories: \ntags: [git,android] #文章标签，可空，多标签请用格式，注意:后面有个空格\n\n---\n\n之前一直用的svn，后来换了之后才发现git的强大功能，是svn不能比的。缺点就是可能上手比较难一点，刚开始自己研究了两天才摸索出来一些基本使用方法。\n最近做项目需要建库等等，都用到了git，随着越来越多的使用，也越来有越多的认识。\n<!-- more -->\n一开始都是别人建好远程库，克隆下来就行了。\n下面内容只是带你git入门，一些基础的东西，是开发过程中一些基本的操作，单单这些你会用了之后就能发现他的好处，以及使用命令行Enter敲击时的快感，还能提高逼格。\n当然我们还是为了方便项目管理。\n \n#####安装\ngit工具下载地址，可以选择适合自己的操作系统：https://git-scm.com/downloads\n安装完git，要配置环境变量，拷贝git安装目录下的bin文件目录，如D:\\Program Files\\Git\\bin\n,将目录拷贝添加到PATH变量后。\n__注意：与前面的值要用“;”号隔开__\n具体步骤：\n> 右键计算机-属性-高级系统设置-环境变量-PATH将目录添加到后面，%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\Program Files\\Git\\bin\n\n安装完成后使用 ``git --version``命令查看一下git版本，测试是否安装、配置成功。\n#####克隆远程库\n使用cmd（安装过git直接可以右键文件夹使用``git bash here``）定位到要放置仓库的目录\n``git clone [远程仓库地址]``\n远程仓库就是托管到第三方平台上面的库。\n常用的有github，这个私有是收费的，要用免费的只能是公共的。\n目前国内用的比较多的[coding](https://coding.net/) ，和开源中国的[码云](http://git.oschina.net/)。原理都一样，只不过看起来会有点视觉上的差别，个人觉得coding比较简洁,适合学习，刚入门git的新手练习。而且视图更直观。\n码云是我现在用的，功能要比coding多，包括直接下载上传文件以及打包好的apk文件。\n\n在这里要说一下克隆的时候有的坑，__要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员__。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。\n\n前面步骤如果无误，之后会显示克隆的进度，直到完成克隆。\n\n#####创建代码库\n包括远程库（第三方平台）、本地库（存放代码信息）。\n- 创建远程库：根据第三方平台提示进行创建，一般都有步骤说明，按照说明来就好。\n创建完成后建议初始化一下仓库，\n可以在远程上根据提示，创建使用README.md文件初始化项目。\n也可以使用git命令：\n```\ngit init\necho \"# HelloWorld\" >> README.md\ngit add README.md\ngit commit -m \"first commit\"\n```\n建议使用前者，直接在第三方上创建。\n- 创建本地仓库：有两种方法\n1、使用git命令\n``git init``\n2、android Studio中（这里使用AS为例，其它的IDEA、webStorm操作都一样）\n点击``VCS-import into version control-create git repository``\n会弹出选择仓库的路径，直接选当前项目就行，然后确定。\n创建完之后，找到项目路径会发现文件夹下多了个.git文件，这个就是存放代码的仓库。\n而且项目中的文件的名称都会变为红色，说明已经有仓库了，但是这些红色的项目文件，并没有加到本地仓库（.git仓库文件中）。\n__（关于颜色后面我会具体说，各种颜色代表的状态）__\n- 关联本地和远程库\n关联就是把本地仓库的.git仓库文件，和远程（coding）创建的仓库联系起来，每次提交代码，将本地.git中代码，提交到远程库。\n使用命令：\n``git remote add origin [远程仓库地址]``\n如果是首次使用，会提示输入用户名+密码，用户名一般是邮箱，输错是关联不成功的。\n关联成功则无提示，接着输入命令\n``git push origin master``\n如果失败，很大可能是远程仓库已存在文件。可以执行\n``git push -f origin master``强制提交。\n提交过程是能看到进度的。\n提交完成后可以去平台上查看有没有代码就知道是否成功。\n\n\n\n__注意：所有命令行操作必须使用cmd或者git bash定位到项目目录下__\n\n#####仓库基本使用\n提交过程：\n``右键项目-git-add，弹框，选择是``；\n这时候只是把代码添加到本地仓库，\n``再右键项目选择commit  directory 在弹框的commit message中输入提交信息，选择commit and push``\n然后会显示进度。\n在多人协作开发一个项目的时候，提交之前一定要先pull一下（``VCS - pull``）,如果有冲突，选择合并或者是选择远程的，还是本地的，三者选一。\n处理好这些再进行提交操作。\n#####分支管理\n分支作为git一个重要的存在，可以进行版本回退，或者协作开发都是一个很便利的存在。\n在创建仓库的时候，默认会有个master分支，如果是首次开发，则不需要创建分支。\n但是在版本迭代的时候，特别是大版本迭代，就用到了分支，分支是相互独立存在的仓库。\n互不影响，在克隆的时候切换一下分支，就会把不同分支下的仓库内容拷贝过来，就像1.0、2.0版本，是分开的，1.0在master分支，2.0版本在maste2分支，可以随时修改历史版本。\n\n__常用命令__\n创建并切换到新建分支：\n``git checkout -b master2``\n切换分支：\n``git checkout master2``\n删除分支：\n``git branch -d fmaster2``\n将分支推送到远程仓库：\n``git push origin <branch>``\n\n#####关于颜色\n白色（正常色）：未改动或者没有仓库时的颜色。上\n红色：未添加仓库的，在创建仓库时会出现。\n绿色：已添加到本地仓库，没有进行commit push提交远程的。\n蓝色：修改已经提交到本地仓库的代码。\n\n\n#####常见问题\n\n>有一种情况是提交/强制提交的时候出现\n\n``\nerror: src refspec master does not match any.\nerror: failed to push some refs to 'https://github.com/wapchief/chat-room-JFrame.git'\n``\n说明是本地代码库为空\n解决办法：\n1、在项目中，如android studio，打开项目，右键->Git->+Add，然后重新右键->Git->commit Directory->commit and push->commit。执行之后会发现代码文件颜色都变成正常的白色，之后回到命令行执行提交操作\n2、在本地仓库创建一个文件，推送到仓库\n``touch README\ngit add README \ngit commit -m 'first commit'\ngit push origin master``\n如果按照上面的步骤来的话是不会出现这种情况的，这种情况出现于已有现成的项目，并且本地项目的代码未提交到本地仓库。这时候提交到远程，就会判定你本地仓库为空。\n\n> 补充一个在提交过程中出现无法解决问题的办法\n\n如果在使用命令行操作时出现无法解决的错误，直接进入到项目文件，删除``.git``文件,然后右键该项目目录，或者使用cmd定位到该目录，重新执行\n```\ngit init  #初始化本地仓库\ngit remote add origin [远程库地址]  #关联远程库\ngit add . #提交本地代码到本地仓库的暂存区\ngit commit -m '[提交说明]' #提交本地代码到本地仓库，并附上提交说明\ngit push -f origin master #强制推送到远程库\n```\n___\n关于这些只是对于刚入门的学习者有些帮助，在我学习的时候也遇到了好多坑，至今有些问题还能遇到，但是不至于手忙脚乱，起码知道问题出在了哪个环节。\nGit是一个很强大的版本控制工具，有很多功能，需要尝试去深入研究，希望学习者能够感受到他带来的便捷。","slug":"2","published":1,"updated":"2019-07-03T07:40:53.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxmzrkxl0000glu21q4iqxay","content":"<p>之前一直用的svn，后来换了之后才发现git的强大功能，是svn不能比的。缺点就是可能上手比较难一点，刚开始自己研究了两天才摸索出来一些基本使用方法。<br>最近做项目需要建库等等，都用到了git，随着越来越多的使用，也越来有越多的认识。<br><a id=\"more\"></a><br>一开始都是别人建好远程库，克隆下来就行了。<br>下面内容只是带你git入门，一些基础的东西，是开发过程中一些基本的操作，单单这些你会用了之后就能发现他的好处，以及使用命令行Enter敲击时的快感，还能提高逼格。<br>当然我们还是为了方便项目管理。</p>\n<p>#####安装<br>git工具下载地址，可以选择适合自己的操作系统：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">https://git-scm.com/downloads</a><br>安装完git，要配置环境变量，拷贝git安装目录下的bin文件目录，如D:\\Program Files\\Git\\bin<br>,将目录拷贝添加到PATH变量后。<br><strong>注意：与前面的值要用“;”号隔开</strong><br>具体步骤：</p>\n<blockquote>\n<p>右键计算机-属性-高级系统设置-环境变量-PATH将目录添加到后面，%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\Program Files\\Git\\bin</p>\n</blockquote>\n<p>安装完成后使用 <code>git --version</code>命令查看一下git版本，测试是否安装、配置成功。</p>\n<p>#####克隆远程库<br>使用cmd（安装过git直接可以右键文件夹使用<code>git bash here</code>）定位到要放置仓库的目录<br><code>git clone [远程仓库地址]</code><br>远程仓库就是托管到第三方平台上面的库。<br>常用的有github，这个私有是收费的，要用免费的只能是公共的。<br>目前国内用的比较多的<a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">coding</a> ，和开源中国的<a href=\"http://git.oschina.net/\" target=\"_blank\" rel=\"external\">码云</a>。原理都一样，只不过看起来会有点视觉上的差别，个人觉得coding比较简洁,适合学习，刚入门git的新手练习。而且视图更直观。<br>码云是我现在用的，功能要比coding多，包括直接下载上传文件以及打包好的apk文件。</p>\n<p>在这里要说一下克隆的时候有的坑，<strong>要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员</strong>。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。</p>\n<p>前面步骤如果无误，之后会显示克隆的进度，直到完成克隆。</p>\n<p>#####创建代码库<br>包括远程库（第三方平台）、本地库（存放代码信息）。</p>\n<ul>\n<li>创建远程库：根据第三方平台提示进行创建，一般都有步骤说明，按照说明来就好。<br>创建完成后建议初始化一下仓库，<br>可以在远程上根据提示，创建使用README.md文件初始化项目。<br>也可以使用git命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">echo &quot;# HelloWorld&quot; &gt;&gt; README.md</div><div class=\"line\">git add README.md</div><div class=\"line\">git commit -m &quot;first commit&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>建议使用前者，直接在第三方上创建。</p>\n<ul>\n<li>创建本地仓库：有两种方法<br>1、使用git命令<br><code>git init</code><br>2、android Studio中（这里使用AS为例，其它的IDEA、webStorm操作都一样）<br>点击<code>VCS-import into version control-create git repository</code><br>会弹出选择仓库的路径，直接选当前项目就行，然后确定。<br>创建完之后，找到项目路径会发现文件夹下多了个.git文件，这个就是存放代码的仓库。<br>而且项目中的文件的名称都会变为红色，说明已经有仓库了，但是这些红色的项目文件，并没有加到本地仓库（.git仓库文件中）。<br><strong>（关于颜色后面我会具体说，各种颜色代表的状态）</strong></li>\n<li>关联本地和远程库<br>关联就是把本地仓库的.git仓库文件，和远程（coding）创建的仓库联系起来，每次提交代码，将本地.git中代码，提交到远程库。<br>使用命令：<br><code>git remote add origin [远程仓库地址]</code><br>如果是首次使用，会提示输入用户名+密码，用户名一般是邮箱，输错是关联不成功的。<br>关联成功则无提示，接着输入命令<br><code>git push origin master</code><br>如果失败，很大可能是远程仓库已存在文件。可以执行<br><code>git push -f origin master</code>强制提交。<br>提交过程是能看到进度的。<br>提交完成后可以去平台上查看有没有代码就知道是否成功。</li>\n</ul>\n<p><strong>注意：所有命令行操作必须使用cmd或者git bash定位到项目目录下</strong></p>\n<p>#####仓库基本使用<br>提交过程：<br><code>右键项目-git-add，弹框，选择是</code>；<br>这时候只是把代码添加到本地仓库，<br><code>再右键项目选择commit  directory 在弹框的commit message中输入提交信息，选择commit and push</code><br>然后会显示进度。<br>在多人协作开发一个项目的时候，提交之前一定要先pull一下（<code>VCS - pull</code>）,如果有冲突，选择合并或者是选择远程的，还是本地的，三者选一。<br>处理好这些再进行提交操作。</p>\n<p>#####分支管理<br>分支作为git一个重要的存在，可以进行版本回退，或者协作开发都是一个很便利的存在。<br>在创建仓库的时候，默认会有个master分支，如果是首次开发，则不需要创建分支。<br>但是在版本迭代的时候，特别是大版本迭代，就用到了分支，分支是相互独立存在的仓库。<br>互不影响，在克隆的时候切换一下分支，就会把不同分支下的仓库内容拷贝过来，就像1.0、2.0版本，是分开的，1.0在master分支，2.0版本在maste2分支，可以随时修改历史版本。</p>\n<p><strong>常用命令</strong><br>创建并切换到新建分支：<br><code>git checkout -b master2</code><br>切换分支：<br><code>git checkout master2</code><br>删除分支：<br><code>git branch -d fmaster2</code><br>将分支推送到远程仓库：<br><code>git push origin &lt;branch&gt;</code></p>\n<p>#####关于颜色<br>白色（正常色）：未改动或者没有仓库时的颜色。上<br>红色：未添加仓库的，在创建仓库时会出现。<br>绿色：已添加到本地仓库，没有进行commit push提交远程的。<br>蓝色：修改已经提交到本地仓库的代码。</p>\n<p>#####常见问题</p>\n<blockquote>\n<p>有一种情况是提交/强制提交的时候出现</p>\n</blockquote>\n<p><code>error: src refspec master does not match any.\nerror: failed to push some refs to &#39;https://github.com/wapchief/chat-room-JFrame.git&#39;</code><br>说明是本地代码库为空<br>解决办法：<br>1、在项目中，如android studio，打开项目，右键-&gt;Git-&gt;+Add，然后重新右键-&gt;Git-&gt;commit Directory-&gt;commit and push-&gt;commit。执行之后会发现代码文件颜色都变成正常的白色，之后回到命令行执行提交操作<br>2、在本地仓库创建一个文件，推送到仓库<br><code>touch README\ngit add README \ngit commit -m &#39;first commit&#39;\ngit push origin master</code><br>如果按照上面的步骤来的话是不会出现这种情况的，这种情况出现于已有现成的项目，并且本地项目的代码未提交到本地仓库。这时候提交到远程，就会判定你本地仓库为空。</p>\n<blockquote>\n<p>补充一个在提交过程中出现无法解决问题的办法</p>\n</blockquote>\n<p>如果在使用命令行操作时出现无法解决的错误，直接进入到项目文件，删除<code>.git</code>文件,然后右键该项目目录，或者使用cmd定位到该目录，重新执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init  #初始化本地仓库</div><div class=\"line\">git remote add origin [远程库地址]  #关联远程库</div><div class=\"line\">git add . #提交本地代码到本地仓库的暂存区</div><div class=\"line\">git commit -m &apos;[提交说明]&apos; #提交本地代码到本地仓库，并附上提交说明</div><div class=\"line\">git push -f origin master #强制推送到远程库</div></pre></td></tr></table></figure></p>\n<hr>\n<p>关于这些只是对于刚入门的学习者有些帮助，在我学习的时候也遇到了好多坑，至今有些问题还能遇到，但是不至于手忙脚乱，起码知道问题出在了哪个环节。<br>Git是一个很强大的版本控制工具，有很多功能，需要尝试去深入研究，希望学习者能够感受到他带来的便捷。</p>\n","site":{"data":{}},"excerpt":"<p>之前一直用的svn，后来换了之后才发现git的强大功能，是svn不能比的。缺点就是可能上手比较难一点，刚开始自己研究了两天才摸索出来一些基本使用方法。<br>最近做项目需要建库等等，都用到了git，随着越来越多的使用，也越来有越多的认识。<br>","more":"<br>一开始都是别人建好远程库，克隆下来就行了。<br>下面内容只是带你git入门，一些基础的东西，是开发过程中一些基本的操作，单单这些你会用了之后就能发现他的好处，以及使用命令行Enter敲击时的快感，还能提高逼格。<br>当然我们还是为了方便项目管理。</p>\n<p>#####安装<br>git工具下载地址，可以选择适合自己的操作系统：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">https://git-scm.com/downloads</a><br>安装完git，要配置环境变量，拷贝git安装目录下的bin文件目录，如D:\\Program Files\\Git\\bin<br>,将目录拷贝添加到PATH变量后。<br><strong>注意：与前面的值要用“;”号隔开</strong><br>具体步骤：</p>\n<blockquote>\n<p>右键计算机-属性-高级系统设置-环境变量-PATH将目录添加到后面，%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\Program Files\\Git\\bin</p>\n</blockquote>\n<p>安装完成后使用 <code>git --version</code>命令查看一下git版本，测试是否安装、配置成功。</p>\n<p>#####克隆远程库<br>使用cmd（安装过git直接可以右键文件夹使用<code>git bash here</code>）定位到要放置仓库的目录<br><code>git clone [远程仓库地址]</code><br>远程仓库就是托管到第三方平台上面的库。<br>常用的有github，这个私有是收费的，要用免费的只能是公共的。<br>目前国内用的比较多的<a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">coding</a> ，和开源中国的<a href=\"http://git.oschina.net/\" target=\"_blank\" rel=\"external\">码云</a>。原理都一样，只不过看起来会有点视觉上的差别，个人觉得coding比较简洁,适合学习，刚入门git的新手练习。而且视图更直观。<br>码云是我现在用的，功能要比coding多，包括直接下载上传文件以及打包好的apk文件。</p>\n<p>在这里要说一下克隆的时候有的坑，<strong>要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员</strong>。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。</p>\n<p>前面步骤如果无误，之后会显示克隆的进度，直到完成克隆。</p>\n<p>#####创建代码库<br>包括远程库（第三方平台）、本地库（存放代码信息）。</p>\n<ul>\n<li>创建远程库：根据第三方平台提示进行创建，一般都有步骤说明，按照说明来就好。<br>创建完成后建议初始化一下仓库，<br>可以在远程上根据提示，创建使用README.md文件初始化项目。<br>也可以使用git命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">echo &quot;# HelloWorld&quot; &gt;&gt; README.md</div><div class=\"line\">git add README.md</div><div class=\"line\">git commit -m &quot;first commit&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>建议使用前者，直接在第三方上创建。</p>\n<ul>\n<li>创建本地仓库：有两种方法<br>1、使用git命令<br><code>git init</code><br>2、android Studio中（这里使用AS为例，其它的IDEA、webStorm操作都一样）<br>点击<code>VCS-import into version control-create git repository</code><br>会弹出选择仓库的路径，直接选当前项目就行，然后确定。<br>创建完之后，找到项目路径会发现文件夹下多了个.git文件，这个就是存放代码的仓库。<br>而且项目中的文件的名称都会变为红色，说明已经有仓库了，但是这些红色的项目文件，并没有加到本地仓库（.git仓库文件中）。<br><strong>（关于颜色后面我会具体说，各种颜色代表的状态）</strong></li>\n<li>关联本地和远程库<br>关联就是把本地仓库的.git仓库文件，和远程（coding）创建的仓库联系起来，每次提交代码，将本地.git中代码，提交到远程库。<br>使用命令：<br><code>git remote add origin [远程仓库地址]</code><br>如果是首次使用，会提示输入用户名+密码，用户名一般是邮箱，输错是关联不成功的。<br>关联成功则无提示，接着输入命令<br><code>git push origin master</code><br>如果失败，很大可能是远程仓库已存在文件。可以执行<br><code>git push -f origin master</code>强制提交。<br>提交过程是能看到进度的。<br>提交完成后可以去平台上查看有没有代码就知道是否成功。</li>\n</ul>\n<p><strong>注意：所有命令行操作必须使用cmd或者git bash定位到项目目录下</strong></p>\n<p>#####仓库基本使用<br>提交过程：<br><code>右键项目-git-add，弹框，选择是</code>；<br>这时候只是把代码添加到本地仓库，<br><code>再右键项目选择commit  directory 在弹框的commit message中输入提交信息，选择commit and push</code><br>然后会显示进度。<br>在多人协作开发一个项目的时候，提交之前一定要先pull一下（<code>VCS - pull</code>）,如果有冲突，选择合并或者是选择远程的，还是本地的，三者选一。<br>处理好这些再进行提交操作。</p>\n<p>#####分支管理<br>分支作为git一个重要的存在，可以进行版本回退，或者协作开发都是一个很便利的存在。<br>在创建仓库的时候，默认会有个master分支，如果是首次开发，则不需要创建分支。<br>但是在版本迭代的时候，特别是大版本迭代，就用到了分支，分支是相互独立存在的仓库。<br>互不影响，在克隆的时候切换一下分支，就会把不同分支下的仓库内容拷贝过来，就像1.0、2.0版本，是分开的，1.0在master分支，2.0版本在maste2分支，可以随时修改历史版本。</p>\n<p><strong>常用命令</strong><br>创建并切换到新建分支：<br><code>git checkout -b master2</code><br>切换分支：<br><code>git checkout master2</code><br>删除分支：<br><code>git branch -d fmaster2</code><br>将分支推送到远程仓库：<br><code>git push origin &lt;branch&gt;</code></p>\n<p>#####关于颜色<br>白色（正常色）：未改动或者没有仓库时的颜色。上<br>红色：未添加仓库的，在创建仓库时会出现。<br>绿色：已添加到本地仓库，没有进行commit push提交远程的。<br>蓝色：修改已经提交到本地仓库的代码。</p>\n<p>#####常见问题</p>\n<blockquote>\n<p>有一种情况是提交/强制提交的时候出现</p>\n</blockquote>\n<p><code>error: src refspec master does not match any.\nerror: failed to push some refs to &#39;https://github.com/wapchief/chat-room-JFrame.git&#39;</code><br>说明是本地代码库为空<br>解决办法：<br>1、在项目中，如android studio，打开项目，右键-&gt;Git-&gt;+Add，然后重新右键-&gt;Git-&gt;commit Directory-&gt;commit and push-&gt;commit。执行之后会发现代码文件颜色都变成正常的白色，之后回到命令行执行提交操作<br>2、在本地仓库创建一个文件，推送到仓库<br><code>touch README\ngit add README \ngit commit -m &#39;first commit&#39;\ngit push origin master</code><br>如果按照上面的步骤来的话是不会出现这种情况的，这种情况出现于已有现成的项目，并且本地项目的代码未提交到本地仓库。这时候提交到远程，就会判定你本地仓库为空。</p>\n<blockquote>\n<p>补充一个在提交过程中出现无法解决问题的办法</p>\n</blockquote>\n<p>如果在使用命令行操作时出现无法解决的错误，直接进入到项目文件，删除<code>.git</code>文件,然后右键该项目目录，或者使用cmd定位到该目录，重新执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init  #初始化本地仓库</div><div class=\"line\">git remote add origin [远程库地址]  #关联远程库</div><div class=\"line\">git add . #提交本地代码到本地仓库的暂存区</div><div class=\"line\">git commit -m &apos;[提交说明]&apos; #提交本地代码到本地仓库，并附上提交说明</div><div class=\"line\">git push -f origin master #强制推送到远程库</div></pre></td></tr></table></figure></p>\n<hr>\n<p>关于这些只是对于刚入门的学习者有些帮助，在我学习的时候也遇到了好多坑，至今有些问题还能遇到，但是不至于手忙脚乱，起码知道问题出在了哪个环节。<br>Git是一个很强大的版本控制工具，有很多功能，需要尝试去深入研究，希望学习者能够感受到他带来的便捷。</p>"},{"title":"青少年心理引导类app目标用户人群分析","date":"2019-07-03T07:40:53.352Z","description":null,"toc":true,"_content":"##### 前言\n> 心理是人们最难以捉摸的,很多家长和孩子们之间都存在沟通问题。孩子心理问题又不好去跟家长沟通，家长的不理解。去找心理医生又得掏腰包，麻烦不说还要面子，而且这种问题往往不是很快就能解决的，所以心理类的app也想在这个互联网的大环境中跻身进来。\n\n>目前线上相对来说进入市场成熟一点的有q心理，壹心理等，也包括还在往这个方向发展的其他的app。都想在心理市场吸引用户，打开市场。\n\n<!-- more -->\n</br>\n在上篇文章：[《在线教育app产品功能分析》](http://www.jianshu.com/p/f880496a61d5) 中用了一个刚上线的app简单分析了一下产品的功能。主要就是针对青少年和学生家长心理进行指导的。\n具体产品功能在上文已经分析过，这里只分析该行业的用户人群目标。\n\n![青少年心理.jpg](http://upload-images.jianshu.io/upload_images/2858691-df7288af846c8339.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n> 这个项目定位很明确，针对的用户无非就两种，青少年And家长。围绕心理教育所进行的一系列教育引导的工作。\n>所以目标人群就划定在了青少年和家长之间。\n\n</br>\n##### 百度指数人群画像分析\n\n![人群画像.png](http://upload-images.jianshu.io/upload_images/2858691-28c256ed4218ab04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n数据来源：[百度指数搜索](https://index.baidu.com/?tpl=crowd&type=0&area=&time=14&word=%D0%C4%C0%ED%D6%B8%B5%BC%2C%D0%C4%C0%ED%BD%A1%BF%B5%2C%D0%C4%C0%ED%BD%CC%D3%FD%2C%D0%C4%C0%ED%D7%C9%D1%AF%2C%D0%C4%C0%ED%B8%A8%B5%BC#)\n\n> 使用了5个关键字作为分析对象。整体年龄段在20-45之间的人数为主。\n\n</br>\n##### 百度舆情洞察分析\n按照平均生育年龄25来算，那么孩子的年龄在20岁以下，比较符合青少年和家长的人群。至于20-29岁为什么占比也高，有几个方面。从下面的表中可以得出：\n- 大学生。几乎每所大学都有一门心理课，这也是为什么关于这类搜索为什么文章成分占多数的原因。大家都有过的百度经历这里就不说了。\n- 刚毕业的。这种要占一部分，想从事心理工作的，包括培训之类的。而且刚毕业的学生社会经验少，一遇到问题就喜欢百度。\n- 已经工作的。这类一般都是工作已经稳定的，关注的两性话题，以及成年人的心理问题比较多。\n\n![20-29岁心理人群对比.png](http://upload-images.jianshu.io/upload_images/2858691-b27a78608e70e2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480)\n> 以上这几类人就被排除在用户人群之外了。所以就剩下了30-45岁的家长为多数。\n\n</br>\n##### 媒体指数\n媒体指数就是为了追踪时事热点。根据社会环境产生的适时媒体。\n![媒体指数.png](http://upload-images.jianshu.io/upload_images/2858691-467e4ba361269496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n> 在5-6月份是中考，高考，两大考。\n>>指向的用户群体就是中学生，这时候学生的压力也是最大的时候。有些家长会带孩子去做一些心理辅导，来缓解孩子们的压力。往往这个时候一发生跟考生相关的新闻，很容易成为热点。所以在这个时候如果能抓住用户人群是一个不错的方法。如果能解决掉用户的心理需求，很容易让用户对其产生好感。一但产生了信任依赖那么市场还愁没有吗？\n\n</br>\n##### 百度知道指数分析\n\n![百度知道.png](http://upload-images.jianshu.io/upload_images/2858691-8c57a4763a594e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**按照正常的月份统计来看，用户所关注的很多都是考前心理辅导，虽然是9月份的数据，但是热度仍然很高，说明用户有对这方面的需求。如何将用户的需求从搜索引擎，转化到移动端，将目标群体的视线转移到移动端。这就要求对用户市场有足够的了解。抓住需求点，去解决需求。**\n","source":"_posts/4.md","raw":"---\ntitle: 青少年心理引导类app目标用户人群分析\ndate: 2017年4月25日13:15:08\ncategories: \ntags: [产品]\ndescription: \ntoc: true\n\n---\n##### 前言\n> 心理是人们最难以捉摸的,很多家长和孩子们之间都存在沟通问题。孩子心理问题又不好去跟家长沟通，家长的不理解。去找心理医生又得掏腰包，麻烦不说还要面子，而且这种问题往往不是很快就能解决的，所以心理类的app也想在这个互联网的大环境中跻身进来。\n\n>目前线上相对来说进入市场成熟一点的有q心理，壹心理等，也包括还在往这个方向发展的其他的app。都想在心理市场吸引用户，打开市场。\n\n<!-- more -->\n</br>\n在上篇文章：[《在线教育app产品功能分析》](http://www.jianshu.com/p/f880496a61d5) 中用了一个刚上线的app简单分析了一下产品的功能。主要就是针对青少年和学生家长心理进行指导的。\n具体产品功能在上文已经分析过，这里只分析该行业的用户人群目标。\n\n![青少年心理.jpg](http://upload-images.jianshu.io/upload_images/2858691-df7288af846c8339.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n> 这个项目定位很明确，针对的用户无非就两种，青少年And家长。围绕心理教育所进行的一系列教育引导的工作。\n>所以目标人群就划定在了青少年和家长之间。\n\n</br>\n##### 百度指数人群画像分析\n\n![人群画像.png](http://upload-images.jianshu.io/upload_images/2858691-28c256ed4218ab04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n数据来源：[百度指数搜索](https://index.baidu.com/?tpl=crowd&type=0&area=&time=14&word=%D0%C4%C0%ED%D6%B8%B5%BC%2C%D0%C4%C0%ED%BD%A1%BF%B5%2C%D0%C4%C0%ED%BD%CC%D3%FD%2C%D0%C4%C0%ED%D7%C9%D1%AF%2C%D0%C4%C0%ED%B8%A8%B5%BC#)\n\n> 使用了5个关键字作为分析对象。整体年龄段在20-45之间的人数为主。\n\n</br>\n##### 百度舆情洞察分析\n按照平均生育年龄25来算，那么孩子的年龄在20岁以下，比较符合青少年和家长的人群。至于20-29岁为什么占比也高，有几个方面。从下面的表中可以得出：\n- 大学生。几乎每所大学都有一门心理课，这也是为什么关于这类搜索为什么文章成分占多数的原因。大家都有过的百度经历这里就不说了。\n- 刚毕业的。这种要占一部分，想从事心理工作的，包括培训之类的。而且刚毕业的学生社会经验少，一遇到问题就喜欢百度。\n- 已经工作的。这类一般都是工作已经稳定的，关注的两性话题，以及成年人的心理问题比较多。\n\n![20-29岁心理人群对比.png](http://upload-images.jianshu.io/upload_images/2858691-b27a78608e70e2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480)\n> 以上这几类人就被排除在用户人群之外了。所以就剩下了30-45岁的家长为多数。\n\n</br>\n##### 媒体指数\n媒体指数就是为了追踪时事热点。根据社会环境产生的适时媒体。\n![媒体指数.png](http://upload-images.jianshu.io/upload_images/2858691-467e4ba361269496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n> 在5-6月份是中考，高考，两大考。\n>>指向的用户群体就是中学生，这时候学生的压力也是最大的时候。有些家长会带孩子去做一些心理辅导，来缓解孩子们的压力。往往这个时候一发生跟考生相关的新闻，很容易成为热点。所以在这个时候如果能抓住用户人群是一个不错的方法。如果能解决掉用户的心理需求，很容易让用户对其产生好感。一但产生了信任依赖那么市场还愁没有吗？\n\n</br>\n##### 百度知道指数分析\n\n![百度知道.png](http://upload-images.jianshu.io/upload_images/2858691-8c57a4763a594e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**按照正常的月份统计来看，用户所关注的很多都是考前心理辅导，虽然是9月份的数据，但是热度仍然很高，说明用户有对这方面的需求。如何将用户的需求从搜索引擎，转化到移动端，将目标群体的视线转移到移动端。这就要求对用户市场有足够的了解。抓住需求点，去解决需求。**\n","slug":"4","published":1,"updated":"2019-07-03T07:40:53.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxmzrkxu0001glu2i9ao1n5b","content":"<h5 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h5><blockquote>\n<p>心理是人们最难以捉摸的,很多家长和孩子们之间都存在沟通问题。孩子心理问题又不好去跟家长沟通，家长的不理解。去找心理医生又得掏腰包，麻烦不说还要面子，而且这种问题往往不是很快就能解决的，所以心理类的app也想在这个互联网的大环境中跻身进来。</p>\n<p>目前线上相对来说进入市场成熟一点的有q心理，壹心理等，也包括还在往这个方向发展的其他的app。都想在心理市场吸引用户，打开市场。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><br><br>在上篇文章：<a href=\"http://www.jianshu.com/p/f880496a61d5\" target=\"_blank\" rel=\"external\">《在线教育app产品功能分析》</a> 中用了一个刚上线的app简单分析了一下产品的功能。主要就是针对青少年和学生家长心理进行指导的。<br>具体产品功能在上文已经分析过，这里只分析该行业的用户人群目标。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-df7288af846c8339.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"青少年心理.jpg\"></p>\n<blockquote>\n<p>这个项目定位很明确，针对的用户无非就两种，青少年And家长。围绕心理教育所进行的一系列教育引导的工作。<br>所以目标人群就划定在了青少年和家长之间。</p>\n</blockquote>\n<p><br></p>\n<h5 id=\"百度指数人群画像分析\"><a href=\"#百度指数人群画像分析\" class=\"headerlink\" title=\"百度指数人群画像分析\"></a>百度指数人群画像分析</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-28c256ed4218ab04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"人群画像.png\"><br>数据来源：<a href=\"https://index.baidu.com/?tpl=crowd&amp;type=0&amp;area=&amp;time=14&amp;word=%D0%C4%C0%ED%D6%B8%B5%BC%2C%D0%C4%C0%ED%BD%A1%BF%B5%2C%D0%C4%C0%ED%BD%CC%D3%FD%2C%D0%C4%C0%ED%D7%C9%D1%AF%2C%D0%C4%C0%ED%B8%A8%B5%BC#\" target=\"_blank\" rel=\"external\">百度指数搜索</a></p>\n<blockquote>\n<p>使用了5个关键字作为分析对象。整体年龄段在20-45之间的人数为主。</p>\n</blockquote>\n<p><br></p>\n<h5 id=\"百度舆情洞察分析\"><a href=\"#百度舆情洞察分析\" class=\"headerlink\" title=\"百度舆情洞察分析\"></a>百度舆情洞察分析</h5><p>按照平均生育年龄25来算，那么孩子的年龄在20岁以下，比较符合青少年和家长的人群。至于20-29岁为什么占比也高，有几个方面。从下面的表中可以得出：</p>\n<ul>\n<li>大学生。几乎每所大学都有一门心理课，这也是为什么关于这类搜索为什么文章成分占多数的原因。大家都有过的百度经历这里就不说了。</li>\n<li>刚毕业的。这种要占一部分，想从事心理工作的，包括培训之类的。而且刚毕业的学生社会经验少，一遇到问题就喜欢百度。</li>\n<li>已经工作的。这类一般都是工作已经稳定的，关注的两性话题，以及成年人的心理问题比较多。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-b27a78608e70e2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480\" alt=\"20-29岁心理人群对比.png\"></p>\n<blockquote>\n<p>以上这几类人就被排除在用户人群之外了。所以就剩下了30-45岁的家长为多数。</p>\n</blockquote>\n<p><br></p>\n<h5 id=\"媒体指数\"><a href=\"#媒体指数\" class=\"headerlink\" title=\"媒体指数\"></a>媒体指数</h5><p>媒体指数就是为了追踪时事热点。根据社会环境产生的适时媒体。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-467e4ba361269496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"媒体指数.png\"></p>\n<blockquote>\n<p>在5-6月份是中考，高考，两大考。</p>\n<blockquote>\n<p>指向的用户群体就是中学生，这时候学生的压力也是最大的时候。有些家长会带孩子去做一些心理辅导，来缓解孩子们的压力。往往这个时候一发生跟考生相关的新闻，很容易成为热点。所以在这个时候如果能抓住用户人群是一个不错的方法。如果能解决掉用户的心理需求，很容易让用户对其产生好感。一但产生了信任依赖那么市场还愁没有吗？</p>\n</blockquote>\n</blockquote>\n<p><br></p>\n<h5 id=\"百度知道指数分析\"><a href=\"#百度知道指数分析\" class=\"headerlink\" title=\"百度知道指数分析\"></a>百度知道指数分析</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-8c57a4763a594e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"百度知道.png\"></p>\n<p><strong>按照正常的月份统计来看，用户所关注的很多都是考前心理辅导，虽然是9月份的数据，但是热度仍然很高，说明用户有对这方面的需求。如何将用户的需求从搜索引擎，转化到移动端，将目标群体的视线转移到移动端。这就要求对用户市场有足够的了解。抓住需求点，去解决需求。</strong></p>\n","site":{"data":{}},"excerpt":"<h5 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h5><blockquote>\n<p>心理是人们最难以捉摸的,很多家长和孩子们之间都存在沟通问题。孩子心理问题又不好去跟家长沟通，家长的不理解。去找心理医生又得掏腰包，麻烦不说还要面子，而且这种问题往往不是很快就能解决的，所以心理类的app也想在这个互联网的大环境中跻身进来。</p>\n<p>目前线上相对来说进入市场成熟一点的有q心理，壹心理等，也包括还在往这个方向发展的其他的app。都想在心理市场吸引用户，打开市场。</p>\n</blockquote>","more":"<p><br><br>在上篇文章：<a href=\"http://www.jianshu.com/p/f880496a61d5\" target=\"_blank\" rel=\"external\">《在线教育app产品功能分析》</a> 中用了一个刚上线的app简单分析了一下产品的功能。主要就是针对青少年和学生家长心理进行指导的。<br>具体产品功能在上文已经分析过，这里只分析该行业的用户人群目标。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-df7288af846c8339.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"青少年心理.jpg\"></p>\n<blockquote>\n<p>这个项目定位很明确，针对的用户无非就两种，青少年And家长。围绕心理教育所进行的一系列教育引导的工作。<br>所以目标人群就划定在了青少年和家长之间。</p>\n</blockquote>\n<p><br></p>\n<h5 id=\"百度指数人群画像分析\"><a href=\"#百度指数人群画像分析\" class=\"headerlink\" title=\"百度指数人群画像分析\"></a>百度指数人群画像分析</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-28c256ed4218ab04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"人群画像.png\"><br>数据来源：<a href=\"https://index.baidu.com/?tpl=crowd&amp;type=0&amp;area=&amp;time=14&amp;word=%D0%C4%C0%ED%D6%B8%B5%BC%2C%D0%C4%C0%ED%BD%A1%BF%B5%2C%D0%C4%C0%ED%BD%CC%D3%FD%2C%D0%C4%C0%ED%D7%C9%D1%AF%2C%D0%C4%C0%ED%B8%A8%B5%BC#\" target=\"_blank\" rel=\"external\">百度指数搜索</a></p>\n<blockquote>\n<p>使用了5个关键字作为分析对象。整体年龄段在20-45之间的人数为主。</p>\n</blockquote>\n<p><br></p>\n<h5 id=\"百度舆情洞察分析\"><a href=\"#百度舆情洞察分析\" class=\"headerlink\" title=\"百度舆情洞察分析\"></a>百度舆情洞察分析</h5><p>按照平均生育年龄25来算，那么孩子的年龄在20岁以下，比较符合青少年和家长的人群。至于20-29岁为什么占比也高，有几个方面。从下面的表中可以得出：</p>\n<ul>\n<li>大学生。几乎每所大学都有一门心理课，这也是为什么关于这类搜索为什么文章成分占多数的原因。大家都有过的百度经历这里就不说了。</li>\n<li>刚毕业的。这种要占一部分，想从事心理工作的，包括培训之类的。而且刚毕业的学生社会经验少，一遇到问题就喜欢百度。</li>\n<li>已经工作的。这类一般都是工作已经稳定的，关注的两性话题，以及成年人的心理问题比较多。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-b27a78608e70e2f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480\" alt=\"20-29岁心理人群对比.png\"></p>\n<blockquote>\n<p>以上这几类人就被排除在用户人群之外了。所以就剩下了30-45岁的家长为多数。</p>\n</blockquote>\n<p><br></p>\n<h5 id=\"媒体指数\"><a href=\"#媒体指数\" class=\"headerlink\" title=\"媒体指数\"></a>媒体指数</h5><p>媒体指数就是为了追踪时事热点。根据社会环境产生的适时媒体。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-467e4ba361269496.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"媒体指数.png\"></p>\n<blockquote>\n<p>在5-6月份是中考，高考，两大考。</p>\n<blockquote>\n<p>指向的用户群体就是中学生，这时候学生的压力也是最大的时候。有些家长会带孩子去做一些心理辅导，来缓解孩子们的压力。往往这个时候一发生跟考生相关的新闻，很容易成为热点。所以在这个时候如果能抓住用户人群是一个不错的方法。如果能解决掉用户的心理需求，很容易让用户对其产生好感。一但产生了信任依赖那么市场还愁没有吗？</p>\n</blockquote>\n</blockquote>\n<p><br></p>\n<h5 id=\"百度知道指数分析\"><a href=\"#百度知道指数分析\" class=\"headerlink\" title=\"百度知道指数分析\"></a>百度知道指数分析</h5><p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-8c57a4763a594e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"百度知道.png\"></p>\n<p><strong>按照正常的月份统计来看，用户所关注的很多都是考前心理辅导，虽然是9月份的数据，但是热度仍然很高，说明用户有对这方面的需求。如何将用户的需求从搜索引擎，转化到移动端，将目标群体的视线转移到移动端。这就要求对用户市场有足够的了解。抓住需求点，去解决需求。</strong></p>"},{"title":"使用hexo+github搭建个人博客遇到过哪些坑","date":"2019-07-03T07:40:53.352Z","description":null,"toc":true,"_content":"\nListView布局包括checkbox(复选框)、img、title（商品名称）、type（分类）、两个Button（加减）、三个textview（原价，单价，数量），imgDelete（delete）\n<!-- more -->\n\n####一、\n\n> fatal: Could not read from remote repository.\n> 致命:无法读取远程存储库。\n> Please make sure you have the correct access rights and the repository exists.\n> 请确保你有正确的访问权限和存储库的存在。\n\n\n出现这种错误，有可能在配置_config.yml的时候，\n\n```\ndeploy:\n  type: git\n  repo: http://github.com/wapchief/wapchief.github.io.git\n  branch: master\n```\nrepo:设置了SSH方式连接，在没有ssh证书的情况下是连接失败的。解决方法是把ssh，修改为https方式连接。\n如果仍报错，把https改为http。\n\n####二、\n> ERROR Deployer not found: git\n\n未安装部署工具\n执行安装命令:\n\n```\nnpm install hexo-deployer-git --save\n```\n\n####三、\n> fatal: unable to stat 'node_modules/hexo-deployer-git/node_modules/hexo-fs/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/LICENSE': Filename too long\n\n这种情况一般是在执行\n\n```\ngit add .\ngit push\ngit commit\n```\n\n的时候会出现。\n报错提示名字超长，或者路径超范围。\n解决的方法有很多，选择升级git。\n或者配置git\n\n```\ngit config core.longpaths true\n```\n\n####四、\n\n> 相关工具问题\n\n因为使用hexo+github需要用到多个工具。有时候不确定是不是安装的问题可以通过下面的命令测试是否安装成功\n```\nnode -v\nnpm -v\ngit --version\nhexo -v\n```\n\n\n![](http://upload-images.jianshu.io/upload_images/2858691-f100c8bd2b0f428c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果都能正常显示版本信息，证明安装都没问题\n\n####五、\n> 页面不能正常显示，或者404\n\n检查根目录下的_config.yml文件是否配置正确，注意变量:后要加空格。\n部署的时候，是根据branch判断部署的目录。\n\n部署成功后，无需再使用git命令提交远程，已经自动在远程生成了页面文件。\n\n还有种可能是主题有问题，关于主题可以去官网找，也可以去github，搜hexo theme。一般只要是用来搭建博客的都会有使用教程。\n\n####六、\n\n> 关于分支和更换电脑问题\n\n由于安装hexo的时候只在本地生成。而部署的时候只是把public目录里的文件和相关配置上传到github。\n要想在远程也能管理，需要创建新的分支来存放源代码。\n\n或者通过其他第三方托管平台来托管源码，像coding，码云等都可以。\n在github上托管是公共的，如果需要安全也可以这个办法。\n\n如果使用github分支，则使用\n\n```\ngit fetch && git checkout hexo\n```\n在本地创建一个新的分支并推送到远程仓库，\n然后\n\n```\ngit add .\ngit commit -m '提交说明'\n//强制提交到hexo分支\ngit push -f origin hexo\n```\n\n注意：在其他设备上克隆的时候，建议克隆下来之后把隐藏文件.deploy_git文件删除，否则容易冲突。\n\n__如果有其他问题可以，留言给我。看到一定会回复。\n后面如果有新的问题，我也会在这篇文章中更新。__\n\n-----\n\n\n[使用hexo+github免费搭建个人博客网站超详细教程](http://www.jianshu.com/p/a39573555039)\n[Hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)","source":"_posts/20170709_4.md","raw":"---\ntitle: 使用hexo+github搭建个人博客遇到过哪些坑\ndate: 2017年7月9日18:15:08\ncategories: \ntags: [hexo,博客] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \ntoc: true\n\n---\n\nListView布局包括checkbox(复选框)、img、title（商品名称）、type（分类）、两个Button（加减）、三个textview（原价，单价，数量），imgDelete（delete）\n<!-- more -->\n\n####一、\n\n> fatal: Could not read from remote repository.\n> 致命:无法读取远程存储库。\n> Please make sure you have the correct access rights and the repository exists.\n> 请确保你有正确的访问权限和存储库的存在。\n\n\n出现这种错误，有可能在配置_config.yml的时候，\n\n```\ndeploy:\n  type: git\n  repo: http://github.com/wapchief/wapchief.github.io.git\n  branch: master\n```\nrepo:设置了SSH方式连接，在没有ssh证书的情况下是连接失败的。解决方法是把ssh，修改为https方式连接。\n如果仍报错，把https改为http。\n\n####二、\n> ERROR Deployer not found: git\n\n未安装部署工具\n执行安装命令:\n\n```\nnpm install hexo-deployer-git --save\n```\n\n####三、\n> fatal: unable to stat 'node_modules/hexo-deployer-git/node_modules/hexo-fs/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/LICENSE': Filename too long\n\n这种情况一般是在执行\n\n```\ngit add .\ngit push\ngit commit\n```\n\n的时候会出现。\n报错提示名字超长，或者路径超范围。\n解决的方法有很多，选择升级git。\n或者配置git\n\n```\ngit config core.longpaths true\n```\n\n####四、\n\n> 相关工具问题\n\n因为使用hexo+github需要用到多个工具。有时候不确定是不是安装的问题可以通过下面的命令测试是否安装成功\n```\nnode -v\nnpm -v\ngit --version\nhexo -v\n```\n\n\n![](http://upload-images.jianshu.io/upload_images/2858691-f100c8bd2b0f428c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果都能正常显示版本信息，证明安装都没问题\n\n####五、\n> 页面不能正常显示，或者404\n\n检查根目录下的_config.yml文件是否配置正确，注意变量:后要加空格。\n部署的时候，是根据branch判断部署的目录。\n\n部署成功后，无需再使用git命令提交远程，已经自动在远程生成了页面文件。\n\n还有种可能是主题有问题，关于主题可以去官网找，也可以去github，搜hexo theme。一般只要是用来搭建博客的都会有使用教程。\n\n####六、\n\n> 关于分支和更换电脑问题\n\n由于安装hexo的时候只在本地生成。而部署的时候只是把public目录里的文件和相关配置上传到github。\n要想在远程也能管理，需要创建新的分支来存放源代码。\n\n或者通过其他第三方托管平台来托管源码，像coding，码云等都可以。\n在github上托管是公共的，如果需要安全也可以这个办法。\n\n如果使用github分支，则使用\n\n```\ngit fetch && git checkout hexo\n```\n在本地创建一个新的分支并推送到远程仓库，\n然后\n\n```\ngit add .\ngit commit -m '提交说明'\n//强制提交到hexo分支\ngit push -f origin hexo\n```\n\n注意：在其他设备上克隆的时候，建议克隆下来之后把隐藏文件.deploy_git文件删除，否则容易冲突。\n\n__如果有其他问题可以，留言给我。看到一定会回复。\n后面如果有新的问题，我也会在这篇文章中更新。__\n\n-----\n\n\n[使用hexo+github免费搭建个人博客网站超详细教程](http://www.jianshu.com/p/a39573555039)\n[Hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)","slug":"20170709_4","published":1,"updated":"2019-07-03T07:40:53.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxmzrkxz0003glu2y2vxb5h9","content":"<p>ListView布局包括checkbox(复选框)、img、title（商品名称）、type（分类）、两个Button（加减）、三个textview（原价，单价，数量），imgDelete（delete）<br><a id=\"more\"></a></p>\n<p>####一、</p>\n<blockquote>\n<p>fatal: Could not read from remote repository.<br>致命:无法读取远程存储库。<br>Please make sure you have the correct access rights and the repository exists.<br>请确保你有正确的访问权限和存储库的存在。</p>\n</blockquote>\n<p>出现这种错误，有可能在配置_config.yml的时候，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: http://github.com/wapchief/wapchief.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>repo:设置了SSH方式连接，在没有ssh证书的情况下是连接失败的。解决方法是把ssh，修改为https方式连接。<br>如果仍报错，把https改为http。</p>\n<p>####二、</p>\n<blockquote>\n<p>ERROR Deployer not found: git</p>\n</blockquote>\n<p>未安装部署工具<br>执行安装命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>####三、</p>\n<blockquote>\n<p>fatal: unable to stat ‘node_modules/hexo-deployer-git/node_modules/hexo-fs/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/LICENSE’: Filename too long</p>\n</blockquote>\n<p>这种情况一般是在执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git push</div><div class=\"line\">git commit</div></pre></td></tr></table></figure>\n<p>的时候会出现。<br>报错提示名字超长，或者路径超范围。<br>解决的方法有很多，选择升级git。<br>或者配置git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config core.longpaths true</div></pre></td></tr></table></figure>\n<p>####四、</p>\n<blockquote>\n<p>相关工具问题</p>\n</blockquote>\n<p>因为使用hexo+github需要用到多个工具。有时候不确定是不是安装的问题可以通过下面的命令测试是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">npm -v</div><div class=\"line\">git --version</div><div class=\"line\">hexo -v</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-f100c8bd2b0f428c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>如果都能正常显示版本信息，证明安装都没问题</p>\n<p>####五、</p>\n<blockquote>\n<p>页面不能正常显示，或者404</p>\n</blockquote>\n<p>检查根目录下的_config.yml文件是否配置正确，注意变量:后要加空格。<br>部署的时候，是根据branch判断部署的目录。</p>\n<p>部署成功后，无需再使用git命令提交远程，已经自动在远程生成了页面文件。</p>\n<p>还有种可能是主题有问题，关于主题可以去官网找，也可以去github，搜hexo theme。一般只要是用来搭建博客的都会有使用教程。</p>\n<p>####六、</p>\n<blockquote>\n<p>关于分支和更换电脑问题</p>\n</blockquote>\n<p>由于安装hexo的时候只在本地生成。而部署的时候只是把public目录里的文件和相关配置上传到github。<br>要想在远程也能管理，需要创建新的分支来存放源代码。</p>\n<p>或者通过其他第三方托管平台来托管源码，像coding，码云等都可以。<br>在github上托管是公共的，如果需要安全也可以这个办法。</p>\n<p>如果使用github分支，则使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch &amp;&amp; git checkout hexo</div></pre></td></tr></table></figure>\n<p>在本地创建一个新的分支并推送到远程仓库，<br>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &apos;提交说明&apos;</div><div class=\"line\">//强制提交到hexo分支</div><div class=\"line\">git push -f origin hexo</div></pre></td></tr></table></figure>\n<p>注意：在其他设备上克隆的时候，建议克隆下来之后把隐藏文件.deploy_git文件删除，否则容易冲突。</p>\n<p><strong>如果有其他问题可以，留言给我。看到一定会回复。<br>后面如果有新的问题，我也会在这篇文章中更新。</strong></p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/a39573555039\" target=\"_blank\" rel=\"external\">使用hexo+github免费搭建个人博客网站超详细教程</a><br><a href=\"http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"external\">Hexo常见问题解决方案</a></p>\n","site":{"data":{}},"excerpt":"<p>ListView布局包括checkbox(复选框)、img、title（商品名称）、type（分类）、两个Button（加减）、三个textview（原价，单价，数量），imgDelete（delete）<br>","more":"</p>\n<p>####一、</p>\n<blockquote>\n<p>fatal: Could not read from remote repository.<br>致命:无法读取远程存储库。<br>Please make sure you have the correct access rights and the repository exists.<br>请确保你有正确的访问权限和存储库的存在。</p>\n</blockquote>\n<p>出现这种错误，有可能在配置_config.yml的时候，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: http://github.com/wapchief/wapchief.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>repo:设置了SSH方式连接，在没有ssh证书的情况下是连接失败的。解决方法是把ssh，修改为https方式连接。<br>如果仍报错，把https改为http。</p>\n<p>####二、</p>\n<blockquote>\n<p>ERROR Deployer not found: git</p>\n</blockquote>\n<p>未安装部署工具<br>执行安装命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>####三、</p>\n<blockquote>\n<p>fatal: unable to stat ‘node_modules/hexo-deployer-git/node_modules/hexo-fs/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/LICENSE’: Filename too long</p>\n</blockquote>\n<p>这种情况一般是在执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git push</div><div class=\"line\">git commit</div></pre></td></tr></table></figure>\n<p>的时候会出现。<br>报错提示名字超长，或者路径超范围。<br>解决的方法有很多，选择升级git。<br>或者配置git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config core.longpaths true</div></pre></td></tr></table></figure>\n<p>####四、</p>\n<blockquote>\n<p>相关工具问题</p>\n</blockquote>\n<p>因为使用hexo+github需要用到多个工具。有时候不确定是不是安装的问题可以通过下面的命令测试是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">npm -v</div><div class=\"line\">git --version</div><div class=\"line\">hexo -v</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-f100c8bd2b0f428c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>如果都能正常显示版本信息，证明安装都没问题</p>\n<p>####五、</p>\n<blockquote>\n<p>页面不能正常显示，或者404</p>\n</blockquote>\n<p>检查根目录下的_config.yml文件是否配置正确，注意变量:后要加空格。<br>部署的时候，是根据branch判断部署的目录。</p>\n<p>部署成功后，无需再使用git命令提交远程，已经自动在远程生成了页面文件。</p>\n<p>还有种可能是主题有问题，关于主题可以去官网找，也可以去github，搜hexo theme。一般只要是用来搭建博客的都会有使用教程。</p>\n<p>####六、</p>\n<blockquote>\n<p>关于分支和更换电脑问题</p>\n</blockquote>\n<p>由于安装hexo的时候只在本地生成。而部署的时候只是把public目录里的文件和相关配置上传到github。<br>要想在远程也能管理，需要创建新的分支来存放源代码。</p>\n<p>或者通过其他第三方托管平台来托管源码，像coding，码云等都可以。<br>在github上托管是公共的，如果需要安全也可以这个办法。</p>\n<p>如果使用github分支，则使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git fetch &amp;&amp; git checkout hexo</div></pre></td></tr></table></figure>\n<p>在本地创建一个新的分支并推送到远程仓库，<br>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &apos;提交说明&apos;</div><div class=\"line\">//强制提交到hexo分支</div><div class=\"line\">git push -f origin hexo</div></pre></td></tr></table></figure>\n<p>注意：在其他设备上克隆的时候，建议克隆下来之后把隐藏文件.deploy_git文件删除，否则容易冲突。</p>\n<p><strong>如果有其他问题可以，留言给我。看到一定会回复。<br>后面如果有新的问题，我也会在这篇文章中更新。</strong></p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/a39573555039\" target=\"_blank\" rel=\"external\">使用hexo+github免费搭建个人博客网站超详细教程</a><br><a href=\"http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"external\">Hexo常见问题解决方案</a></p>"},{"title":"使用hexo+github免费搭建个人博客网站超详细教程","date":"2019-07-03T07:40:53.348Z","description":null,"_content":"\n很多人都想搭建自己的博客，但是奈何技术有限，服务器部署，HTML，域名解析，等等，这一大堆东西可真有的折腾。\n\n<!-- more -->\n\n但是如果有这样一个机会，不需要太复杂的操作，不要服务器，不要域名，不用写html，你愿意去尝试吗？\n\n可以先看一下我自己的http://wapchief.com\n背景图有点大，3M多，可能加载比较慢，但是一进去能看到默认的有个背景，然后是默认背景慢慢被覆盖的情况。\n当时也是费了半天功夫才搭建好，在这篇文章中会详细介绍整个流程，尽量避免入坑吧，但要是真是你自己给自己挖坑那就没办法了。\n\n搭建的时候也是看着别人的教程一点点跟进，但是都有缺陷。\n比如分支的创建，和私人域名的解析，有这方面的教程但是都不是太完善，有些只是教你搭建但是后期没有考虑换电脑，换环境的情况。包括后期维护等等。\n\n这是我github上的源码，为了便于理解。本文相关部分也会结合源码进行讲解。有不清楚的地方欢迎提问，尽我能力给大家解决（毕竟我不是专业的）。\nhttps://github.com/wapchief/wapchief.github.io\n\n优点\n1、不需要服务器，github免费提供的托管服务\n2、不需要域名，github同样提供了一个.io的域名\n3、不用自己写xml、hexo提供了很多开源的博客模板。\n4、便于维护更新，换风格直接换模板就行。\n\n###进入正题###\n\n* #####安装相关工具#####\n1、安装Node.js\nhttps://nodejs.org/dist/v7.4.0/node-v7.4.0-x86.msi\nhttps://nodejs.org/dist/v7.4.0/node-v7.4.0-x64.msi\n选择需要的版本下载，分别是32位和64位。下载后安装一直默认下一步就行。\n2、安装Git\n[Git-2.11.0.3-32-bit.exe](https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-32-bit.exe)\n[Git-2.11.0.3-64-bit.exe](https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe)\n打开cmd命令行(win+r 输入cmd回车)分别执行\n```\nnode -v\nnpm -v\ngit --version\n```\n会得到相对应的版本信息（如图）\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-f73234814ab46cc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果都可以成功运行出现版本信息证明安装成功。\n这里写过一篇介绍git的文章，如果安装遇到问题可以去查看：\n[《必须要会的Git基本使用及常用命令操作》](http://www.jianshu.com/p/555e7a188312)\n3、安装Hexo\n必须按照步骤来，因为hexo需要使用node.js的npm命令。\n打开cmd命令行(win+r 输入cmd回车)分别执行\n```\nnpm install hexo-cli -g\n```\n等待自动安装完成后。输入\n```\nhexo -v\n```\n检查是否安装成功\n到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目了。\n\n* #####在github上创建并设置远程库\n注册登录略过，不会的请自行百度。\n**登录后点击“+”号，选择New repository，下一步\n在Repository name下面填写你要创建的地址，这个地址是就是你的域名，以github.io结尾。**例如填写``wapchief.github.io``以后就在地址栏直接输入``wapchief.github.io``就可以访问网站\n按照提示一步步完成创建。\n创建之后，点击setting设置远程库：\n**找到GitHub Pages点击change theme选个主题select theme设置模板**\n等待github pages创建完成，然后输入你创建的地址测试github pager是否创建成功。此时页面是空的没有任何东西。\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-54cfc97fad17d1b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面要做的就是使用hexo模板将源码放到github。\n\n* #####初始化Hexo\n创建一个文件夹用于存放hexo。然后右键该文件夹使用\n```\ngit bash here\n```\n命令就可以直接定位到当前目录。\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-43b222f68abcccb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后使用\n```\n npm install hexo --save\n```\n初始化hexo基础配置文件。初始化时间比较长，不用急，等完成后输入\n```\nhexo init\n```\n初始化hexo。这个命令和git 仓库命令相似。意思一样都是初始化。\n接着输入\n```\nnpm install\n```\n配置node。然后输入\n```\nhexo g\n```\n加载hexo基础html、css、js等文件。\n在这完成后等于已经在本地创建了一个网页，想查看的话，输入\n```\nhexo s\n```\n然后相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。\n(如图)\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-e34ee1a6b1d0da2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)在浏览器输入 http://localhost:4000/\n会看到这样的页面，证明本地hexo默认模板配置成功，\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-0370eac715c74d5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n到这一步如果将hexo放到github page，那么使用github.io访问的将是一个默认的页面。下面我们要把他diy成自己的博客，包括导入模板主题等。\n\n* ##### 安装主题\n关于主题大多都是以压缩包形式，可以去github上搜hexo theme，会出来很多，里面都有介绍。\n![hexo-theme主题](http://upload-images.jianshu.io/upload_images/2858691-88630831d8765f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)比如我们要用第一个。\n可以通过两种方法，这里我直接使用git命令完成，具体请参考next官方文档：http://theme-next.iissnan.com/getting-started.html\n继续在我们的本地hexo目录输入\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n![](http://upload-images.jianshu.io/upload_images/2858691-bab9702d25d151b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)等待下载完成。如果出现失败的提示，有可能是网络环境不好。重试即可。\nok，下载完主题后我们打开文件夹，找到themes文件夹，发现里面多了个\nnext\n![](http://upload-images.jianshu.io/upload_images/2858691-29b7149c7eca9f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这个就是我们下载下来下来的主题文件。\n接下来我们回到hexo根目录下用记事本打开_config.yml文件。\n![](http://upload-images.jianshu.io/upload_images/2858691-8153e968e0eb8bb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)把landscape修改成next就行了。\n我们再运行\n```\nhexo s\n```\n打开浏览器地址栏输http://localhost:4000/\n![](http://upload-images.jianshu.io/upload_images/2858691-6a3a3f605c548641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)现在是我们修改主题后的页面。\n\n* ##### 修改内容\n内容较多建议参考官方文档\nhttps://hexo.io/zh-cn/docs/configuration.html\n修改完之后，可以重新执行``hexo s``在浏览器查看效果。并确认无误，包括以后需要添加文章，或者更新主题等，都建议先在本地查看无误再远程部署。\n根_config.yml文件中\n```\n# Site\ntitle: 网站标题\nsubtitle: 副标题\ndescription: 个人签名\nauthor: 姓名\nlanguage: zh-Hans\ntimezone:\n```\n这里有几个坑需要注意一下：\n> 1、所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。\n2、language是设置语言。zh-Hans是中文。\n3、如果设置zh-Hans后仍出现乱码问题。需要更改文件的字符编码集为UTF-8,方法很多具体，就不详细介绍了。\n\n__注意同时要在，根_config.yml中配置自己的远程仓库地址__\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://github.com/wapchief/wapchief.github.io.git\n  branch: master\n```\n__这一步很关键，不要漏了。__\n\n* ##### 提交项目，部署\n继续在本目录命令行\n安装部署工具（方便以后更新）\n``npm install hexo-deployer-git -save``\n1、初始化本地仓库：\n``git init``\n2、连接远程仓库：\n如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。\n``git remote add origin https://github.com/wapchief/wapchief.github.io.git``\n3、发布hexo到github page\n``hexo clean && hexo g && hexo d``\n4、添加文件到本地仓库\n``git add ``\n5、提交声明\n``git commit -m '内容'``\n6、推送到远程仓库（github）\ngit push origin \n这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件。而默认的master用来部署更新项目,具体可以看我的github地址分支情况https://github.com/wapchief/wapchief.github.io\n创建并切换到新建分支：\n``git checkout -b hexo``\n将分支推送到远程仓库：\n``git push origin hexo``\n这时打开网站就能看到效果了。\n\n记得提交以后去github上把hexo分支设置默认，以后写文章等都要部署。\n文章在hexo目录下的\\source\\_posts文件夹中，是md格式，也就是Markdown格式。\n以后可以用以下命令部署。也就是第三步\n```\n//等于一次性执行了，清空、刷新、部署三个命令\nhexo clean && hexo g && hexo d\n```\n如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。\n* ##### 进阶-绑定域名\n域名可以自行去阿里云，景安等网站购买。一般都有系统提示步骤。\n拿到域名之后，进行解析，推荐使用[dnspod](https://www.dnspod.cn/)免费解析。\n具体使用方法：\n1、注册登录dnspod之后，添加域名，然后解析，添加两条记录\n![](http://upload-images.jianshu.io/upload_images/2858691-4a4c3fb7ad3b4155.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/2858691-b2b68da9436fdf11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2、登录你注册域名网站的管理后台，修改DNS解析地址为\n```\nf1g1ns1.dnspod.net\nf1g1ns2.dnspod.net\n```\n3、登录github，找到项目，设置setting，找到GitHub Pages\n![](http://upload-images.jianshu.io/upload_images/2858691-072104ac44cc3528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4、在master分支下的CNAME.MD文件写入注册的域名\n![](http://upload-images.jianshu.io/upload_images/2858691-c99e536f3c2186e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800)\n\n再次访问差不多就好了，如果延迟的话，可能解析立马不会生效。需要等会儿才能看到。\n\n---\n自己创建博客已经有些日子了，现在朋友想搭建博客，正好自己接触过，也整理一下，以后方便查看。所有的流程都在这里。\n对于有git、nodeJs基础的人来说搭建起来可能也就是十几分钟的事，但是对于没接触过的就要费很大工夫。如果遇到问题欢迎留言。","source":"_posts/1.md","raw":"---\ntitle: 使用hexo+github免费搭建个人博客网站超详细教程\ndate: 2017年4月25日13:15:08\ncategories: \ntags: [hexo,css,html] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \n\n---\n\n很多人都想搭建自己的博客，但是奈何技术有限，服务器部署，HTML，域名解析，等等，这一大堆东西可真有的折腾。\n\n<!-- more -->\n\n但是如果有这样一个机会，不需要太复杂的操作，不要服务器，不要域名，不用写html，你愿意去尝试吗？\n\n可以先看一下我自己的http://wapchief.com\n背景图有点大，3M多，可能加载比较慢，但是一进去能看到默认的有个背景，然后是默认背景慢慢被覆盖的情况。\n当时也是费了半天功夫才搭建好，在这篇文章中会详细介绍整个流程，尽量避免入坑吧，但要是真是你自己给自己挖坑那就没办法了。\n\n搭建的时候也是看着别人的教程一点点跟进，但是都有缺陷。\n比如分支的创建，和私人域名的解析，有这方面的教程但是都不是太完善，有些只是教你搭建但是后期没有考虑换电脑，换环境的情况。包括后期维护等等。\n\n这是我github上的源码，为了便于理解。本文相关部分也会结合源码进行讲解。有不清楚的地方欢迎提问，尽我能力给大家解决（毕竟我不是专业的）。\nhttps://github.com/wapchief/wapchief.github.io\n\n优点\n1、不需要服务器，github免费提供的托管服务\n2、不需要域名，github同样提供了一个.io的域名\n3、不用自己写xml、hexo提供了很多开源的博客模板。\n4、便于维护更新，换风格直接换模板就行。\n\n###进入正题###\n\n* #####安装相关工具#####\n1、安装Node.js\nhttps://nodejs.org/dist/v7.4.0/node-v7.4.0-x86.msi\nhttps://nodejs.org/dist/v7.4.0/node-v7.4.0-x64.msi\n选择需要的版本下载，分别是32位和64位。下载后安装一直默认下一步就行。\n2、安装Git\n[Git-2.11.0.3-32-bit.exe](https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-32-bit.exe)\n[Git-2.11.0.3-64-bit.exe](https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe)\n打开cmd命令行(win+r 输入cmd回车)分别执行\n```\nnode -v\nnpm -v\ngit --version\n```\n会得到相对应的版本信息（如图）\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-f73234814ab46cc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果都可以成功运行出现版本信息证明安装成功。\n这里写过一篇介绍git的文章，如果安装遇到问题可以去查看：\n[《必须要会的Git基本使用及常用命令操作》](http://www.jianshu.com/p/555e7a188312)\n3、安装Hexo\n必须按照步骤来，因为hexo需要使用node.js的npm命令。\n打开cmd命令行(win+r 输入cmd回车)分别执行\n```\nnpm install hexo-cli -g\n```\n等待自动安装完成后。输入\n```\nhexo -v\n```\n检查是否安装成功\n到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目了。\n\n* #####在github上创建并设置远程库\n注册登录略过，不会的请自行百度。\n**登录后点击“+”号，选择New repository，下一步\n在Repository name下面填写你要创建的地址，这个地址是就是你的域名，以github.io结尾。**例如填写``wapchief.github.io``以后就在地址栏直接输入``wapchief.github.io``就可以访问网站\n按照提示一步步完成创建。\n创建之后，点击setting设置远程库：\n**找到GitHub Pages点击change theme选个主题select theme设置模板**\n等待github pages创建完成，然后输入你创建的地址测试github pager是否创建成功。此时页面是空的没有任何东西。\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-54cfc97fad17d1b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下面要做的就是使用hexo模板将源码放到github。\n\n* #####初始化Hexo\n创建一个文件夹用于存放hexo。然后右键该文件夹使用\n```\ngit bash here\n```\n命令就可以直接定位到当前目录。\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-43b222f68abcccb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后使用\n```\n npm install hexo --save\n```\n初始化hexo基础配置文件。初始化时间比较长，不用急，等完成后输入\n```\nhexo init\n```\n初始化hexo。这个命令和git 仓库命令相似。意思一样都是初始化。\n接着输入\n```\nnpm install\n```\n配置node。然后输入\n```\nhexo g\n```\n加载hexo基础html、css、js等文件。\n在这完成后等于已经在本地创建了一个网页，想查看的话，输入\n```\nhexo s\n```\n然后相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。\n(如图)\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-e34ee1a6b1d0da2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)在浏览器输入 http://localhost:4000/\n会看到这样的页面，证明本地hexo默认模板配置成功，\n![wapchief.com](http://upload-images.jianshu.io/upload_images/2858691-0370eac715c74d5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n到这一步如果将hexo放到github page，那么使用github.io访问的将是一个默认的页面。下面我们要把他diy成自己的博客，包括导入模板主题等。\n\n* ##### 安装主题\n关于主题大多都是以压缩包形式，可以去github上搜hexo theme，会出来很多，里面都有介绍。\n![hexo-theme主题](http://upload-images.jianshu.io/upload_images/2858691-88630831d8765f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)比如我们要用第一个。\n可以通过两种方法，这里我直接使用git命令完成，具体请参考next官方文档：http://theme-next.iissnan.com/getting-started.html\n继续在我们的本地hexo目录输入\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n![](http://upload-images.jianshu.io/upload_images/2858691-bab9702d25d151b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)等待下载完成。如果出现失败的提示，有可能是网络环境不好。重试即可。\nok，下载完主题后我们打开文件夹，找到themes文件夹，发现里面多了个\nnext\n![](http://upload-images.jianshu.io/upload_images/2858691-29b7149c7eca9f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这个就是我们下载下来下来的主题文件。\n接下来我们回到hexo根目录下用记事本打开_config.yml文件。\n![](http://upload-images.jianshu.io/upload_images/2858691-8153e968e0eb8bb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)把landscape修改成next就行了。\n我们再运行\n```\nhexo s\n```\n打开浏览器地址栏输http://localhost:4000/\n![](http://upload-images.jianshu.io/upload_images/2858691-6a3a3f605c548641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)现在是我们修改主题后的页面。\n\n* ##### 修改内容\n内容较多建议参考官方文档\nhttps://hexo.io/zh-cn/docs/configuration.html\n修改完之后，可以重新执行``hexo s``在浏览器查看效果。并确认无误，包括以后需要添加文章，或者更新主题等，都建议先在本地查看无误再远程部署。\n根_config.yml文件中\n```\n# Site\ntitle: 网站标题\nsubtitle: 副标题\ndescription: 个人签名\nauthor: 姓名\nlanguage: zh-Hans\ntimezone:\n```\n这里有几个坑需要注意一下：\n> 1、所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。\n2、language是设置语言。zh-Hans是中文。\n3、如果设置zh-Hans后仍出现乱码问题。需要更改文件的字符编码集为UTF-8,方法很多具体，就不详细介绍了。\n\n__注意同时要在，根_config.yml中配置自己的远程仓库地址__\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://github.com/wapchief/wapchief.github.io.git\n  branch: master\n```\n__这一步很关键，不要漏了。__\n\n* ##### 提交项目，部署\n继续在本目录命令行\n安装部署工具（方便以后更新）\n``npm install hexo-deployer-git -save``\n1、初始化本地仓库：\n``git init``\n2、连接远程仓库：\n如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。\n``git remote add origin https://github.com/wapchief/wapchief.github.io.git``\n3、发布hexo到github page\n``hexo clean && hexo g && hexo d``\n4、添加文件到本地仓库\n``git add ``\n5、提交声明\n``git commit -m '内容'``\n6、推送到远程仓库（github）\ngit push origin \n这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件。而默认的master用来部署更新项目,具体可以看我的github地址分支情况https://github.com/wapchief/wapchief.github.io\n创建并切换到新建分支：\n``git checkout -b hexo``\n将分支推送到远程仓库：\n``git push origin hexo``\n这时打开网站就能看到效果了。\n\n记得提交以后去github上把hexo分支设置默认，以后写文章等都要部署。\n文章在hexo目录下的\\source\\_posts文件夹中，是md格式，也就是Markdown格式。\n以后可以用以下命令部署。也就是第三步\n```\n//等于一次性执行了，清空、刷新、部署三个命令\nhexo clean && hexo g && hexo d\n```\n如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。\n* ##### 进阶-绑定域名\n域名可以自行去阿里云，景安等网站购买。一般都有系统提示步骤。\n拿到域名之后，进行解析，推荐使用[dnspod](https://www.dnspod.cn/)免费解析。\n具体使用方法：\n1、注册登录dnspod之后，添加域名，然后解析，添加两条记录\n![](http://upload-images.jianshu.io/upload_images/2858691-4a4c3fb7ad3b4155.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](http://upload-images.jianshu.io/upload_images/2858691-b2b68da9436fdf11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n2、登录你注册域名网站的管理后台，修改DNS解析地址为\n```\nf1g1ns1.dnspod.net\nf1g1ns2.dnspod.net\n```\n3、登录github，找到项目，设置setting，找到GitHub Pages\n![](http://upload-images.jianshu.io/upload_images/2858691-072104ac44cc3528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4、在master分支下的CNAME.MD文件写入注册的域名\n![](http://upload-images.jianshu.io/upload_images/2858691-c99e536f3c2186e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800)\n\n再次访问差不多就好了，如果延迟的话，可能解析立马不会生效。需要等会儿才能看到。\n\n---\n自己创建博客已经有些日子了，现在朋友想搭建博客，正好自己接触过，也整理一下，以后方便查看。所有的流程都在这里。\n对于有git、nodeJs基础的人来说搭建起来可能也就是十几分钟的事，但是对于没接触过的就要费很大工夫。如果遇到问题欢迎留言。","slug":"1","published":1,"updated":"2019-07-03T07:40:53.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxmzrkyx000dglu27s5ss5s7","content":"<p>很多人都想搭建自己的博客，但是奈何技术有限，服务器部署，HTML，域名解析，等等，这一大堆东西可真有的折腾。</p>\n<a id=\"more\"></a>\n<p>但是如果有这样一个机会，不需要太复杂的操作，不要服务器，不要域名，不用写html，你愿意去尝试吗？</p>\n<p>可以先看一下我自己的<a href=\"http://wapchief.com\" target=\"_blank\" rel=\"external\">http://wapchief.com</a><br>背景图有点大，3M多，可能加载比较慢，但是一进去能看到默认的有个背景，然后是默认背景慢慢被覆盖的情况。<br>当时也是费了半天功夫才搭建好，在这篇文章中会详细介绍整个流程，尽量避免入坑吧，但要是真是你自己给自己挖坑那就没办法了。</p>\n<p>搭建的时候也是看着别人的教程一点点跟进，但是都有缺陷。<br>比如分支的创建，和私人域名的解析，有这方面的教程但是都不是太完善，有些只是教你搭建但是后期没有考虑换电脑，换环境的情况。包括后期维护等等。</p>\n<p>这是我github上的源码，为了便于理解。本文相关部分也会结合源码进行讲解。有不清楚的地方欢迎提问，尽我能力给大家解决（毕竟我不是专业的）。<br><a href=\"https://github.com/wapchief/wapchief.github.io\" target=\"_blank\" rel=\"external\">https://github.com/wapchief/wapchief.github.io</a></p>\n<p>优点<br>1、不需要服务器，github免费提供的托管服务<br>2、不需要域名，github同样提供了一个.io的域名<br>3、不用自己写xml、hexo提供了很多开源的博客模板。<br>4、便于维护更新，换风格直接换模板就行。</p>\n<p>###进入正题###</p>\n<ul>\n<li>#####安装相关工具#####<br>1、安装Node.js<br><a href=\"https://nodejs.org/dist/v7.4.0/node-v7.4.0-x86.msi\" target=\"_blank\" rel=\"external\">https://nodejs.org/dist/v7.4.0/node-v7.4.0-x86.msi</a><br><a href=\"https://nodejs.org/dist/v7.4.0/node-v7.4.0-x64.msi\" target=\"_blank\" rel=\"external\">https://nodejs.org/dist/v7.4.0/node-v7.4.0-x64.msi</a><br>选择需要的版本下载，分别是32位和64位。下载后安装一直默认下一步就行。<br>2、安装Git<br><a href=\"https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-32-bit.exe\" target=\"_blank\" rel=\"external\">Git-2.11.0.3-32-bit.exe</a><br><a href=\"https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe\" target=\"_blank\" rel=\"external\">Git-2.11.0.3-64-bit.exe</a><br>打开cmd命令行(win+r 输入cmd回车)分别执行<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">npm -v</div><div class=\"line\">git --version</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>会得到相对应的版本信息（如图）<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-f73234814ab46cc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\"><br>如果都可以成功运行出现版本信息证明安装成功。<br>这里写过一篇介绍git的文章，如果安装遇到问题可以去查看：<br><a href=\"http://www.jianshu.com/p/555e7a188312\" target=\"_blank\" rel=\"external\">《必须要会的Git基本使用及常用命令操作》</a><br>3、安装Hexo<br>必须按照步骤来，因为hexo需要使用node.js的npm命令。<br>打开cmd命令行(win+r 输入cmd回车)分别执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>\n<p>等待自动安装完成后。输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure></p>\n<p>检查是否安装成功<br>到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目了。</p>\n<ul>\n<li><p>#####在github上创建并设置远程库<br>注册登录略过，不会的请自行百度。<br><strong>登录后点击“+”号，选择New repository，下一步<br>在Repository name下面填写你要创建的地址，这个地址是就是你的域名，以github.io结尾。</strong>例如填写<code>wapchief.github.io</code>以后就在地址栏直接输入<code>wapchief.github.io</code>就可以访问网站<br>按照提示一步步完成创建。<br>创建之后，点击setting设置远程库：<br><strong>找到GitHub Pages点击change theme选个主题select theme设置模板</strong><br>等待github pages创建完成，然后输入你创建的地址测试github pager是否创建成功。此时页面是空的没有任何东西。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-54cfc97fad17d1b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\"><br>下面要做的就是使用hexo模板将源码放到github。</p>\n</li>\n<li><p>#####初始化Hexo<br>创建一个文件夹用于存放hexo。然后右键该文件夹使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git bash here</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>命令就可以直接定位到当前目录。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-43b222f68abcccb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\"><br>然后使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --save</div></pre></td></tr></table></figure></p>\n<p>初始化hexo基础配置文件。初始化时间比较长，不用急，等完成后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure></p>\n<p>初始化hexo。这个命令和git 仓库命令相似。意思一样都是初始化。<br>接着输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>配置node。然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure></p>\n<p>加载hexo基础html、css、js等文件。<br>在这完成后等于已经在本地创建了一个网页，想查看的话，输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>然后相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。<br>(如图)<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-e34ee1a6b1d0da2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\">在浏览器输入 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br>会看到这样的页面，证明本地hexo默认模板配置成功，<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-0370eac715c74d5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\"><br>到这一步如果将hexo放到github page，那么使用github.io访问的将是一个默认的页面。下面我们要把他diy成自己的博客，包括导入模板主题等。</p>\n<ul>\n<li><h5 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h5>关于主题大多都是以压缩包形式，可以去github上搜hexo theme，会出来很多，里面都有介绍。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-88630831d8765f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hexo-theme主题\">比如我们要用第一个。<br>可以通过两种方法，这里我直接使用git命令完成，具体请参考next官方文档：<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">http://theme-next.iissnan.com/getting-started.html</a><br>继续在我们的本地hexo目录输入<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-bab9702d25d151b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">等待下载完成。如果出现失败的提示，有可能是网络环境不好。重试即可。<br>ok，下载完主题后我们打开文件夹，找到themes文件夹，发现里面多了个<br>next<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-29b7149c7eca9f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">这个就是我们下载下来下来的主题文件。<br>接下来我们回到hexo根目录下用记事本打开_config.yml文件。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-8153e968e0eb8bb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">把landscape修改成next就行了。<br>我们再运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>打开浏览器地址栏输<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-6a3a3f605c548641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">现在是我们修改主题后的页面。</p>\n<ul>\n<li><h5 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h5>内容较多建议参考官方文档<br><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/configuration.html</a><br>修改完之后，可以重新执行<code>hexo s</code>在浏览器查看效果。并确认无误，包括以后需要添加文章，或者更新主题等，都建议先在本地查看无误再远程部署。<br>根_config.yml文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Site</div><div class=\"line\">title: 网站标题</div><div class=\"line\">subtitle: 副标题</div><div class=\"line\">description: 个人签名</div><div class=\"line\">author: 姓名</div><div class=\"line\">language: zh-Hans</div><div class=\"line\">timezone:</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里有几个坑需要注意一下：</p>\n<blockquote>\n<p>1、所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。<br>2、language是设置语言。zh-Hans是中文。<br>3、如果设置zh-Hans后仍出现乱码问题。需要更改文件的字符编码集为UTF-8,方法很多具体，就不详细介绍了。</p>\n</blockquote>\n<p><strong>注意同时要在，根_config.yml中配置自己的远程仓库地址</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://github.com/wapchief/wapchief.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p><strong>这一步很关键，不要漏了。</strong></p>\n<ul>\n<li><h5 id=\"提交项目，部署\"><a href=\"#提交项目，部署\" class=\"headerlink\" title=\"提交项目，部署\"></a>提交项目，部署</h5>继续在本目录命令行<br>安装部署工具（方便以后更新）<br><code>npm install hexo-deployer-git -save</code><br>1、初始化本地仓库：<br><code>git init</code><br>2、连接远程仓库：<br>如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。<br><code>git remote add origin https://github.com/wapchief/wapchief.github.io.git</code><br>3、发布hexo到github page<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code><br>4、添加文件到本地仓库<br><code>git add</code><br>5、提交声明<br><code>git commit -m &#39;内容&#39;</code><br>6、推送到远程仓库（github）<br>git push origin<br>这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件。而默认的master用来部署更新项目,具体可以看我的github地址分支情况<a href=\"https://github.com/wapchief/wapchief.github.io\" target=\"_blank\" rel=\"external\">https://github.com/wapchief/wapchief.github.io</a><br>创建并切换到新建分支：<br><code>git checkout -b hexo</code><br>将分支推送到远程仓库：<br><code>git push origin hexo</code><br>这时打开网站就能看到效果了。</li>\n</ul>\n<p>记得提交以后去github上把hexo分支设置默认，以后写文章等都要部署。<br>文章在hexo目录下的\\source_posts文件夹中，是md格式，也就是Markdown格式。<br>以后可以用以下命令部署。也就是第三步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//等于一次性执行了，清空、刷新、部署三个命令</div><div class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure></p>\n<p>如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。</p>\n<ul>\n<li><h5 id=\"进阶-绑定域名\"><a href=\"#进阶-绑定域名\" class=\"headerlink\" title=\"进阶-绑定域名\"></a>进阶-绑定域名</h5>域名可以自行去阿里云，景安等网站购买。一般都有系统提示步骤。<br>拿到域名之后，进行解析，推荐使用<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"external\">dnspod</a>免费解析。<br>具体使用方法：<br>1、注册登录dnspod之后，添加域名，然后解析，添加两条记录<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-4a4c3fb7ad3b4155.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-b2b68da9436fdf11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>2、登录你注册域名网站的管理后台，修改DNS解析地址为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1g1ns1.dnspod.net</div><div class=\"line\">f1g1ns2.dnspod.net</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3、登录github，找到项目，设置setting，找到GitHub Pages<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-072104ac44cc3528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>4、在master分支下的CNAME.MD文件写入注册的域名<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-c99e536f3c2186e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800\" alt=\"\"></p>\n<p>再次访问差不多就好了，如果延迟的话，可能解析立马不会生效。需要等会儿才能看到。</p>\n<hr>\n<p>自己创建博客已经有些日子了，现在朋友想搭建博客，正好自己接触过，也整理一下，以后方便查看。所有的流程都在这里。<br>对于有git、nodeJs基础的人来说搭建起来可能也就是十几分钟的事，但是对于没接触过的就要费很大工夫。如果遇到问题欢迎留言。</p>\n","site":{"data":{}},"excerpt":"<p>很多人都想搭建自己的博客，但是奈何技术有限，服务器部署，HTML，域名解析，等等，这一大堆东西可真有的折腾。</p>","more":"<p>但是如果有这样一个机会，不需要太复杂的操作，不要服务器，不要域名，不用写html，你愿意去尝试吗？</p>\n<p>可以先看一下我自己的<a href=\"http://wapchief.com\" target=\"_blank\" rel=\"external\">http://wapchief.com</a><br>背景图有点大，3M多，可能加载比较慢，但是一进去能看到默认的有个背景，然后是默认背景慢慢被覆盖的情况。<br>当时也是费了半天功夫才搭建好，在这篇文章中会详细介绍整个流程，尽量避免入坑吧，但要是真是你自己给自己挖坑那就没办法了。</p>\n<p>搭建的时候也是看着别人的教程一点点跟进，但是都有缺陷。<br>比如分支的创建，和私人域名的解析，有这方面的教程但是都不是太完善，有些只是教你搭建但是后期没有考虑换电脑，换环境的情况。包括后期维护等等。</p>\n<p>这是我github上的源码，为了便于理解。本文相关部分也会结合源码进行讲解。有不清楚的地方欢迎提问，尽我能力给大家解决（毕竟我不是专业的）。<br><a href=\"https://github.com/wapchief/wapchief.github.io\" target=\"_blank\" rel=\"external\">https://github.com/wapchief/wapchief.github.io</a></p>\n<p>优点<br>1、不需要服务器，github免费提供的托管服务<br>2、不需要域名，github同样提供了一个.io的域名<br>3、不用自己写xml、hexo提供了很多开源的博客模板。<br>4、便于维护更新，换风格直接换模板就行。</p>\n<p>###进入正题###</p>\n<ul>\n<li>#####安装相关工具#####<br>1、安装Node.js<br><a href=\"https://nodejs.org/dist/v7.4.0/node-v7.4.0-x86.msi\" target=\"_blank\" rel=\"external\">https://nodejs.org/dist/v7.4.0/node-v7.4.0-x86.msi</a><br><a href=\"https://nodejs.org/dist/v7.4.0/node-v7.4.0-x64.msi\" target=\"_blank\" rel=\"external\">https://nodejs.org/dist/v7.4.0/node-v7.4.0-x64.msi</a><br>选择需要的版本下载，分别是32位和64位。下载后安装一直默认下一步就行。<br>2、安装Git<br><a href=\"https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-32-bit.exe\" target=\"_blank\" rel=\"external\">Git-2.11.0.3-32-bit.exe</a><br><a href=\"https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe\" target=\"_blank\" rel=\"external\">Git-2.11.0.3-64-bit.exe</a><br>打开cmd命令行(win+r 输入cmd回车)分别执行<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">npm -v</div><div class=\"line\">git --version</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>会得到相对应的版本信息（如图）<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-f73234814ab46cc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\"><br>如果都可以成功运行出现版本信息证明安装成功。<br>这里写过一篇介绍git的文章，如果安装遇到问题可以去查看：<br><a href=\"http://www.jianshu.com/p/555e7a188312\" target=\"_blank\" rel=\"external\">《必须要会的Git基本使用及常用命令操作》</a><br>3、安装Hexo<br>必须按照步骤来，因为hexo需要使用node.js的npm命令。<br>打开cmd命令行(win+r 输入cmd回车)分别执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>\n<p>等待自动安装完成后。输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure></p>\n<p>检查是否安装成功<br>到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目了。</p>\n<ul>\n<li><p>#####在github上创建并设置远程库<br>注册登录略过，不会的请自行百度。<br><strong>登录后点击“+”号，选择New repository，下一步<br>在Repository name下面填写你要创建的地址，这个地址是就是你的域名，以github.io结尾。</strong>例如填写<code>wapchief.github.io</code>以后就在地址栏直接输入<code>wapchief.github.io</code>就可以访问网站<br>按照提示一步步完成创建。<br>创建之后，点击setting设置远程库：<br><strong>找到GitHub Pages点击change theme选个主题select theme设置模板</strong><br>等待github pages创建完成，然后输入你创建的地址测试github pager是否创建成功。此时页面是空的没有任何东西。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-54cfc97fad17d1b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\"><br>下面要做的就是使用hexo模板将源码放到github。</p>\n</li>\n<li><p>#####初始化Hexo<br>创建一个文件夹用于存放hexo。然后右键该文件夹使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git bash here</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>命令就可以直接定位到当前目录。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-43b222f68abcccb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\"><br>然后使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --save</div></pre></td></tr></table></figure></p>\n<p>初始化hexo基础配置文件。初始化时间比较长，不用急，等完成后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure></p>\n<p>初始化hexo。这个命令和git 仓库命令相似。意思一样都是初始化。<br>接着输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>配置node。然后输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure></p>\n<p>加载hexo基础html、css、js等文件。<br>在这完成后等于已经在本地创建了一个网页，想查看的话，输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>然后相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。<br>(如图)<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-e34ee1a6b1d0da2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\">在浏览器输入 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br>会看到这样的页面，证明本地hexo默认模板配置成功，<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-0370eac715c74d5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wapchief.com\"><br>到这一步如果将hexo放到github page，那么使用github.io访问的将是一个默认的页面。下面我们要把他diy成自己的博客，包括导入模板主题等。</p>\n<ul>\n<li><h5 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h5>关于主题大多都是以压缩包形式，可以去github上搜hexo theme，会出来很多，里面都有介绍。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-88630831d8765f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hexo-theme主题\">比如我们要用第一个。<br>可以通过两种方法，这里我直接使用git命令完成，具体请参考next官方文档：<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">http://theme-next.iissnan.com/getting-started.html</a><br>继续在我们的本地hexo目录输入<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-bab9702d25d151b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">等待下载完成。如果出现失败的提示，有可能是网络环境不好。重试即可。<br>ok，下载完主题后我们打开文件夹，找到themes文件夹，发现里面多了个<br>next<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-29b7149c7eca9f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">这个就是我们下载下来下来的主题文件。<br>接下来我们回到hexo根目录下用记事本打开_config.yml文件。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-8153e968e0eb8bb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">把landscape修改成next就行了。<br>我们再运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>打开浏览器地址栏输<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-6a3a3f605c548641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">现在是我们修改主题后的页面。</p>\n<ul>\n<li><h5 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h5>内容较多建议参考官方文档<br><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/configuration.html</a><br>修改完之后，可以重新执行<code>hexo s</code>在浏览器查看效果。并确认无误，包括以后需要添加文章，或者更新主题等，都建议先在本地查看无误再远程部署。<br>根_config.yml文件中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Site</div><div class=\"line\">title: 网站标题</div><div class=\"line\">subtitle: 副标题</div><div class=\"line\">description: 个人签名</div><div class=\"line\">author: 姓名</div><div class=\"line\">language: zh-Hans</div><div class=\"line\">timezone:</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里有几个坑需要注意一下：</p>\n<blockquote>\n<p>1、所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。<br>2、language是设置语言。zh-Hans是中文。<br>3、如果设置zh-Hans后仍出现乱码问题。需要更改文件的字符编码集为UTF-8,方法很多具体，就不详细介绍了。</p>\n</blockquote>\n<p><strong>注意同时要在，根_config.yml中配置自己的远程仓库地址</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://github.com/wapchief/wapchief.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p><strong>这一步很关键，不要漏了。</strong></p>\n<ul>\n<li><h5 id=\"提交项目，部署\"><a href=\"#提交项目，部署\" class=\"headerlink\" title=\"提交项目，部署\"></a>提交项目，部署</h5>继续在本目录命令行<br>安装部署工具（方便以后更新）<br><code>npm install hexo-deployer-git -save</code><br>1、初始化本地仓库：<br><code>git init</code><br>2、连接远程仓库：<br>如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。<br><code>git remote add origin https://github.com/wapchief/wapchief.github.io.git</code><br>3、发布hexo到github page<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code><br>4、添加文件到本地仓库<br><code>git add</code><br>5、提交声明<br><code>git commit -m &#39;内容&#39;</code><br>6、推送到远程仓库（github）<br>git push origin<br>这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件。而默认的master用来部署更新项目,具体可以看我的github地址分支情况<a href=\"https://github.com/wapchief/wapchief.github.io\" target=\"_blank\" rel=\"external\">https://github.com/wapchief/wapchief.github.io</a><br>创建并切换到新建分支：<br><code>git checkout -b hexo</code><br>将分支推送到远程仓库：<br><code>git push origin hexo</code><br>这时打开网站就能看到效果了。</li>\n</ul>\n<p>记得提交以后去github上把hexo分支设置默认，以后写文章等都要部署。<br>文章在hexo目录下的\\source_posts文件夹中，是md格式，也就是Markdown格式。<br>以后可以用以下命令部署。也就是第三步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//等于一次性执行了，清空、刷新、部署三个命令</div><div class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure></p>\n<p>如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。</p>\n<ul>\n<li><h5 id=\"进阶-绑定域名\"><a href=\"#进阶-绑定域名\" class=\"headerlink\" title=\"进阶-绑定域名\"></a>进阶-绑定域名</h5>域名可以自行去阿里云，景安等网站购买。一般都有系统提示步骤。<br>拿到域名之后，进行解析，推荐使用<a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"external\">dnspod</a>免费解析。<br>具体使用方法：<br>1、注册登录dnspod之后，添加域名，然后解析，添加两条记录<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-4a4c3fb7ad3b4155.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-b2b68da9436fdf11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>2、登录你注册域名网站的管理后台，修改DNS解析地址为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1g1ns1.dnspod.net</div><div class=\"line\">f1g1ns2.dnspod.net</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3、登录github，找到项目，设置setting，找到GitHub Pages<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-072104ac44cc3528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>4、在master分支下的CNAME.MD文件写入注册的域名<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-c99e536f3c2186e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800\" alt=\"\"></p>\n<p>再次访问差不多就好了，如果延迟的话，可能解析立马不会生效。需要等会儿才能看到。</p>\n<hr>\n<p>自己创建博客已经有些日子了，现在朋友想搭建博客，正好自己接触过，也整理一下，以后方便查看。所有的流程都在这里。<br>对于有git、nodeJs基础的人来说搭建起来可能也就是十几分钟的事，但是对于没接触过的就要费很大工夫。如果遇到问题欢迎留言。</p>"},{"title":"使用Kotlin仿的简书个人主页，只需一个控件","date":"2019-07-03T07:40:53.350Z","description":null,"_content":"\n界面做的比较丑，但是基本上实现了功能。\n为了学习最近比较火的kotlin语言，就试着写了个demo。\n\n参考上篇文章[仿掌上英雄联盟](http://www.jianshu.com/p/5dc19d15c096)的效果。\n\n<!-- more -->\n\n![效果图](http://upload-images.jianshu.io/upload_images/2858691-238af768dfccc201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n> ##### 一、开始前的准备\n\n* __导入kotlin开发环境：__\n 在androidStudio3.0版本默认已经集成好了。直接在创建项目的时候勾选include Kotlin support，会自动帮我们创建好kotlin语言的项目。不勾选就是java。\n![image.png](http://upload-images.jianshu.io/upload_images/2858691-aa562024569678e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* __如果是手动集成kotlin：__\n需要两个地方进行配置\n1、根目录下的  project - build.gradle\n```\nbuildscript {\n    ext.kotlin_version = '1.1.2-4'\n....//省略部分代码\n   }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n```\n2、model - build.gradle\n```\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\n```\n```\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n .....//省略部分代码\n}\n```\n\n__需要注意的是如果是自动集成的默认没有``apply plugin: 'kotlin-android-extensions'``\n该方法需要手动添加，关于用处后面再说。__\n\n> ##### 二、加入控件，创建布局\n\n前面说的一个控件就是指scrollablelayout，在GitHub已经开源很久了。\n已经提供好了折叠所需要的布局。\n\n```\n compile 'com.github.cpoopc:scrollablelayoutlib:1.0.1'\n```\nScrollable需要三个子view，来分别展示：折叠的部分、标题部分、滚动的部分。\n\n![仿简书个人中心](http://upload-images.jianshu.io/upload_images/2858691-7db3dbdd40ea5089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480)\n\n所以布局中大体就是一个标题栏+一个ScrollacleLayout\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.wapchief.kotlin.MainActivity\">\n    <!--标题栏-->\n    <include layout=\"@layout/action_bar\"/>\n    <!--包裹三个View-->\n    <com.cpoopc.scrollablelayoutlib.ScrollableLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@android:color/white\"\n        android:orientation=\"vertical\">\n        <!--header-->\n        <include layout=\"@layout/main_header\" />\n        <!--tab-->\n        <include layout=\"@layout/main_tablayout\" />\n        <!--footer-->\n        <android.support.v4.view.ViewPager\n            android:id=\"@+id/vp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" />\n    </com.cpoopc.scrollablelayoutlib.ScrollableLayout>\n\n</LinearLayout>\n\n```\n\n这里的布局跟java的一样，按正常的方式写就好。主要是在activity中的变化。\n\n> ##### 三、在activity中实例化\n\n* __实例化控件：__\n和java不同的是kotlin不需要通过findviewby来获取控件。java中如果存在多个视图文件布局就要创建多个view，比如这里我用的都是lnclude，如果是java中就要创建四个view对象。再分别实例化。\n在kotlin中提供了更加简洁的方法  : 直接通过导入包的形式来拿到控件，\n```\nimport kotlinx.android.synthetic.main.activity_main.*\nimport kotlinx.android.synthetic.main.action_bar.*\nimport kotlinx.android.synthetic.main.main_tablayout.*\nimport kotlinx.android.synthetic.main.main_header.*\n```\n这样就直接拿到了所有用到的view中的所有控件,``.*``就是实例化View中所有的id，\n如果想实例化单个id，就是``import kotlinx.android.synthetic.main.main_header.id ``。\n * 在通过``kotlinx``实例化的时候，刚开始遇到一个问题就是找不到该方法，后来查到是因为androidStudio自动创建的kotiln没有``apply plugin: 'kotlin-android-extensions'``这一行代码。\n所以在创建项目的时候要检查是否存在。\n\n* __初始化fragment：__\n由于在viewpager切换用到了fragment，所以要创建一个存放fragment的集合\n```\nvar fragments: MutableList<Fragment> = ArrayList<Fragment>()\n        fragments.add(Fragment1())\n        fragments.add(Fragment1());\n        fragments.add(Fragment1());\n```\n和java不同的是，kotlin使用的是MutableList，并且变量名是在前的，\n并且添加Fragment的时候也不需要new Fragment对象，是不是简洁了很多。\n\n* __关联viewpager:__\n在kotlin中已经帮我们简化了很多get、set方法，比如setAdapter直接调用adapter 就可以使用，如果要设置控件的显示或隐藏就是``header_1.visibility=View.GONE``\n```\nvp.adapter=viewPagerAdapter(supportFragmentManager,fragments)\n```\nviewpager需要一个适配器，使用内部类创建一个viewPagerAdapter，\n``fm``和``list``分别为参数，``FragmentManager``和``List<Fragment>``为类型，\n``FragmentPagerAdapter ``相当于``extend FragmentPagerAdapter``继承了该类。\n```\n //继承 FragmentPagerAdapter 创建适配器\n    class viewPagerAdapter(fm: FragmentManager?, var list: List<Fragment>) : FragmentPagerAdapter(fm) {\n        override fun getItem(position: Int): Fragment {\n            return list.get(position)\n        }\n\n        override fun getCount(): Int {\n            return list.size\n        }\n    }\n```\n\n* __监听view pager事件：__\n这里要监听viewpager，实现切换Framgment切换的效果\n重写onPagerSelected方法。\nwhen就是循环相当于switch case语句\n如果只执行一个方法就不需要加{}\n```\noverride fun onPageSelected(position: Int) {\n                //判断滑动后选择的页面设置相应的标签被选中\n                when (position) {\n                    0 -> {\n                        initTabLayout(tab1_tv, tab1_v)\n                        clearTabLayout(tab2_tv, tab2_v)\n                        clearTabLayout(tab3_tv, tab3_v)\n                    }\n               \n                    1 -> {\n                        initTabLayout(tab2_tv, tab2_v)\n                        clearTabLayout(tab1_tv, tab1_v)\n                        clearTabLayout(tab3_tv, tab3_v)\n                    }\n                    2 -> {\n                        initTabLayout(tab3_tv, tab3_v)\n                        clearTabLayout(tab2_tv, tab2_v)\n                        clearTabLayout(tab1_tv, tab1_v)\n                    }\n}\n```\n控件不需要实例化，在方法中定义好控件的类型，需要调用的时候直接传递控件id，在引用资源id,同样的例子：resources替代了java中的getResources\n```\n /*初始化tab标签*/\n    private fun initTabLayout(tv: TextView,tv2: TextView) {\n        tv.setTextColor(resources.getColor(R.color.tab_select))\n        tv2.setBackgroundColor(resources.getColor(R.color.tab_select))\n    }\n    /*重置tab标签颜色*/\n    private fun clearTabLayout(tv: TextView,tv2: TextView){\n        tv.setTextColor(resources.getColor(R.color.tab_clear))\n        tv2.setBackgroundColor(Color.WHITE)\n    }\n```\n\n* __最后用到的就是监听:__\n也是最常用的方法之一，kotlin中实现监听不需要实例化监听事件，直接使用一行代码调用就实现了监听操作\n```\ntab1.setOnClickListener {\n            vp.setCurrentItem(0)\n            initTabLayout(tab1_tv, tab1_v)\n            clearTabLayout(tab2_tv, tab2_v)\n            clearTabLayout(tab3_tv, tab3_v)\n        }\n```\n\n> ##### 四、Fragment设置假数据\n\n在写demo用的大多都是假数据，方便查看效果，都是通过for循环实现数据的递增添加\n\n```\n    private fun getData(): List<String> {\n\n        val data = ArrayList<String>()\n        for (i in 0..30) {\n            data.add(i,\"测试数据：\"+i)\n        }\n        return data\n    }\n```\n\n----\n##### END\n试着用Kotlin写了一个小demo，对比java感觉精简是kotlin的一大特点，能让开发者节省更多的时间，并且语法也非常好理解。有点与php类似。对于android开发者来说上手很容易。\n\n__相关资源：__\n- [Kotlin中文文档](https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/GettingStarted/index.html)\n- [ScrollableLayout开源库地址](https://github.com/cpoopc/ScrollableLayout)\n- [demo源码](https://github.com/wapchief/kotlin)","source":"_posts/20170709_1.md","raw":"---\ntitle: 使用Kotlin仿的简书个人主页，只需一个控件\ndate: 2017年7月9日\ncategories: \ntags: [android,kotlin] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \n\n---\n\n界面做的比较丑，但是基本上实现了功能。\n为了学习最近比较火的kotlin语言，就试着写了个demo。\n\n参考上篇文章[仿掌上英雄联盟](http://www.jianshu.com/p/5dc19d15c096)的效果。\n\n<!-- more -->\n\n![效果图](http://upload-images.jianshu.io/upload_images/2858691-238af768dfccc201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n> ##### 一、开始前的准备\n\n* __导入kotlin开发环境：__\n 在androidStudio3.0版本默认已经集成好了。直接在创建项目的时候勾选include Kotlin support，会自动帮我们创建好kotlin语言的项目。不勾选就是java。\n![image.png](http://upload-images.jianshu.io/upload_images/2858691-aa562024569678e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* __如果是手动集成kotlin：__\n需要两个地方进行配置\n1、根目录下的  project - build.gradle\n```\nbuildscript {\n    ext.kotlin_version = '1.1.2-4'\n....//省略部分代码\n   }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.3.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n```\n2、model - build.gradle\n```\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\n```\n```\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n .....//省略部分代码\n}\n```\n\n__需要注意的是如果是自动集成的默认没有``apply plugin: 'kotlin-android-extensions'``\n该方法需要手动添加，关于用处后面再说。__\n\n> ##### 二、加入控件，创建布局\n\n前面说的一个控件就是指scrollablelayout，在GitHub已经开源很久了。\n已经提供好了折叠所需要的布局。\n\n```\n compile 'com.github.cpoopc:scrollablelayoutlib:1.0.1'\n```\nScrollable需要三个子view，来分别展示：折叠的部分、标题部分、滚动的部分。\n\n![仿简书个人中心](http://upload-images.jianshu.io/upload_images/2858691-7db3dbdd40ea5089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480)\n\n所以布局中大体就是一个标题栏+一个ScrollacleLayout\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"com.wapchief.kotlin.MainActivity\">\n    <!--标题栏-->\n    <include layout=\"@layout/action_bar\"/>\n    <!--包裹三个View-->\n    <com.cpoopc.scrollablelayoutlib.ScrollableLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@android:color/white\"\n        android:orientation=\"vertical\">\n        <!--header-->\n        <include layout=\"@layout/main_header\" />\n        <!--tab-->\n        <include layout=\"@layout/main_tablayout\" />\n        <!--footer-->\n        <android.support.v4.view.ViewPager\n            android:id=\"@+id/vp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" />\n    </com.cpoopc.scrollablelayoutlib.ScrollableLayout>\n\n</LinearLayout>\n\n```\n\n这里的布局跟java的一样，按正常的方式写就好。主要是在activity中的变化。\n\n> ##### 三、在activity中实例化\n\n* __实例化控件：__\n和java不同的是kotlin不需要通过findviewby来获取控件。java中如果存在多个视图文件布局就要创建多个view，比如这里我用的都是lnclude，如果是java中就要创建四个view对象。再分别实例化。\n在kotlin中提供了更加简洁的方法  : 直接通过导入包的形式来拿到控件，\n```\nimport kotlinx.android.synthetic.main.activity_main.*\nimport kotlinx.android.synthetic.main.action_bar.*\nimport kotlinx.android.synthetic.main.main_tablayout.*\nimport kotlinx.android.synthetic.main.main_header.*\n```\n这样就直接拿到了所有用到的view中的所有控件,``.*``就是实例化View中所有的id，\n如果想实例化单个id，就是``import kotlinx.android.synthetic.main.main_header.id ``。\n * 在通过``kotlinx``实例化的时候，刚开始遇到一个问题就是找不到该方法，后来查到是因为androidStudio自动创建的kotiln没有``apply plugin: 'kotlin-android-extensions'``这一行代码。\n所以在创建项目的时候要检查是否存在。\n\n* __初始化fragment：__\n由于在viewpager切换用到了fragment，所以要创建一个存放fragment的集合\n```\nvar fragments: MutableList<Fragment> = ArrayList<Fragment>()\n        fragments.add(Fragment1())\n        fragments.add(Fragment1());\n        fragments.add(Fragment1());\n```\n和java不同的是，kotlin使用的是MutableList，并且变量名是在前的，\n并且添加Fragment的时候也不需要new Fragment对象，是不是简洁了很多。\n\n* __关联viewpager:__\n在kotlin中已经帮我们简化了很多get、set方法，比如setAdapter直接调用adapter 就可以使用，如果要设置控件的显示或隐藏就是``header_1.visibility=View.GONE``\n```\nvp.adapter=viewPagerAdapter(supportFragmentManager,fragments)\n```\nviewpager需要一个适配器，使用内部类创建一个viewPagerAdapter，\n``fm``和``list``分别为参数，``FragmentManager``和``List<Fragment>``为类型，\n``FragmentPagerAdapter ``相当于``extend FragmentPagerAdapter``继承了该类。\n```\n //继承 FragmentPagerAdapter 创建适配器\n    class viewPagerAdapter(fm: FragmentManager?, var list: List<Fragment>) : FragmentPagerAdapter(fm) {\n        override fun getItem(position: Int): Fragment {\n            return list.get(position)\n        }\n\n        override fun getCount(): Int {\n            return list.size\n        }\n    }\n```\n\n* __监听view pager事件：__\n这里要监听viewpager，实现切换Framgment切换的效果\n重写onPagerSelected方法。\nwhen就是循环相当于switch case语句\n如果只执行一个方法就不需要加{}\n```\noverride fun onPageSelected(position: Int) {\n                //判断滑动后选择的页面设置相应的标签被选中\n                when (position) {\n                    0 -> {\n                        initTabLayout(tab1_tv, tab1_v)\n                        clearTabLayout(tab2_tv, tab2_v)\n                        clearTabLayout(tab3_tv, tab3_v)\n                    }\n               \n                    1 -> {\n                        initTabLayout(tab2_tv, tab2_v)\n                        clearTabLayout(tab1_tv, tab1_v)\n                        clearTabLayout(tab3_tv, tab3_v)\n                    }\n                    2 -> {\n                        initTabLayout(tab3_tv, tab3_v)\n                        clearTabLayout(tab2_tv, tab2_v)\n                        clearTabLayout(tab1_tv, tab1_v)\n                    }\n}\n```\n控件不需要实例化，在方法中定义好控件的类型，需要调用的时候直接传递控件id，在引用资源id,同样的例子：resources替代了java中的getResources\n```\n /*初始化tab标签*/\n    private fun initTabLayout(tv: TextView,tv2: TextView) {\n        tv.setTextColor(resources.getColor(R.color.tab_select))\n        tv2.setBackgroundColor(resources.getColor(R.color.tab_select))\n    }\n    /*重置tab标签颜色*/\n    private fun clearTabLayout(tv: TextView,tv2: TextView){\n        tv.setTextColor(resources.getColor(R.color.tab_clear))\n        tv2.setBackgroundColor(Color.WHITE)\n    }\n```\n\n* __最后用到的就是监听:__\n也是最常用的方法之一，kotlin中实现监听不需要实例化监听事件，直接使用一行代码调用就实现了监听操作\n```\ntab1.setOnClickListener {\n            vp.setCurrentItem(0)\n            initTabLayout(tab1_tv, tab1_v)\n            clearTabLayout(tab2_tv, tab2_v)\n            clearTabLayout(tab3_tv, tab3_v)\n        }\n```\n\n> ##### 四、Fragment设置假数据\n\n在写demo用的大多都是假数据，方便查看效果，都是通过for循环实现数据的递增添加\n\n```\n    private fun getData(): List<String> {\n\n        val data = ArrayList<String>()\n        for (i in 0..30) {\n            data.add(i,\"测试数据：\"+i)\n        }\n        return data\n    }\n```\n\n----\n##### END\n试着用Kotlin写了一个小demo，对比java感觉精简是kotlin的一大特点，能让开发者节省更多的时间，并且语法也非常好理解。有点与php类似。对于android开发者来说上手很容易。\n\n__相关资源：__\n- [Kotlin中文文档](https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/GettingStarted/index.html)\n- [ScrollableLayout开源库地址](https://github.com/cpoopc/ScrollableLayout)\n- [demo源码](https://github.com/wapchief/kotlin)","slug":"20170709_1","published":1,"updated":"2019-07-03T07:40:53.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxmzrkyy000eglu22o55c98i","content":"<p>界面做的比较丑，但是基本上实现了功能。<br>为了学习最近比较火的kotlin语言，就试着写了个demo。</p>\n<p>参考上篇文章<a href=\"http://www.jianshu.com/p/5dc19d15c096\" target=\"_blank\" rel=\"external\">仿掌上英雄联盟</a>的效果。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-238af768dfccc201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果图\"></p>\n<blockquote>\n<h5 id=\"一、开始前的准备\"><a href=\"#一、开始前的准备\" class=\"headerlink\" title=\"一、开始前的准备\"></a>一、开始前的准备</h5></blockquote>\n<ul>\n<li><p><strong>导入kotlin开发环境：</strong><br>在androidStudio3.0版本默认已经集成好了。直接在创建项目的时候勾选include Kotlin support，会自动帮我们创建好kotlin语言的项目。不勾选就是java。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-aa562024569678e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p><strong>如果是手动集成kotlin：</strong><br>需要两个地方进行配置<br>1、根目录下的  project - build.gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">    ext.kotlin_version = &apos;1.1.2-4&apos;</div><div class=\"line\">....//省略部分代码</div><div class=\"line\">   &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">        classpath &apos;com.android.tools.build:gradle:2.3.0&apos;</div><div class=\"line\">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2、model - build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: &apos;kotlin-android&apos;</div><div class=\"line\">apply plugin: &apos;kotlin-android-extensions&apos;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</div><div class=\"line\"> .....//省略部分代码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>需要注意的是如果是自动集成的默认没有<code>apply plugin: &#39;kotlin-android-extensions&#39;</code><br>该方法需要手动添加，关于用处后面再说。</strong></p>\n<blockquote>\n<h5 id=\"二、加入控件，创建布局\"><a href=\"#二、加入控件，创建布局\" class=\"headerlink\" title=\"二、加入控件，创建布局\"></a>二、加入控件，创建布局</h5></blockquote>\n<p>前面说的一个控件就是指scrollablelayout，在GitHub已经开源很久了。<br>已经提供好了折叠所需要的布局。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.github.cpoopc:scrollablelayoutlib:1.0.1&apos;</div></pre></td></tr></table></figure>\n<p>Scrollable需要三个子view，来分别展示：折叠的部分、标题部分、滚动的部分。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-7db3dbdd40ea5089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480\" alt=\"仿简书个人中心\"></p>\n<p>所以布局中大体就是一个标题栏+一个ScrollacleLayout</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    android:orientation=&quot;vertical&quot;</div><div class=\"line\">    tools:context=&quot;com.wapchief.kotlin.MainActivity&quot;&gt;</div><div class=\"line\">    &lt;!--标题栏--&gt;</div><div class=\"line\">    &lt;include layout=&quot;@layout/action_bar&quot;/&gt;</div><div class=\"line\">    &lt;!--包裹三个View--&gt;</div><div class=\"line\">    &lt;com.cpoopc.scrollablelayoutlib.ScrollableLayout</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">        android:background=&quot;@android:color/white&quot;</div><div class=\"line\">        android:orientation=&quot;vertical&quot;&gt;</div><div class=\"line\">        &lt;!--header--&gt;</div><div class=\"line\">        &lt;include layout=&quot;@layout/main_header&quot; /&gt;</div><div class=\"line\">        &lt;!--tab--&gt;</div><div class=\"line\">        &lt;include layout=&quot;@layout/main_tablayout&quot; /&gt;</div><div class=\"line\">        &lt;!--footer--&gt;</div><div class=\"line\">        &lt;android.support.v4.view.ViewPager</div><div class=\"line\">            android:id=&quot;@+id/vp&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot; /&gt;</div><div class=\"line\">    &lt;/com.cpoopc.scrollablelayoutlib.ScrollableLayout&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>\n<p>这里的布局跟java的一样，按正常的方式写就好。主要是在activity中的变化。</p>\n<blockquote>\n<h5 id=\"三、在activity中实例化\"><a href=\"#三、在activity中实例化\" class=\"headerlink\" title=\"三、在activity中实例化\"></a>三、在activity中实例化</h5></blockquote>\n<ul>\n<li><strong>实例化控件：</strong><br>和java不同的是kotlin不需要通过findviewby来获取控件。java中如果存在多个视图文件布局就要创建多个view，比如这里我用的都是lnclude，如果是java中就要创建四个view对象。再分别实例化。<br>在kotlin中提供了更加简洁的方法  : 直接通过导入包的形式来拿到控件，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import kotlinx.android.synthetic.main.activity_main.*</div><div class=\"line\">import kotlinx.android.synthetic.main.action_bar.*</div><div class=\"line\">import kotlinx.android.synthetic.main.main_tablayout.*</div><div class=\"line\">import kotlinx.android.synthetic.main.main_header.*</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就直接拿到了所有用到的view中的所有控件,<code>.*</code>就是实例化View中所有的id，<br>如果想实例化单个id，就是<code>import kotlinx.android.synthetic.main.main_header.id</code>。</p>\n<ul>\n<li>在通过<code>kotlinx</code>实例化的时候，刚开始遇到一个问题就是找不到该方法，后来查到是因为androidStudio自动创建的kotiln没有<code>apply plugin: &#39;kotlin-android-extensions&#39;</code>这一行代码。<br>所以在创建项目的时候要检查是否存在。</li>\n</ul>\n<ul>\n<li><strong>初始化fragment：</strong><br>由于在viewpager切换用到了fragment，所以要创建一个存放fragment的集合<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fragments: MutableList&lt;Fragment&gt; = ArrayList&lt;Fragment&gt;()</div><div class=\"line\">        fragments.add(Fragment1())</div><div class=\"line\">        fragments.add(Fragment1());</div><div class=\"line\">        fragments.add(Fragment1());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>和java不同的是，kotlin使用的是MutableList，并且变量名是在前的，<br>并且添加Fragment的时候也不需要new Fragment对象，是不是简洁了很多。</p>\n<ul>\n<li><strong>关联viewpager:</strong><br>在kotlin中已经帮我们简化了很多get、set方法，比如setAdapter直接调用adapter 就可以使用，如果要设置控件的显示或隐藏就是<code>header_1.visibility=View.GONE</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vp.adapter=viewPagerAdapter(supportFragmentManager,fragments)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>viewpager需要一个适配器，使用内部类创建一个viewPagerAdapter，<br><code>fm</code>和<code>list</code>分别为参数，<code>FragmentManager</code>和<code>List&lt;Fragment&gt;</code>为类型，<br><code>FragmentPagerAdapter</code>相当于<code>extend FragmentPagerAdapter</code>继承了该类。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//继承 FragmentPagerAdapter 创建适配器</div><div class=\"line\">   class viewPagerAdapter(fm: FragmentManager?, var list: List&lt;Fragment&gt;) : FragmentPagerAdapter(fm) &#123;</div><div class=\"line\">       override fun getItem(position: Int): Fragment &#123;</div><div class=\"line\">           return list.get(position)</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       override fun getCount(): Int &#123;</div><div class=\"line\">           return list.size</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>监听view pager事件：</strong><br>这里要监听viewpager，实现切换Framgment切换的效果<br>重写onPagerSelected方法。<br>when就是循环相当于switch case语句<br>如果只执行一个方法就不需要加{}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">override fun onPageSelected(position: Int) &#123;</div><div class=\"line\">                //判断滑动后选择的页面设置相应的标签被选中</div><div class=\"line\">                when (position) &#123;</div><div class=\"line\">                    0 -&gt; &#123;</div><div class=\"line\">                        initTabLayout(tab1_tv, tab1_v)</div><div class=\"line\">                        clearTabLayout(tab2_tv, tab2_v)</div><div class=\"line\">                        clearTabLayout(tab3_tv, tab3_v)</div><div class=\"line\">                    &#125;</div><div class=\"line\">               </div><div class=\"line\">                    1 -&gt; &#123;</div><div class=\"line\">                        initTabLayout(tab2_tv, tab2_v)</div><div class=\"line\">                        clearTabLayout(tab1_tv, tab1_v)</div><div class=\"line\">                        clearTabLayout(tab3_tv, tab3_v)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    2 -&gt; &#123;</div><div class=\"line\">                        initTabLayout(tab3_tv, tab3_v)</div><div class=\"line\">                        clearTabLayout(tab2_tv, tab2_v)</div><div class=\"line\">                        clearTabLayout(tab1_tv, tab1_v)</div><div class=\"line\">                    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>控件不需要实例化，在方法中定义好控件的类型，需要调用的时候直接传递控件id，在引用资源id,同样的例子：resources替代了java中的getResources<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*初始化tab标签*/</div><div class=\"line\">   private fun initTabLayout(tv: TextView,tv2: TextView) &#123;</div><div class=\"line\">       tv.setTextColor(resources.getColor(R.color.tab_select))</div><div class=\"line\">       tv2.setBackgroundColor(resources.getColor(R.color.tab_select))</div><div class=\"line\">   &#125;</div><div class=\"line\">   /*重置tab标签颜色*/</div><div class=\"line\">   private fun clearTabLayout(tv: TextView,tv2: TextView)&#123;</div><div class=\"line\">       tv.setTextColor(resources.getColor(R.color.tab_clear))</div><div class=\"line\">       tv2.setBackgroundColor(Color.WHITE)</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>最后用到的就是监听:</strong><br>也是最常用的方法之一，kotlin中实现监听不需要实例化监听事件，直接使用一行代码调用就实现了监听操作<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tab1.setOnClickListener &#123;</div><div class=\"line\">            vp.setCurrentItem(0)</div><div class=\"line\">            initTabLayout(tab1_tv, tab1_v)</div><div class=\"line\">            clearTabLayout(tab2_tv, tab2_v)</div><div class=\"line\">            clearTabLayout(tab3_tv, tab3_v)</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"四、Fragment设置假数据\"><a href=\"#四、Fragment设置假数据\" class=\"headerlink\" title=\"四、Fragment设置假数据\"></a>四、Fragment设置假数据</h5></blockquote>\n<p>在写demo用的大多都是假数据，方便查看效果，都是通过for循环实现数据的递增添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">private fun getData(): List&lt;String&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    val data = ArrayList&lt;String&gt;()</div><div class=\"line\">    for (i in 0..30) &#123;</div><div class=\"line\">        data.add(i,&quot;测试数据：&quot;+i)</div><div class=\"line\">    &#125;</div><div class=\"line\">    return data</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h5><p>试着用Kotlin写了一个小demo，对比java感觉精简是kotlin的一大特点，能让开发者节省更多的时间，并且语法也非常好理解。有点与php类似。对于android开发者来说上手很容易。</p>\n<p><strong>相关资源：</strong></p>\n<ul>\n<li><a href=\"https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/GettingStarted/index.html\" target=\"_blank\" rel=\"external\">Kotlin中文文档</a></li>\n<li><a href=\"https://github.com/cpoopc/ScrollableLayout\" target=\"_blank\" rel=\"external\">ScrollableLayout开源库地址</a></li>\n<li><a href=\"https://github.com/wapchief/kotlin\" target=\"_blank\" rel=\"external\">demo源码</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>界面做的比较丑，但是基本上实现了功能。<br>为了学习最近比较火的kotlin语言，就试着写了个demo。</p>\n<p>参考上篇文章<a href=\"http://www.jianshu.com/p/5dc19d15c096\" target=\"_blank\" rel=\"external\">仿掌上英雄联盟</a>的效果。</p>","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-238af768dfccc201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果图\"></p>\n<blockquote>\n<h5 id=\"一、开始前的准备\"><a href=\"#一、开始前的准备\" class=\"headerlink\" title=\"一、开始前的准备\"></a>一、开始前的准备</h5></blockquote>\n<ul>\n<li><p><strong>导入kotlin开发环境：</strong><br>在androidStudio3.0版本默认已经集成好了。直接在创建项目的时候勾选include Kotlin support，会自动帮我们创建好kotlin语言的项目。不勾选就是java。<br><img src=\"http://upload-images.jianshu.io/upload_images/2858691-aa562024569678e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li><p><strong>如果是手动集成kotlin：</strong><br>需要两个地方进行配置<br>1、根目录下的  project - build.gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">    ext.kotlin_version = &apos;1.1.2-4&apos;</div><div class=\"line\">....//省略部分代码</div><div class=\"line\">   &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">        classpath &apos;com.android.tools.build:gradle:2.3.0&apos;</div><div class=\"line\">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>2、model - build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: &apos;kotlin-android&apos;</div><div class=\"line\">apply plugin: &apos;kotlin-android-extensions&apos;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</div><div class=\"line\"> .....//省略部分代码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>需要注意的是如果是自动集成的默认没有<code>apply plugin: &#39;kotlin-android-extensions&#39;</code><br>该方法需要手动添加，关于用处后面再说。</strong></p>\n<blockquote>\n<h5 id=\"二、加入控件，创建布局\"><a href=\"#二、加入控件，创建布局\" class=\"headerlink\" title=\"二、加入控件，创建布局\"></a>二、加入控件，创建布局</h5></blockquote>\n<p>前面说的一个控件就是指scrollablelayout，在GitHub已经开源很久了。<br>已经提供好了折叠所需要的布局。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.github.cpoopc:scrollablelayoutlib:1.0.1&apos;</div></pre></td></tr></table></figure>\n<p>Scrollable需要三个子view，来分别展示：折叠的部分、标题部分、滚动的部分。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-7db3dbdd40ea5089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480\" alt=\"仿简书个人中心\"></p>\n<p>所以布局中大体就是一个标题栏+一个ScrollacleLayout</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    android:orientation=&quot;vertical&quot;</div><div class=\"line\">    tools:context=&quot;com.wapchief.kotlin.MainActivity&quot;&gt;</div><div class=\"line\">    &lt;!--标题栏--&gt;</div><div class=\"line\">    &lt;include layout=&quot;@layout/action_bar&quot;/&gt;</div><div class=\"line\">    &lt;!--包裹三个View--&gt;</div><div class=\"line\">    &lt;com.cpoopc.scrollablelayoutlib.ScrollableLayout</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">        android:background=&quot;@android:color/white&quot;</div><div class=\"line\">        android:orientation=&quot;vertical&quot;&gt;</div><div class=\"line\">        &lt;!--header--&gt;</div><div class=\"line\">        &lt;include layout=&quot;@layout/main_header&quot; /&gt;</div><div class=\"line\">        &lt;!--tab--&gt;</div><div class=\"line\">        &lt;include layout=&quot;@layout/main_tablayout&quot; /&gt;</div><div class=\"line\">        &lt;!--footer--&gt;</div><div class=\"line\">        &lt;android.support.v4.view.ViewPager</div><div class=\"line\">            android:id=&quot;@+id/vp&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot; /&gt;</div><div class=\"line\">    &lt;/com.cpoopc.scrollablelayoutlib.ScrollableLayout&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>\n<p>这里的布局跟java的一样，按正常的方式写就好。主要是在activity中的变化。</p>\n<blockquote>\n<h5 id=\"三、在activity中实例化\"><a href=\"#三、在activity中实例化\" class=\"headerlink\" title=\"三、在activity中实例化\"></a>三、在activity中实例化</h5></blockquote>\n<ul>\n<li><strong>实例化控件：</strong><br>和java不同的是kotlin不需要通过findviewby来获取控件。java中如果存在多个视图文件布局就要创建多个view，比如这里我用的都是lnclude，如果是java中就要创建四个view对象。再分别实例化。<br>在kotlin中提供了更加简洁的方法  : 直接通过导入包的形式来拿到控件，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import kotlinx.android.synthetic.main.activity_main.*</div><div class=\"line\">import kotlinx.android.synthetic.main.action_bar.*</div><div class=\"line\">import kotlinx.android.synthetic.main.main_tablayout.*</div><div class=\"line\">import kotlinx.android.synthetic.main.main_header.*</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就直接拿到了所有用到的view中的所有控件,<code>.*</code>就是实例化View中所有的id，<br>如果想实例化单个id，就是<code>import kotlinx.android.synthetic.main.main_header.id</code>。</p>\n<ul>\n<li>在通过<code>kotlinx</code>实例化的时候，刚开始遇到一个问题就是找不到该方法，后来查到是因为androidStudio自动创建的kotiln没有<code>apply plugin: &#39;kotlin-android-extensions&#39;</code>这一行代码。<br>所以在创建项目的时候要检查是否存在。</li>\n</ul>\n<ul>\n<li><strong>初始化fragment：</strong><br>由于在viewpager切换用到了fragment，所以要创建一个存放fragment的集合<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fragments: MutableList&lt;Fragment&gt; = ArrayList&lt;Fragment&gt;()</div><div class=\"line\">        fragments.add(Fragment1())</div><div class=\"line\">        fragments.add(Fragment1());</div><div class=\"line\">        fragments.add(Fragment1());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>和java不同的是，kotlin使用的是MutableList，并且变量名是在前的，<br>并且添加Fragment的时候也不需要new Fragment对象，是不是简洁了很多。</p>\n<ul>\n<li><strong>关联viewpager:</strong><br>在kotlin中已经帮我们简化了很多get、set方法，比如setAdapter直接调用adapter 就可以使用，如果要设置控件的显示或隐藏就是<code>header_1.visibility=View.GONE</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vp.adapter=viewPagerAdapter(supportFragmentManager,fragments)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>viewpager需要一个适配器，使用内部类创建一个viewPagerAdapter，<br><code>fm</code>和<code>list</code>分别为参数，<code>FragmentManager</code>和<code>List&lt;Fragment&gt;</code>为类型，<br><code>FragmentPagerAdapter</code>相当于<code>extend FragmentPagerAdapter</code>继承了该类。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//继承 FragmentPagerAdapter 创建适配器</div><div class=\"line\">   class viewPagerAdapter(fm: FragmentManager?, var list: List&lt;Fragment&gt;) : FragmentPagerAdapter(fm) &#123;</div><div class=\"line\">       override fun getItem(position: Int): Fragment &#123;</div><div class=\"line\">           return list.get(position)</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       override fun getCount(): Int &#123;</div><div class=\"line\">           return list.size</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>监听view pager事件：</strong><br>这里要监听viewpager，实现切换Framgment切换的效果<br>重写onPagerSelected方法。<br>when就是循环相当于switch case语句<br>如果只执行一个方法就不需要加{}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">override fun onPageSelected(position: Int) &#123;</div><div class=\"line\">                //判断滑动后选择的页面设置相应的标签被选中</div><div class=\"line\">                when (position) &#123;</div><div class=\"line\">                    0 -&gt; &#123;</div><div class=\"line\">                        initTabLayout(tab1_tv, tab1_v)</div><div class=\"line\">                        clearTabLayout(tab2_tv, tab2_v)</div><div class=\"line\">                        clearTabLayout(tab3_tv, tab3_v)</div><div class=\"line\">                    &#125;</div><div class=\"line\">               </div><div class=\"line\">                    1 -&gt; &#123;</div><div class=\"line\">                        initTabLayout(tab2_tv, tab2_v)</div><div class=\"line\">                        clearTabLayout(tab1_tv, tab1_v)</div><div class=\"line\">                        clearTabLayout(tab3_tv, tab3_v)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    2 -&gt; &#123;</div><div class=\"line\">                        initTabLayout(tab3_tv, tab3_v)</div><div class=\"line\">                        clearTabLayout(tab2_tv, tab2_v)</div><div class=\"line\">                        clearTabLayout(tab1_tv, tab1_v)</div><div class=\"line\">                    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>控件不需要实例化，在方法中定义好控件的类型，需要调用的时候直接传递控件id，在引用资源id,同样的例子：resources替代了java中的getResources<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*初始化tab标签*/</div><div class=\"line\">   private fun initTabLayout(tv: TextView,tv2: TextView) &#123;</div><div class=\"line\">       tv.setTextColor(resources.getColor(R.color.tab_select))</div><div class=\"line\">       tv2.setBackgroundColor(resources.getColor(R.color.tab_select))</div><div class=\"line\">   &#125;</div><div class=\"line\">   /*重置tab标签颜色*/</div><div class=\"line\">   private fun clearTabLayout(tv: TextView,tv2: TextView)&#123;</div><div class=\"line\">       tv.setTextColor(resources.getColor(R.color.tab_clear))</div><div class=\"line\">       tv2.setBackgroundColor(Color.WHITE)</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>最后用到的就是监听:</strong><br>也是最常用的方法之一，kotlin中实现监听不需要实例化监听事件，直接使用一行代码调用就实现了监听操作<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tab1.setOnClickListener &#123;</div><div class=\"line\">            vp.setCurrentItem(0)</div><div class=\"line\">            initTabLayout(tab1_tv, tab1_v)</div><div class=\"line\">            clearTabLayout(tab2_tv, tab2_v)</div><div class=\"line\">            clearTabLayout(tab3_tv, tab3_v)</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"四、Fragment设置假数据\"><a href=\"#四、Fragment设置假数据\" class=\"headerlink\" title=\"四、Fragment设置假数据\"></a>四、Fragment设置假数据</h5></blockquote>\n<p>在写demo用的大多都是假数据，方便查看效果，都是通过for循环实现数据的递增添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">private fun getData(): List&lt;String&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    val data = ArrayList&lt;String&gt;()</div><div class=\"line\">    for (i in 0..30) &#123;</div><div class=\"line\">        data.add(i,&quot;测试数据：&quot;+i)</div><div class=\"line\">    &#125;</div><div class=\"line\">    return data</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h5><p>试着用Kotlin写了一个小demo，对比java感觉精简是kotlin的一大特点，能让开发者节省更多的时间，并且语法也非常好理解。有点与php类似。对于android开发者来说上手很容易。</p>\n<p><strong>相关资源：</strong></p>\n<ul>\n<li><a href=\"https://huanglizhuo.gitbooks.io/kotlin-in-chinese/content/GettingStarted/index.html\" target=\"_blank\" rel=\"external\">Kotlin中文文档</a></li>\n<li><a href=\"https://github.com/cpoopc/ScrollableLayout\" target=\"_blank\" rel=\"external\">ScrollableLayout开源库地址</a></li>\n<li><a href=\"https://github.com/wapchief/kotlin\" target=\"_blank\" rel=\"external\">demo源码</a></li>\n</ul>"},{"title":"Android仿掌上英雄联盟首页，实现折叠效果","date":"2019-07-03T07:40:53.350Z","description":null,"_content":"\n不单单是掌上英雄联盟，像微博发现页也用了这样的布局，当滑动到一定距离的时候，自动隐藏轮播图，或者标题栏下面的布局。并且使tablayout置顶。\n\n<!-- more -->\n\n与之相似的还有简书的个人页面也是这样的布局。\n\n\n![lol.gif](http://upload-images.jianshu.io/upload_images/2858691-bf0dc4e8d169d569.gif?imageMogr2/auto-orient/strip)\n图片处理的有些不清楚。建议下载安装包自行查看效果\n* [安装包下载-2.83M](https://github.com/wapchief/imitationLOL/raw/master/apk/app-debug.apk)\n\n#####首页大概分为几个部分\n\n* 状态栏\n* 标题栏\n* 轮播图\n* 切换的Tab\n* 资讯列表\n* 资讯列表头部推荐\n* 刷新控件\n\n![lol.png](http://upload-images.jianshu.io/upload_images/2858691-e2a9d0885f4acc57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480)\n\n整个页面是一个Activity，最外层是刷新控件，然后是标题栏和折叠布局ScrollableLayout。\n\n```\n<com.cjj.MaterialRefreshLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <com.cpoopc.scrollablelayoutlib.ScrollableLayout\n            android:id=\"@+id/scrollablelayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"16dp\"\n            android:orientation=\"vertical\">\n            \n        </com.cpoopc.scrollablelayoutlib.ScrollableLayout>\n\n        <include layout=\"@layout/title_bar\" />\n    </RelativeLayout>\n</com.cjj.MaterialRefreshLayout>\n```\n\nScrollableLayout里面嵌套了轮播图、tablayout、viewpager。\n```\n        <com.cpoopc.scrollablelayoutlib.ScrollableLayout\n            android:id=\"@+id/scrollablelayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"16dp\"\n            android:orientation=\"vertical\">\n            <!--header-->\n            <com.youth.banner.Banner\n                android:id=\"@+id/header\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"200dp\" />\n\n            <!--置顶的部分-->\n            <android.support.design.widget.TabLayout\n                android:id=\"@+id/tab\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"50dp\"\n                android:background=\"@color/white\"\n                app:tabIndicatorColor=\"@color/tab_select\"\n                app:tabMode=\"scrollable\"\n                app:tabSelectedTextColor=\"@color/tab_select\" />\n            <!--滚动视图-->\n            <android.support.v4.view.ViewPager\n                android:id=\"@+id/vp\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\" />\n        </com.cpoopc.scrollablelayoutlib.ScrollableLayout>\n\n```\n\n然后切换是通过tab和viewpager联动加载的Fragment\nFragment中列表用的是RecyclerView，然后再给RecyclerView添加了一个Header，实现推荐功能。\n```\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <android.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:id=\"@+id/fragment_lv\"\n            android:paddingLeft=\"12dp\"\n            android:paddingRight=\"12dp\"\n            android:nestedScrollingEnabled=\"false\"\n            android:layout_height=\"match_parent\"/>\n\n        <com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader\n            android:id=\"@+id/header\"\n            android:layout_width=\"match_parent\"\n            android:layout_gravity=\"\"\n            android:nestedScrollingEnabled=\"false\"\n            android:layout_height=\"60dp\"/>\n    </RelativeLayout>\n</ScrollView>\n```\n#####创建布局需要注意的问题\n* ScrollView和RecyclerView滚动冲突，造成滑动不流畅。\n需要在RecyclerView设置android:nestedScrollingEnabled=\"false\"属性，使滚动事件交给ScrollView处理。\n\n* 添加RecyclerViewHeader的时候，父布局只能识别RelativeLayout 、LinearLayout、和FrameLayout这三种控件。\n\n* ScrollableLayout子布局是固定的格式，分为三部分。\n\n#####设置好布局后，进行数据的填充，先操作activty中的元素\n\n实例化控件直接用ButterKnife一键绑定了。直接加载控件数据。\n\n```\n    private void initView() {\n        //加载轮播图数据\n        initBanner();\n        //TabLayout\n        initTabLayout();\n        //创建Fragment\n        initFragment();\n        //监听滚动状态\n        initOnClickScroll();\n    }\n```\n\n随便在网上找了三张图片，使用Picasso框架完成图片的加载。\nstart开启轮播。\n这时候打开app就能看到效果了。\n该框架支持多种轮播样式风格，根据需要自己设置。\n```\n    /*轮播*/\n    private void initBanner() {\n        //圆形指示器\n        header.setBannerStyle(BannerConfig.CIRCLE_INDICATOR);\n        //指示器居中\n        header.setIndicatorGravity(BannerConfig.CENTER);\n        img.add(\"http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png\");\n        img.add(\"http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png\");\n        img.add(\"http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png\");\n        header.setImageLoader(new ImageLoader() {\n            @Override\n            public void displayImage(Context context, Object o, ImageView imageView) {\n                Picasso.with(context)\n                        .load(url)\n                        .into(imageView);\n            }\n        });\n        header.setImages(img);\n        header.start();\n    }\n```\n\n然后进行tablayout的初始化\n```\n    private String[] titles = new String[]{\"最新\", \"专栏\", \"官方\", \"活动\", \"攻略\", \"娱乐\", \"收藏\"};\n\n    /*初始化tab标签*/\n    private void initTabLayout() {\n\n        for (int i=0;i<titles.length;i++){\n            tab.addTab(tab.newTab().setText(titles[i]));\n        }\n\n    }\n```\n\n上面只是装载了标签数据，通过setupWithViewPager关联viewpager\n\n```\n    /*初始化Fragment*/\n    private void initFragment() {\n\n        ScrollableFragment fragment = new ScrollableFragment();\n        ScrollableFragment fragment1 = new ScrollableFragment();\n        ScrollableFragment fragment2 = new ScrollableFragment();\n        ScrollableFragment fragment3 = new ScrollableFragment();\n        ScrollableFragment fragment4 = new ScrollableFragment();\n        ScrollableFragment fragment5 = new ScrollableFragment();\n        ScrollableFragment fragment6 = new ScrollableFragment();\n        fragmentList.add(fragment);\n        fragmentList.add(fragment1);\n        fragmentList.add(fragment2);\n        fragmentList.add(fragment3);\n        fragmentList.add(fragment4);\n        fragmentList.add(fragment5);\n        fragmentList.add(fragment6);\n        adapterVP = new ViewPagerAdapter(getSupportFragmentManager());\n        vp.setAdapter(adapterVP);\n        tab.setupWithViewPager(vp);\n    }\n```\n\n如果到这一步运行app，发现tab标签的状态或者颜色没有选中的效果，检查viewpager的adapter是否重写了getPageTitle方法\n\n```\n public CharSequence getPageTitle(int position) {\n            return titles[position];\n        }\n```\n\n#####到这里已经完成了acticity的工作，但是我们还要实现标题栏渐变消失的效果。\n在android中大多数跟滚动有关的控件，都有自己的滚动监听事件，来让开发者调用，以实现高级的效果。\n\n而这里用的是ScrollableLayout控件，该控件内部也是基于ScrollView滚动，所以在内部给我们封装好了监听事件，直接调动监听方法就可以\n\n```\n  /*滚动监听*/\n    private void initOnClickScroll() {\n        scrollablelayout.setOnScrollListener(new ScrollableLayout.OnScrollListener() {\n            @Override\n            public void onScroll(int i, int i1) {\n                if (i >= i1) {\n                    title.setVisibility(View.GONE);\n                } else {\n                    title.setVisibility(View.VISIBLE);\n                }\n                //通过距离设置渐变效果\n                float scale = (float) i1-i;\n                float alpha = (255 * scale);\n                float alpha2 = scale/i1*150;\n                float alphaTv = scale / i1 * 255;\n                title.setBackgroundColor(Color.argb((int) alpha2, 0, 0, 0));\n                titleBarTitle.setTextColor(Color.argb((int) alphaTv, 198, 166, 102));\n                titleBarContent.setTextColor(Color.argb((int) alphaTv,198,166,102));\n            }\n        });\n    }\n```\nonScroll有两个属性，一个I是滚动的距离，是根据手势滑动的距离计算出的距离，i1是从开始滚动到header消失这之间的总距离。也就是固定的。\n\n为了区别，这里加了标题栏的显示和隐藏，当底部滚动视图置顶的时候，也就是i=i1的时候，就把标题栏隐藏掉。\n\n但是我们这里是需要一个渐变隐藏的效果，也就是让控件背景颜色从不透明到全透明的实时渐变的一个过程。\n\n颜色需要用到argb，有四个参数，第一个就是透明度，\n如果需要递增则用``255 * scale``\n递减用``scale ／ i1 * 255``\n需要半透的话，把255再除以2。\n\n#####Fragment里面需要操作的东西就少了\n\n两行代码就实现了headerview的添加\n\n```\n  private void initAdapter() {\n        View headerView = View.inflate(getContext(), R.layout.view_header, null);\n        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\n        recyclerView.setLayoutManager(layoutManager);\n        header.addView(headerView);\n        header.attachTo(recyclerView);\n        adapter = new FragmentAdapter(data, getActivity());\n        //分割线\n        recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL));\n        recyclerView.setAdapter(adapter);\n    }\n```\n\n\n\n------\n#####总结\n\n其实要实现这种效果的方法还有很多，比如利用Design库中的CoordinatorLayout，和AppBarLayout结合来用，也能实现折叠效果。\n\n包括GitHub也有一些开源的库可供我们选择使用，像ScrollableLayout 、ObservableScrollView这些都是非常优秀的框架。\n\n在实际项目中节省了很多开发时间。\n\n唯一的时间成本就是我们学习这些框架的时间，当熟练运用之后，这些看似复杂的东西，可能只需要短短的几分钟而已。\n\n-----\n#####关于\n本文所用到的开源库：\n\n```\n    //recyclerview列表\n    compile 'com.android.support:recyclerview-v7:25.0.0'\n    //design库，用于tablayout，CoordinatorLayout折叠布局等\n    compile 'com.android.support:design:25.0.0'\n    //一键绑定控件\n    compile 'com.jakewharton:butterknife:5.1.1'\n    compile 'com.android.support:appcompat-v7:25.0.0'\n    //网络请求\n    compile 'com.squareup.picasso:picasso:2.5.2'\n    //ConstraintLayout\n    compile 'com.android.support.constraint:constraint-layout:1.0.2'\n    //轮播控件\n    compile 'com.youth.banner:banner:1.4.9'\n    //刷新加载控件\n    compile 'com.cjj.materialrefeshlayout:library:1.3.0'\n    //折叠控件，解决了滚动冲突\n    compile 'com.github.cpoopc:scrollablelayoutlib:1.0.1'\n    //RecyclerViewHeader\n    compile 'com.bartoszlipinski:recyclerviewheader2:2.0.1'\n```\n\n最后附上Demo地址：https://github.com/wapchief/imitationLOL\n\n##### 新的分支\n添加了新的分支new，布局调整，使更接近于实际效果。\n调整了header的位置，为了实现悬浮消失的效果，将header从recyclerView独立出来，放在了activity，并且对头部标题栏做了优化，\n可以自助选择tab置顶的时候，标题栏是否消失。\n\n并且在标题栏选项中增加了一个彩蛋，是仿美团外卖配送时折叠的效果。","source":"_posts/20170709_2.md","raw":"---\ntitle: Android仿掌上英雄联盟首页，实现折叠效果\ndate: 2017年7月9日\ncategories: \ntags: [android] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \n\n---\n\n不单单是掌上英雄联盟，像微博发现页也用了这样的布局，当滑动到一定距离的时候，自动隐藏轮播图，或者标题栏下面的布局。并且使tablayout置顶。\n\n<!-- more -->\n\n与之相似的还有简书的个人页面也是这样的布局。\n\n\n![lol.gif](http://upload-images.jianshu.io/upload_images/2858691-bf0dc4e8d169d569.gif?imageMogr2/auto-orient/strip)\n图片处理的有些不清楚。建议下载安装包自行查看效果\n* [安装包下载-2.83M](https://github.com/wapchief/imitationLOL/raw/master/apk/app-debug.apk)\n\n#####首页大概分为几个部分\n\n* 状态栏\n* 标题栏\n* 轮播图\n* 切换的Tab\n* 资讯列表\n* 资讯列表头部推荐\n* 刷新控件\n\n![lol.png](http://upload-images.jianshu.io/upload_images/2858691-e2a9d0885f4acc57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480)\n\n整个页面是一个Activity，最外层是刷新控件，然后是标题栏和折叠布局ScrollableLayout。\n\n```\n<com.cjj.MaterialRefreshLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <com.cpoopc.scrollablelayoutlib.ScrollableLayout\n            android:id=\"@+id/scrollablelayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"16dp\"\n            android:orientation=\"vertical\">\n            \n        </com.cpoopc.scrollablelayoutlib.ScrollableLayout>\n\n        <include layout=\"@layout/title_bar\" />\n    </RelativeLayout>\n</com.cjj.MaterialRefreshLayout>\n```\n\nScrollableLayout里面嵌套了轮播图、tablayout、viewpager。\n```\n        <com.cpoopc.scrollablelayoutlib.ScrollableLayout\n            android:id=\"@+id/scrollablelayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"16dp\"\n            android:orientation=\"vertical\">\n            <!--header-->\n            <com.youth.banner.Banner\n                android:id=\"@+id/header\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"200dp\" />\n\n            <!--置顶的部分-->\n            <android.support.design.widget.TabLayout\n                android:id=\"@+id/tab\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"50dp\"\n                android:background=\"@color/white\"\n                app:tabIndicatorColor=\"@color/tab_select\"\n                app:tabMode=\"scrollable\"\n                app:tabSelectedTextColor=\"@color/tab_select\" />\n            <!--滚动视图-->\n            <android.support.v4.view.ViewPager\n                android:id=\"@+id/vp\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\" />\n        </com.cpoopc.scrollablelayoutlib.ScrollableLayout>\n\n```\n\n然后切换是通过tab和viewpager联动加载的Fragment\nFragment中列表用的是RecyclerView，然后再给RecyclerView添加了一个Header，实现推荐功能。\n```\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    >\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <android.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:id=\"@+id/fragment_lv\"\n            android:paddingLeft=\"12dp\"\n            android:paddingRight=\"12dp\"\n            android:nestedScrollingEnabled=\"false\"\n            android:layout_height=\"match_parent\"/>\n\n        <com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader\n            android:id=\"@+id/header\"\n            android:layout_width=\"match_parent\"\n            android:layout_gravity=\"\"\n            android:nestedScrollingEnabled=\"false\"\n            android:layout_height=\"60dp\"/>\n    </RelativeLayout>\n</ScrollView>\n```\n#####创建布局需要注意的问题\n* ScrollView和RecyclerView滚动冲突，造成滑动不流畅。\n需要在RecyclerView设置android:nestedScrollingEnabled=\"false\"属性，使滚动事件交给ScrollView处理。\n\n* 添加RecyclerViewHeader的时候，父布局只能识别RelativeLayout 、LinearLayout、和FrameLayout这三种控件。\n\n* ScrollableLayout子布局是固定的格式，分为三部分。\n\n#####设置好布局后，进行数据的填充，先操作activty中的元素\n\n实例化控件直接用ButterKnife一键绑定了。直接加载控件数据。\n\n```\n    private void initView() {\n        //加载轮播图数据\n        initBanner();\n        //TabLayout\n        initTabLayout();\n        //创建Fragment\n        initFragment();\n        //监听滚动状态\n        initOnClickScroll();\n    }\n```\n\n随便在网上找了三张图片，使用Picasso框架完成图片的加载。\nstart开启轮播。\n这时候打开app就能看到效果了。\n该框架支持多种轮播样式风格，根据需要自己设置。\n```\n    /*轮播*/\n    private void initBanner() {\n        //圆形指示器\n        header.setBannerStyle(BannerConfig.CIRCLE_INDICATOR);\n        //指示器居中\n        header.setIndicatorGravity(BannerConfig.CENTER);\n        img.add(\"http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png\");\n        img.add(\"http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png\");\n        img.add(\"http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png\");\n        header.setImageLoader(new ImageLoader() {\n            @Override\n            public void displayImage(Context context, Object o, ImageView imageView) {\n                Picasso.with(context)\n                        .load(url)\n                        .into(imageView);\n            }\n        });\n        header.setImages(img);\n        header.start();\n    }\n```\n\n然后进行tablayout的初始化\n```\n    private String[] titles = new String[]{\"最新\", \"专栏\", \"官方\", \"活动\", \"攻略\", \"娱乐\", \"收藏\"};\n\n    /*初始化tab标签*/\n    private void initTabLayout() {\n\n        for (int i=0;i<titles.length;i++){\n            tab.addTab(tab.newTab().setText(titles[i]));\n        }\n\n    }\n```\n\n上面只是装载了标签数据，通过setupWithViewPager关联viewpager\n\n```\n    /*初始化Fragment*/\n    private void initFragment() {\n\n        ScrollableFragment fragment = new ScrollableFragment();\n        ScrollableFragment fragment1 = new ScrollableFragment();\n        ScrollableFragment fragment2 = new ScrollableFragment();\n        ScrollableFragment fragment3 = new ScrollableFragment();\n        ScrollableFragment fragment4 = new ScrollableFragment();\n        ScrollableFragment fragment5 = new ScrollableFragment();\n        ScrollableFragment fragment6 = new ScrollableFragment();\n        fragmentList.add(fragment);\n        fragmentList.add(fragment1);\n        fragmentList.add(fragment2);\n        fragmentList.add(fragment3);\n        fragmentList.add(fragment4);\n        fragmentList.add(fragment5);\n        fragmentList.add(fragment6);\n        adapterVP = new ViewPagerAdapter(getSupportFragmentManager());\n        vp.setAdapter(adapterVP);\n        tab.setupWithViewPager(vp);\n    }\n```\n\n如果到这一步运行app，发现tab标签的状态或者颜色没有选中的效果，检查viewpager的adapter是否重写了getPageTitle方法\n\n```\n public CharSequence getPageTitle(int position) {\n            return titles[position];\n        }\n```\n\n#####到这里已经完成了acticity的工作，但是我们还要实现标题栏渐变消失的效果。\n在android中大多数跟滚动有关的控件，都有自己的滚动监听事件，来让开发者调用，以实现高级的效果。\n\n而这里用的是ScrollableLayout控件，该控件内部也是基于ScrollView滚动，所以在内部给我们封装好了监听事件，直接调动监听方法就可以\n\n```\n  /*滚动监听*/\n    private void initOnClickScroll() {\n        scrollablelayout.setOnScrollListener(new ScrollableLayout.OnScrollListener() {\n            @Override\n            public void onScroll(int i, int i1) {\n                if (i >= i1) {\n                    title.setVisibility(View.GONE);\n                } else {\n                    title.setVisibility(View.VISIBLE);\n                }\n                //通过距离设置渐变效果\n                float scale = (float) i1-i;\n                float alpha = (255 * scale);\n                float alpha2 = scale/i1*150;\n                float alphaTv = scale / i1 * 255;\n                title.setBackgroundColor(Color.argb((int) alpha2, 0, 0, 0));\n                titleBarTitle.setTextColor(Color.argb((int) alphaTv, 198, 166, 102));\n                titleBarContent.setTextColor(Color.argb((int) alphaTv,198,166,102));\n            }\n        });\n    }\n```\nonScroll有两个属性，一个I是滚动的距离，是根据手势滑动的距离计算出的距离，i1是从开始滚动到header消失这之间的总距离。也就是固定的。\n\n为了区别，这里加了标题栏的显示和隐藏，当底部滚动视图置顶的时候，也就是i=i1的时候，就把标题栏隐藏掉。\n\n但是我们这里是需要一个渐变隐藏的效果，也就是让控件背景颜色从不透明到全透明的实时渐变的一个过程。\n\n颜色需要用到argb，有四个参数，第一个就是透明度，\n如果需要递增则用``255 * scale``\n递减用``scale ／ i1 * 255``\n需要半透的话，把255再除以2。\n\n#####Fragment里面需要操作的东西就少了\n\n两行代码就实现了headerview的添加\n\n```\n  private void initAdapter() {\n        View headerView = View.inflate(getContext(), R.layout.view_header, null);\n        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\n        recyclerView.setLayoutManager(layoutManager);\n        header.addView(headerView);\n        header.attachTo(recyclerView);\n        adapter = new FragmentAdapter(data, getActivity());\n        //分割线\n        recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL));\n        recyclerView.setAdapter(adapter);\n    }\n```\n\n\n\n------\n#####总结\n\n其实要实现这种效果的方法还有很多，比如利用Design库中的CoordinatorLayout，和AppBarLayout结合来用，也能实现折叠效果。\n\n包括GitHub也有一些开源的库可供我们选择使用，像ScrollableLayout 、ObservableScrollView这些都是非常优秀的框架。\n\n在实际项目中节省了很多开发时间。\n\n唯一的时间成本就是我们学习这些框架的时间，当熟练运用之后，这些看似复杂的东西，可能只需要短短的几分钟而已。\n\n-----\n#####关于\n本文所用到的开源库：\n\n```\n    //recyclerview列表\n    compile 'com.android.support:recyclerview-v7:25.0.0'\n    //design库，用于tablayout，CoordinatorLayout折叠布局等\n    compile 'com.android.support:design:25.0.0'\n    //一键绑定控件\n    compile 'com.jakewharton:butterknife:5.1.1'\n    compile 'com.android.support:appcompat-v7:25.0.0'\n    //网络请求\n    compile 'com.squareup.picasso:picasso:2.5.2'\n    //ConstraintLayout\n    compile 'com.android.support.constraint:constraint-layout:1.0.2'\n    //轮播控件\n    compile 'com.youth.banner:banner:1.4.9'\n    //刷新加载控件\n    compile 'com.cjj.materialrefeshlayout:library:1.3.0'\n    //折叠控件，解决了滚动冲突\n    compile 'com.github.cpoopc:scrollablelayoutlib:1.0.1'\n    //RecyclerViewHeader\n    compile 'com.bartoszlipinski:recyclerviewheader2:2.0.1'\n```\n\n最后附上Demo地址：https://github.com/wapchief/imitationLOL\n\n##### 新的分支\n添加了新的分支new，布局调整，使更接近于实际效果。\n调整了header的位置，为了实现悬浮消失的效果，将header从recyclerView独立出来，放在了activity，并且对头部标题栏做了优化，\n可以自助选择tab置顶的时候，标题栏是否消失。\n\n并且在标题栏选项中增加了一个彩蛋，是仿美团外卖配送时折叠的效果。","slug":"20170709_2","published":1,"updated":"2019-07-03T07:40:53.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxmzrkz0000gglu21kuwtz6n","content":"<p>不单单是掌上英雄联盟，像微博发现页也用了这样的布局，当滑动到一定距离的时候，自动隐藏轮播图，或者标题栏下面的布局。并且使tablayout置顶。</p>\n<a id=\"more\"></a>\n<p>与之相似的还有简书的个人页面也是这样的布局。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-bf0dc4e8d169d569.gif?imageMogr2/auto-orient/strip\" alt=\"lol.gif\"><br>图片处理的有些不清楚。建议下载安装包自行查看效果</p>\n<ul>\n<li><a href=\"https://github.com/wapchief/imitationLOL/raw/master/apk/app-debug.apk\" target=\"_blank\" rel=\"external\">安装包下载-2.83M</a></li>\n</ul>\n<p>#####首页大概分为几个部分</p>\n<ul>\n<li>状态栏</li>\n<li>标题栏</li>\n<li>轮播图</li>\n<li>切换的Tab</li>\n<li>资讯列表</li>\n<li>资讯列表头部推荐</li>\n<li>刷新控件</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-e2a9d0885f4acc57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480\" alt=\"lol.png\"></p>\n<p>整个页面是一个Activity，最外层是刷新控件，然后是标题栏和折叠布局ScrollableLayout。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;com.cjj.MaterialRefreshLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;RelativeLayout</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;com.cpoopc.scrollablelayoutlib.ScrollableLayout</div><div class=\"line\">            android:id=&quot;@+id/scrollablelayout&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_marginTop=&quot;16dp&quot;</div><div class=\"line\">            android:orientation=&quot;vertical&quot;&gt;</div><div class=\"line\">            </div><div class=\"line\">        &lt;/com.cpoopc.scrollablelayoutlib.ScrollableLayout&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;include layout=&quot;@layout/title_bar&quot; /&gt;</div><div class=\"line\">    &lt;/RelativeLayout&gt;</div><div class=\"line\">&lt;/com.cjj.MaterialRefreshLayout&gt;</div></pre></td></tr></table></figure>\n<p>ScrollableLayout里面嵌套了轮播图、tablayout、viewpager。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;com.cpoopc.scrollablelayoutlib.ScrollableLayout</div><div class=\"line\">    android:id=&quot;@+id/scrollablelayout&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_marginTop=&quot;16dp&quot;</div><div class=\"line\">    android:orientation=&quot;vertical&quot;&gt;</div><div class=\"line\">    &lt;!--header--&gt;</div><div class=\"line\">    &lt;com.youth.banner.Banner</div><div class=\"line\">        android:id=&quot;@+id/header&quot;</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;200dp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!--置顶的部分--&gt;</div><div class=\"line\">    &lt;android.support.design.widget.TabLayout</div><div class=\"line\">        android:id=&quot;@+id/tab&quot;</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;50dp&quot;</div><div class=\"line\">        android:background=&quot;@color/white&quot;</div><div class=\"line\">        app:tabIndicatorColor=&quot;@color/tab_select&quot;</div><div class=\"line\">        app:tabMode=&quot;scrollable&quot;</div><div class=\"line\">        app:tabSelectedTextColor=&quot;@color/tab_select&quot; /&gt;</div><div class=\"line\">    &lt;!--滚动视图--&gt;</div><div class=\"line\">    &lt;android.support.v4.view.ViewPager</div><div class=\"line\">        android:id=&quot;@+id/vp&quot;</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot; /&gt;</div><div class=\"line\">&lt;/com.cpoopc.scrollablelayoutlib.ScrollableLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>然后切换是通过tab和viewpager联动加载的Fragment<br>Fragment中列表用的是RecyclerView，然后再给RecyclerView添加了一个Header，实现推荐功能。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    &gt;</div><div class=\"line\">    &lt;RelativeLayout</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;android.support.v7.widget.RecyclerView</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:id=&quot;@+id/fragment_lv&quot;</div><div class=\"line\">            android:paddingLeft=&quot;12dp&quot;</div><div class=\"line\">            android:paddingRight=&quot;12dp&quot;</div><div class=\"line\">            android:nestedScrollingEnabled=&quot;false&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader</div><div class=\"line\">            android:id=&quot;@+id/header&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_gravity=&quot;&quot;</div><div class=\"line\">            android:nestedScrollingEnabled=&quot;false&quot;</div><div class=\"line\">            android:layout_height=&quot;60dp&quot;/&gt;</div><div class=\"line\">    &lt;/RelativeLayout&gt;</div><div class=\"line\">&lt;/ScrollView&gt;</div></pre></td></tr></table></figure></p>\n<p>#####创建布局需要注意的问题</p>\n<ul>\n<li><p>ScrollView和RecyclerView滚动冲突，造成滑动不流畅。<br>需要在RecyclerView设置android:nestedScrollingEnabled=”false”属性，使滚动事件交给ScrollView处理。</p>\n</li>\n<li><p>添加RecyclerViewHeader的时候，父布局只能识别RelativeLayout 、LinearLayout、和FrameLayout这三种控件。</p>\n</li>\n<li><p>ScrollableLayout子布局是固定的格式，分为三部分。</p>\n</li>\n</ul>\n<p>#####设置好布局后，进行数据的填充，先操作activty中的元素</p>\n<p>实例化控件直接用ButterKnife一键绑定了。直接加载控件数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void initView() &#123;</div><div class=\"line\">    //加载轮播图数据</div><div class=\"line\">    initBanner();</div><div class=\"line\">    //TabLayout</div><div class=\"line\">    initTabLayout();</div><div class=\"line\">    //创建Fragment</div><div class=\"line\">    initFragment();</div><div class=\"line\">    //监听滚动状态</div><div class=\"line\">    initOnClickScroll();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>随便在网上找了三张图片，使用Picasso框架完成图片的加载。<br>start开启轮播。<br>这时候打开app就能看到效果了。<br>该框架支持多种轮播样式风格，根据需要自己设置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*轮播*/</div><div class=\"line\">private void initBanner() &#123;</div><div class=\"line\">    //圆形指示器</div><div class=\"line\">    header.setBannerStyle(BannerConfig.CIRCLE_INDICATOR);</div><div class=\"line\">    //指示器居中</div><div class=\"line\">    header.setIndicatorGravity(BannerConfig.CENTER);</div><div class=\"line\">    img.add(&quot;http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png&quot;);</div><div class=\"line\">    img.add(&quot;http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png&quot;);</div><div class=\"line\">    img.add(&quot;http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png&quot;);</div><div class=\"line\">    header.setImageLoader(new ImageLoader() &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public void displayImage(Context context, Object o, ImageView imageView) &#123;</div><div class=\"line\">            Picasso.with(context)</div><div class=\"line\">                    .load(url)</div><div class=\"line\">                    .into(imageView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    header.setImages(img);</div><div class=\"line\">    header.start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后进行tablayout的初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private String[] titles = new String[]&#123;&quot;最新&quot;, &quot;专栏&quot;, &quot;官方&quot;, &quot;活动&quot;, &quot;攻略&quot;, &quot;娱乐&quot;, &quot;收藏&quot;&#125;;</div><div class=\"line\"></div><div class=\"line\">/*初始化tab标签*/</div><div class=\"line\">private void initTabLayout() &#123;</div><div class=\"line\"></div><div class=\"line\">    for (int i=0;i&lt;titles.length;i++)&#123;</div><div class=\"line\">        tab.addTab(tab.newTab().setText(titles[i]));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面只是装载了标签数据，通过setupWithViewPager关联viewpager</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*初始化Fragment*/</div><div class=\"line\">private void initFragment() &#123;</div><div class=\"line\"></div><div class=\"line\">    ScrollableFragment fragment = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment1 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment2 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment3 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment4 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment5 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment6 = new ScrollableFragment();</div><div class=\"line\">    fragmentList.add(fragment);</div><div class=\"line\">    fragmentList.add(fragment1);</div><div class=\"line\">    fragmentList.add(fragment2);</div><div class=\"line\">    fragmentList.add(fragment3);</div><div class=\"line\">    fragmentList.add(fragment4);</div><div class=\"line\">    fragmentList.add(fragment5);</div><div class=\"line\">    fragmentList.add(fragment6);</div><div class=\"line\">    adapterVP = new ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">    vp.setAdapter(adapterVP);</div><div class=\"line\">    tab.setupWithViewPager(vp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果到这一步运行app，发现tab标签的状态或者颜色没有选中的效果，检查viewpager的adapter是否重写了getPageTitle方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CharSequence getPageTitle(int position) &#123;</div><div class=\"line\">           return titles[position];</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>#####到这里已经完成了acticity的工作，但是我们还要实现标题栏渐变消失的效果。<br>在android中大多数跟滚动有关的控件，都有自己的滚动监听事件，来让开发者调用，以实现高级的效果。</p>\n<p>而这里用的是ScrollableLayout控件，该控件内部也是基于ScrollView滚动，所以在内部给我们封装好了监听事件，直接调动监听方法就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*滚动监听*/</div><div class=\"line\">  private void initOnClickScroll() &#123;</div><div class=\"line\">      scrollablelayout.setOnScrollListener(new ScrollableLayout.OnScrollListener() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onScroll(int i, int i1) &#123;</div><div class=\"line\">              if (i &gt;= i1) &#123;</div><div class=\"line\">                  title.setVisibility(View.GONE);</div><div class=\"line\">              &#125; else &#123;</div><div class=\"line\">                  title.setVisibility(View.VISIBLE);</div><div class=\"line\">              &#125;</div><div class=\"line\">              //通过距离设置渐变效果</div><div class=\"line\">              float scale = (float) i1-i;</div><div class=\"line\">              float alpha = (255 * scale);</div><div class=\"line\">              float alpha2 = scale/i1*150;</div><div class=\"line\">              float alphaTv = scale / i1 * 255;</div><div class=\"line\">              title.setBackgroundColor(Color.argb((int) alpha2, 0, 0, 0));</div><div class=\"line\">              titleBarTitle.setTextColor(Color.argb((int) alphaTv, 198, 166, 102));</div><div class=\"line\">              titleBarContent.setTextColor(Color.argb((int) alphaTv,198,166,102));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>onScroll有两个属性，一个I是滚动的距离，是根据手势滑动的距离计算出的距离，i1是从开始滚动到header消失这之间的总距离。也就是固定的。</p>\n<p>为了区别，这里加了标题栏的显示和隐藏，当底部滚动视图置顶的时候，也就是i=i1的时候，就把标题栏隐藏掉。</p>\n<p>但是我们这里是需要一个渐变隐藏的效果，也就是让控件背景颜色从不透明到全透明的实时渐变的一个过程。</p>\n<p>颜色需要用到argb，有四个参数，第一个就是透明度，<br>如果需要递增则用<code>255 * scale</code><br>递减用<code>scale ／ i1 * 255</code><br>需要半透的话，把255再除以2。</p>\n<p>#####Fragment里面需要操作的东西就少了</p>\n<p>两行代码就实现了headerview的添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void initAdapter() &#123;</div><div class=\"line\">      View headerView = View.inflate(getContext(), R.layout.view_header, null);</div><div class=\"line\">      LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());</div><div class=\"line\">      recyclerView.setLayoutManager(layoutManager);</div><div class=\"line\">      header.addView(headerView);</div><div class=\"line\">      header.attachTo(recyclerView);</div><div class=\"line\">      adapter = new FragmentAdapter(data, getActivity());</div><div class=\"line\">      //分割线</div><div class=\"line\">      recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL));</div><div class=\"line\">      recyclerView.setAdapter(adapter);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>#####总结</p>\n<p>其实要实现这种效果的方法还有很多，比如利用Design库中的CoordinatorLayout，和AppBarLayout结合来用，也能实现折叠效果。</p>\n<p>包括GitHub也有一些开源的库可供我们选择使用，像ScrollableLayout 、ObservableScrollView这些都是非常优秀的框架。</p>\n<p>在实际项目中节省了很多开发时间。</p>\n<p>唯一的时间成本就是我们学习这些框架的时间，当熟练运用之后，这些看似复杂的东西，可能只需要短短的几分钟而已。</p>\n<hr>\n<p>#####关于<br>本文所用到的开源库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">//recyclerview列表</div><div class=\"line\">compile &apos;com.android.support:recyclerview-v7:25.0.0&apos;</div><div class=\"line\">//design库，用于tablayout，CoordinatorLayout折叠布局等</div><div class=\"line\">compile &apos;com.android.support:design:25.0.0&apos;</div><div class=\"line\">//一键绑定控件</div><div class=\"line\">compile &apos;com.jakewharton:butterknife:5.1.1&apos;</div><div class=\"line\">compile &apos;com.android.support:appcompat-v7:25.0.0&apos;</div><div class=\"line\">//网络请求</div><div class=\"line\">compile &apos;com.squareup.picasso:picasso:2.5.2&apos;</div><div class=\"line\">//ConstraintLayout</div><div class=\"line\">compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;</div><div class=\"line\">//轮播控件</div><div class=\"line\">compile &apos;com.youth.banner:banner:1.4.9&apos;</div><div class=\"line\">//刷新加载控件</div><div class=\"line\">compile &apos;com.cjj.materialrefeshlayout:library:1.3.0&apos;</div><div class=\"line\">//折叠控件，解决了滚动冲突</div><div class=\"line\">compile &apos;com.github.cpoopc:scrollablelayoutlib:1.0.1&apos;</div><div class=\"line\">//RecyclerViewHeader</div><div class=\"line\">compile &apos;com.bartoszlipinski:recyclerviewheader2:2.0.1&apos;</div></pre></td></tr></table></figure>\n<p>最后附上Demo地址：<a href=\"https://github.com/wapchief/imitationLOL\" target=\"_blank\" rel=\"external\">https://github.com/wapchief/imitationLOL</a></p>\n<h5 id=\"新的分支\"><a href=\"#新的分支\" class=\"headerlink\" title=\"新的分支\"></a>新的分支</h5><p>添加了新的分支new，布局调整，使更接近于实际效果。<br>调整了header的位置，为了实现悬浮消失的效果，将header从recyclerView独立出来，放在了activity，并且对头部标题栏做了优化，<br>可以自助选择tab置顶的时候，标题栏是否消失。</p>\n<p>并且在标题栏选项中增加了一个彩蛋，是仿美团外卖配送时折叠的效果。</p>\n","site":{"data":{}},"excerpt":"<p>不单单是掌上英雄联盟，像微博发现页也用了这样的布局，当滑动到一定距离的时候，自动隐藏轮播图，或者标题栏下面的布局。并且使tablayout置顶。</p>","more":"<p>与之相似的还有简书的个人页面也是这样的布局。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-bf0dc4e8d169d569.gif?imageMogr2/auto-orient/strip\" alt=\"lol.gif\"><br>图片处理的有些不清楚。建议下载安装包自行查看效果</p>\n<ul>\n<li><a href=\"https://github.com/wapchief/imitationLOL/raw/master/apk/app-debug.apk\" target=\"_blank\" rel=\"external\">安装包下载-2.83M</a></li>\n</ul>\n<p>#####首页大概分为几个部分</p>\n<ul>\n<li>状态栏</li>\n<li>标题栏</li>\n<li>轮播图</li>\n<li>切换的Tab</li>\n<li>资讯列表</li>\n<li>资讯列表头部推荐</li>\n<li>刷新控件</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-e2a9d0885f4acc57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480\" alt=\"lol.png\"></p>\n<p>整个页面是一个Activity，最外层是刷新控件，然后是标题栏和折叠布局ScrollableLayout。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;com.cjj.MaterialRefreshLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;RelativeLayout</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;com.cpoopc.scrollablelayoutlib.ScrollableLayout</div><div class=\"line\">            android:id=&quot;@+id/scrollablelayout&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_marginTop=&quot;16dp&quot;</div><div class=\"line\">            android:orientation=&quot;vertical&quot;&gt;</div><div class=\"line\">            </div><div class=\"line\">        &lt;/com.cpoopc.scrollablelayoutlib.ScrollableLayout&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;include layout=&quot;@layout/title_bar&quot; /&gt;</div><div class=\"line\">    &lt;/RelativeLayout&gt;</div><div class=\"line\">&lt;/com.cjj.MaterialRefreshLayout&gt;</div></pre></td></tr></table></figure>\n<p>ScrollableLayout里面嵌套了轮播图、tablayout、viewpager。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;com.cpoopc.scrollablelayoutlib.ScrollableLayout</div><div class=\"line\">    android:id=&quot;@+id/scrollablelayout&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_marginTop=&quot;16dp&quot;</div><div class=\"line\">    android:orientation=&quot;vertical&quot;&gt;</div><div class=\"line\">    &lt;!--header--&gt;</div><div class=\"line\">    &lt;com.youth.banner.Banner</div><div class=\"line\">        android:id=&quot;@+id/header&quot;</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;200dp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!--置顶的部分--&gt;</div><div class=\"line\">    &lt;android.support.design.widget.TabLayout</div><div class=\"line\">        android:id=&quot;@+id/tab&quot;</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;50dp&quot;</div><div class=\"line\">        android:background=&quot;@color/white&quot;</div><div class=\"line\">        app:tabIndicatorColor=&quot;@color/tab_select&quot;</div><div class=\"line\">        app:tabMode=&quot;scrollable&quot;</div><div class=\"line\">        app:tabSelectedTextColor=&quot;@color/tab_select&quot; /&gt;</div><div class=\"line\">    &lt;!--滚动视图--&gt;</div><div class=\"line\">    &lt;android.support.v4.view.ViewPager</div><div class=\"line\">        android:id=&quot;@+id/vp&quot;</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot; /&gt;</div><div class=\"line\">&lt;/com.cpoopc.scrollablelayoutlib.ScrollableLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>然后切换是通过tab和viewpager联动加载的Fragment<br>Fragment中列表用的是RecyclerView，然后再给RecyclerView添加了一个Header，实现推荐功能。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    &gt;</div><div class=\"line\">    &lt;RelativeLayout</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;android.support.v7.widget.RecyclerView</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:id=&quot;@+id/fragment_lv&quot;</div><div class=\"line\">            android:paddingLeft=&quot;12dp&quot;</div><div class=\"line\">            android:paddingRight=&quot;12dp&quot;</div><div class=\"line\">            android:nestedScrollingEnabled=&quot;false&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader</div><div class=\"line\">            android:id=&quot;@+id/header&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_gravity=&quot;&quot;</div><div class=\"line\">            android:nestedScrollingEnabled=&quot;false&quot;</div><div class=\"line\">            android:layout_height=&quot;60dp&quot;/&gt;</div><div class=\"line\">    &lt;/RelativeLayout&gt;</div><div class=\"line\">&lt;/ScrollView&gt;</div></pre></td></tr></table></figure></p>\n<p>#####创建布局需要注意的问题</p>\n<ul>\n<li><p>ScrollView和RecyclerView滚动冲突，造成滑动不流畅。<br>需要在RecyclerView设置android:nestedScrollingEnabled=”false”属性，使滚动事件交给ScrollView处理。</p>\n</li>\n<li><p>添加RecyclerViewHeader的时候，父布局只能识别RelativeLayout 、LinearLayout、和FrameLayout这三种控件。</p>\n</li>\n<li><p>ScrollableLayout子布局是固定的格式，分为三部分。</p>\n</li>\n</ul>\n<p>#####设置好布局后，进行数据的填充，先操作activty中的元素</p>\n<p>实例化控件直接用ButterKnife一键绑定了。直接加载控件数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void initView() &#123;</div><div class=\"line\">    //加载轮播图数据</div><div class=\"line\">    initBanner();</div><div class=\"line\">    //TabLayout</div><div class=\"line\">    initTabLayout();</div><div class=\"line\">    //创建Fragment</div><div class=\"line\">    initFragment();</div><div class=\"line\">    //监听滚动状态</div><div class=\"line\">    initOnClickScroll();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>随便在网上找了三张图片，使用Picasso框架完成图片的加载。<br>start开启轮播。<br>这时候打开app就能看到效果了。<br>该框架支持多种轮播样式风格，根据需要自己设置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*轮播*/</div><div class=\"line\">private void initBanner() &#123;</div><div class=\"line\">    //圆形指示器</div><div class=\"line\">    header.setBannerStyle(BannerConfig.CIRCLE_INDICATOR);</div><div class=\"line\">    //指示器居中</div><div class=\"line\">    header.setIndicatorGravity(BannerConfig.CENTER);</div><div class=\"line\">    img.add(&quot;http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png&quot;);</div><div class=\"line\">    img.add(&quot;http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png&quot;);</div><div class=\"line\">    img.add(&quot;http://m.beequick.cn/static/bee/img/m/boot_logo-275a61e3.png&quot;);</div><div class=\"line\">    header.setImageLoader(new ImageLoader() &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public void displayImage(Context context, Object o, ImageView imageView) &#123;</div><div class=\"line\">            Picasso.with(context)</div><div class=\"line\">                    .load(url)</div><div class=\"line\">                    .into(imageView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    header.setImages(img);</div><div class=\"line\">    header.start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后进行tablayout的初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private String[] titles = new String[]&#123;&quot;最新&quot;, &quot;专栏&quot;, &quot;官方&quot;, &quot;活动&quot;, &quot;攻略&quot;, &quot;娱乐&quot;, &quot;收藏&quot;&#125;;</div><div class=\"line\"></div><div class=\"line\">/*初始化tab标签*/</div><div class=\"line\">private void initTabLayout() &#123;</div><div class=\"line\"></div><div class=\"line\">    for (int i=0;i&lt;titles.length;i++)&#123;</div><div class=\"line\">        tab.addTab(tab.newTab().setText(titles[i]));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面只是装载了标签数据，通过setupWithViewPager关联viewpager</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*初始化Fragment*/</div><div class=\"line\">private void initFragment() &#123;</div><div class=\"line\"></div><div class=\"line\">    ScrollableFragment fragment = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment1 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment2 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment3 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment4 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment5 = new ScrollableFragment();</div><div class=\"line\">    ScrollableFragment fragment6 = new ScrollableFragment();</div><div class=\"line\">    fragmentList.add(fragment);</div><div class=\"line\">    fragmentList.add(fragment1);</div><div class=\"line\">    fragmentList.add(fragment2);</div><div class=\"line\">    fragmentList.add(fragment3);</div><div class=\"line\">    fragmentList.add(fragment4);</div><div class=\"line\">    fragmentList.add(fragment5);</div><div class=\"line\">    fragmentList.add(fragment6);</div><div class=\"line\">    adapterVP = new ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">    vp.setAdapter(adapterVP);</div><div class=\"line\">    tab.setupWithViewPager(vp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果到这一步运行app，发现tab标签的状态或者颜色没有选中的效果，检查viewpager的adapter是否重写了getPageTitle方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CharSequence getPageTitle(int position) &#123;</div><div class=\"line\">           return titles[position];</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>#####到这里已经完成了acticity的工作，但是我们还要实现标题栏渐变消失的效果。<br>在android中大多数跟滚动有关的控件，都有自己的滚动监听事件，来让开发者调用，以实现高级的效果。</p>\n<p>而这里用的是ScrollableLayout控件，该控件内部也是基于ScrollView滚动，所以在内部给我们封装好了监听事件，直接调动监听方法就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*滚动监听*/</div><div class=\"line\">  private void initOnClickScroll() &#123;</div><div class=\"line\">      scrollablelayout.setOnScrollListener(new ScrollableLayout.OnScrollListener() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onScroll(int i, int i1) &#123;</div><div class=\"line\">              if (i &gt;= i1) &#123;</div><div class=\"line\">                  title.setVisibility(View.GONE);</div><div class=\"line\">              &#125; else &#123;</div><div class=\"line\">                  title.setVisibility(View.VISIBLE);</div><div class=\"line\">              &#125;</div><div class=\"line\">              //通过距离设置渐变效果</div><div class=\"line\">              float scale = (float) i1-i;</div><div class=\"line\">              float alpha = (255 * scale);</div><div class=\"line\">              float alpha2 = scale/i1*150;</div><div class=\"line\">              float alphaTv = scale / i1 * 255;</div><div class=\"line\">              title.setBackgroundColor(Color.argb((int) alpha2, 0, 0, 0));</div><div class=\"line\">              titleBarTitle.setTextColor(Color.argb((int) alphaTv, 198, 166, 102));</div><div class=\"line\">              titleBarContent.setTextColor(Color.argb((int) alphaTv,198,166,102));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>onScroll有两个属性，一个I是滚动的距离，是根据手势滑动的距离计算出的距离，i1是从开始滚动到header消失这之间的总距离。也就是固定的。</p>\n<p>为了区别，这里加了标题栏的显示和隐藏，当底部滚动视图置顶的时候，也就是i=i1的时候，就把标题栏隐藏掉。</p>\n<p>但是我们这里是需要一个渐变隐藏的效果，也就是让控件背景颜色从不透明到全透明的实时渐变的一个过程。</p>\n<p>颜色需要用到argb，有四个参数，第一个就是透明度，<br>如果需要递增则用<code>255 * scale</code><br>递减用<code>scale ／ i1 * 255</code><br>需要半透的话，把255再除以2。</p>\n<p>#####Fragment里面需要操作的东西就少了</p>\n<p>两行代码就实现了headerview的添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void initAdapter() &#123;</div><div class=\"line\">      View headerView = View.inflate(getContext(), R.layout.view_header, null);</div><div class=\"line\">      LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());</div><div class=\"line\">      recyclerView.setLayoutManager(layoutManager);</div><div class=\"line\">      header.addView(headerView);</div><div class=\"line\">      header.attachTo(recyclerView);</div><div class=\"line\">      adapter = new FragmentAdapter(data, getActivity());</div><div class=\"line\">      //分割线</div><div class=\"line\">      recyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL));</div><div class=\"line\">      recyclerView.setAdapter(adapter);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>#####总结</p>\n<p>其实要实现这种效果的方法还有很多，比如利用Design库中的CoordinatorLayout，和AppBarLayout结合来用，也能实现折叠效果。</p>\n<p>包括GitHub也有一些开源的库可供我们选择使用，像ScrollableLayout 、ObservableScrollView这些都是非常优秀的框架。</p>\n<p>在实际项目中节省了很多开发时间。</p>\n<p>唯一的时间成本就是我们学习这些框架的时间，当熟练运用之后，这些看似复杂的东西，可能只需要短短的几分钟而已。</p>\n<hr>\n<p>#####关于<br>本文所用到的开源库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">//recyclerview列表</div><div class=\"line\">compile &apos;com.android.support:recyclerview-v7:25.0.0&apos;</div><div class=\"line\">//design库，用于tablayout，CoordinatorLayout折叠布局等</div><div class=\"line\">compile &apos;com.android.support:design:25.0.0&apos;</div><div class=\"line\">//一键绑定控件</div><div class=\"line\">compile &apos;com.jakewharton:butterknife:5.1.1&apos;</div><div class=\"line\">compile &apos;com.android.support:appcompat-v7:25.0.0&apos;</div><div class=\"line\">//网络请求</div><div class=\"line\">compile &apos;com.squareup.picasso:picasso:2.5.2&apos;</div><div class=\"line\">//ConstraintLayout</div><div class=\"line\">compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;</div><div class=\"line\">//轮播控件</div><div class=\"line\">compile &apos;com.youth.banner:banner:1.4.9&apos;</div><div class=\"line\">//刷新加载控件</div><div class=\"line\">compile &apos;com.cjj.materialrefeshlayout:library:1.3.0&apos;</div><div class=\"line\">//折叠控件，解决了滚动冲突</div><div class=\"line\">compile &apos;com.github.cpoopc:scrollablelayoutlib:1.0.1&apos;</div><div class=\"line\">//RecyclerViewHeader</div><div class=\"line\">compile &apos;com.bartoszlipinski:recyclerviewheader2:2.0.1&apos;</div></pre></td></tr></table></figure>\n<p>最后附上Demo地址：<a href=\"https://github.com/wapchief/imitationLOL\" target=\"_blank\" rel=\"external\">https://github.com/wapchief/imitationLOL</a></p>\n<h5 id=\"新的分支\"><a href=\"#新的分支\" class=\"headerlink\" title=\"新的分支\"></a>新的分支</h5><p>添加了新的分支new，布局调整，使更接近于实际效果。<br>调整了header的位置，为了实现悬浮消失的效果，将header从recyclerView独立出来，放在了activity，并且对头部标题栏做了优化，<br>可以自助选择tab置顶的时候，标题栏是否消失。</p>\n<p>并且在标题栏选项中增加了一个彩蛋，是仿美团外卖配送时折叠的效果。</p>"},{"title":"ListView调用按钮删除某一行item","date":"2019-07-03T07:40:53.349Z","description":null,"toc":true,"_content":"\nListView布局包括checkbox(复选框)、img、title（商品名称）、type（分类）、两个Button（加减）、三个textview（原价，单价，数量），imgDelete（delete）\n<!-- more -->\n\n\n![这里写图片描述](http://img.blog.csdn.net/20160924180402067)\n\nxml：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"90dp\"\n    android:background=\"@color/white\"\n    android:gravity=\"center_vertical\"\n    android:orientation=\"horizontal\">\n    <!-- 小对勾的布局 -->\n    <CheckBox\n        android:id=\"@+id/shopping_lv_checkbox\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginLeft=\"@dimen/dp_10\"\n        android:focusable=\"false\"\n        android:focusableInTouchMode=\"false\" />\n    <!-- 图片布局 -->\n    <ImageView\n        android:id=\"@+id/shopping_lv_img\"\n        android:layout_width=\"64dp\"\n        android:layout_height=\"64dp\"\n        android:layout_margin=\"10dp\"\n        android:scaleType=\"centerCrop\"\n        android:src=\"@mipmap/tuceng1\" />\n    <!-- 商品名称和价格的布局 -->\n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\">\n        <!-- 商品名称的布局 -->\n        <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"@dimen/dp_5\"\n            android:gravity=\"center_vertical\">\n\n            <TextView\n                android:id=\"@+id/shopping_lv_title\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"连衣裙女夏季\"\n                android:textSize=\"@dimen/sp_14\" />\n\n            <TextView\n                android:id=\"@+id/shopping_lv_moneyDel\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentEnd=\"true\"\n                android:layout_alignParentTop=\"true\"\n                android:layout_marginEnd=\"20dp\"\n                android:text=\"1111\"\n                android:textSize=\"@dimen/sp_14\" />\n\n        </RelativeLayout>\n        <!-- 价格的布局 -->\n        <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"30dp\"\n            android:gravity=\"center_vertical\"\n            android:orientation=\"horizontal\">\n\n            <TextView\n                android:id=\"@+id/shopping_lv_content\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"10dp\"\n                android:text=\"500g\"\n                android:textSize=\"12sp\" />\n\n            <TextView\n                android:id=\"@+id/shopping_lv_money\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentEnd=\"true\"\n                android:layout_alignTop=\"@+id/shopping_lv_content\"\n                android:layout_gravity=\"bottom\"\n                android:layout_marginEnd=\"20dp\"\n                android:text=\"￥66\"\n                android:textColor=\"@color/balance_bg\"\n                android:textSize=\"16sp\" />\n        </RelativeLayout>\n\n        <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"33dp\"\n            android:gravity=\"center_vertical\"\n            android:orientation=\"horizontal\">\n            <!-- 加号 -->\n            <ImageView\n                android:id=\"@+id/shopping_lv_sub\"\n                android:layout_width=\"30dp\"\n                android:layout_height=\"30dp\"\n                android:background=\"@drawable/add_button_shape\"\n                android:src=\"@mipmap/icon_minus_3x\" />\n\n            <TextView\n                android:id=\"@+id/shopping_lv_number\"\n                android:layout_width=\"30dp\"\n                android:layout_height=\"wrap_content\"\n                android:layout_centerVertical=\"true\"\n                android:layout_marginLeft=\"@dimen/dp_10\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_toEndOf=\"@+id/shopping_lv_sub\"\n                android:gravity=\"center\"\n                android:inputType=\"\"\n                android:text=\"1\"\n                android:textSize=\"13sp\" />\n            <!-- 减号-->\n            <ImageView\n                android:id=\"@+id/shopping_lv_add\"\n                android:layout_width=\"30dp\"\n                android:layout_height=\"30dp\"\n                android:layout_alignTop=\"@+id/shopping_lv_sub\"\n                android:layout_marginLeft=\"@dimen/dp_10\"\n                android:layout_toEndOf=\"@+id/shopping_lv_number\"\n                android:background=\"@drawable/add_button_shape\"\n                android:src=\"@mipmap/icon_add_3x\" />\n\n            <ImageView\n                android:id=\"@+id/shopping_lv_delete\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentEnd=\"true\"\n                android:layout_centerVertical=\"true\"\n                android:layout_marginEnd=\"20dp\"\n                android:layout_marginLeft=\"@dimen/dp_110\"\n                android:layout_marginRight=\"@dimen/dp_15\"\n                android:src=\"@mipmap/btn_delete_3x\" />\n        </RelativeLayout>\n\n\n    </LinearLayout>\n</LinearLayout>\n\n```\n获取listview中的imgDelete控件，执行删除单条纪录的操作。\nShoppingCartListViewAdapter：\n \n```\n private View.OnClickListener onDelItem;//删除单条item的接口\n\n...\n\n\n  public View getView(final int i, View view, ViewGroup viewGroup) {\n        ViewHolder holder = null;\n        if (view == null) {\n            holder = new ViewHolder();\n            view = LayoutInflater.from(this.context).inflate(R.layout.shopping_listview_item, null, true);\n          //实例化item获取控件\n            holder.shopping_lv_delete = (ImageView) view.findViewById(R.id.shopping_lv_delete);\n            //设置回调监听\n            holder. shopping_lv_delete.setOnClickListener(onDelItem);\n            holder.shopping_lv_delete.setTag(i);\n            view.setTag(holder);\n\n        } else {\n            holder = (ViewHolder) view.getTag();\n        }\n\n\n class ViewHolder {\n        \n        ImageView shopping_lv_delete;\n    }\n    \n    /**\n    *定义监听接口\n    */\n public void setOnDelItem(View.OnClickListener onDelItem) {\n        this.onDelItem = onDelItem;\n    }\n```\nActivity：\n\n\n```\nprivate ShoppingCartListViewAdapter adapter;\nprivate ListView shopping_listview;\nprivate List<ShoppingCartListView> list = new ArrayList<ShoppingCartListView>();\n\n...\n\nshopping_lv_delete = (ImageView) findViewById(R.id.shopping_lv_delete);\nshopping_lv_delete.setOnClickListener(this);\n```\n\nonCreate方法中设置适配器的监听，\n\n```\n adapter = new ShoppingCartListViewAdapter(getActivity(), list);\n        shopping_listview.setAdapter(adapter);\n        **adapter.setOnDelItem(this);**\n```\n通过Tag的position，获取当前点击的item，\n这里使用了popupMenu。在点击删除的时候会弹出确认删除框\n\n```\n\n    if (tag != null && tag instanceof Integer) { \n                    int position = (Integer) tag;\n                    showPopupMenu(view, position);\n                }\n```\n\n\n```\n    //删除弹窗\n    public void showPopupMenu(final View view, final int position) {\n        final PopupMenu popup = new PopupMenu(getActivity(), view);\n        popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());\n        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem menuItem) {\n                switch (menuItem.getItemId()) {\n                    case R.id.remove:\n                        list.remove(position);\n                        adapter.notifyDataSetChanged();\n                        break;\n                }\n                return false;\n            }\n        });\n        popup.show();\n    }\n```\npopup\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <item\n            android:id=\"@+id/remove\"\n            android:title=\"@string/delete\"/>\n    </menu>\n\n```","source":"_posts/20161004.md","raw":"---\ntitle: ListView调用按钮删除某一行item\ndate: 2017年4月25日13:15:08\ncategories: \ntags: [android] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \ntoc: true\n\n---\n\nListView布局包括checkbox(复选框)、img、title（商品名称）、type（分类）、两个Button（加减）、三个textview（原价，单价，数量），imgDelete（delete）\n<!-- more -->\n\n\n![这里写图片描述](http://img.blog.csdn.net/20160924180402067)\n\nxml：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"90dp\"\n    android:background=\"@color/white\"\n    android:gravity=\"center_vertical\"\n    android:orientation=\"horizontal\">\n    <!-- 小对勾的布局 -->\n    <CheckBox\n        android:id=\"@+id/shopping_lv_checkbox\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginLeft=\"@dimen/dp_10\"\n        android:focusable=\"false\"\n        android:focusableInTouchMode=\"false\" />\n    <!-- 图片布局 -->\n    <ImageView\n        android:id=\"@+id/shopping_lv_img\"\n        android:layout_width=\"64dp\"\n        android:layout_height=\"64dp\"\n        android:layout_margin=\"10dp\"\n        android:scaleType=\"centerCrop\"\n        android:src=\"@mipmap/tuceng1\" />\n    <!-- 商品名称和价格的布局 -->\n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\">\n        <!-- 商品名称的布局 -->\n        <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"@dimen/dp_5\"\n            android:gravity=\"center_vertical\">\n\n            <TextView\n                android:id=\"@+id/shopping_lv_title\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"连衣裙女夏季\"\n                android:textSize=\"@dimen/sp_14\" />\n\n            <TextView\n                android:id=\"@+id/shopping_lv_moneyDel\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentEnd=\"true\"\n                android:layout_alignParentTop=\"true\"\n                android:layout_marginEnd=\"20dp\"\n                android:text=\"1111\"\n                android:textSize=\"@dimen/sp_14\" />\n\n        </RelativeLayout>\n        <!-- 价格的布局 -->\n        <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"30dp\"\n            android:gravity=\"center_vertical\"\n            android:orientation=\"horizontal\">\n\n            <TextView\n                android:id=\"@+id/shopping_lv_content\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"10dp\"\n                android:text=\"500g\"\n                android:textSize=\"12sp\" />\n\n            <TextView\n                android:id=\"@+id/shopping_lv_money\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentEnd=\"true\"\n                android:layout_alignTop=\"@+id/shopping_lv_content\"\n                android:layout_gravity=\"bottom\"\n                android:layout_marginEnd=\"20dp\"\n                android:text=\"￥66\"\n                android:textColor=\"@color/balance_bg\"\n                android:textSize=\"16sp\" />\n        </RelativeLayout>\n\n        <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"33dp\"\n            android:gravity=\"center_vertical\"\n            android:orientation=\"horizontal\">\n            <!-- 加号 -->\n            <ImageView\n                android:id=\"@+id/shopping_lv_sub\"\n                android:layout_width=\"30dp\"\n                android:layout_height=\"30dp\"\n                android:background=\"@drawable/add_button_shape\"\n                android:src=\"@mipmap/icon_minus_3x\" />\n\n            <TextView\n                android:id=\"@+id/shopping_lv_number\"\n                android:layout_width=\"30dp\"\n                android:layout_height=\"wrap_content\"\n                android:layout_centerVertical=\"true\"\n                android:layout_marginLeft=\"@dimen/dp_10\"\n                android:layout_marginStart=\"10dp\"\n                android:layout_toEndOf=\"@+id/shopping_lv_sub\"\n                android:gravity=\"center\"\n                android:inputType=\"\"\n                android:text=\"1\"\n                android:textSize=\"13sp\" />\n            <!-- 减号-->\n            <ImageView\n                android:id=\"@+id/shopping_lv_add\"\n                android:layout_width=\"30dp\"\n                android:layout_height=\"30dp\"\n                android:layout_alignTop=\"@+id/shopping_lv_sub\"\n                android:layout_marginLeft=\"@dimen/dp_10\"\n                android:layout_toEndOf=\"@+id/shopping_lv_number\"\n                android:background=\"@drawable/add_button_shape\"\n                android:src=\"@mipmap/icon_add_3x\" />\n\n            <ImageView\n                android:id=\"@+id/shopping_lv_delete\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentEnd=\"true\"\n                android:layout_centerVertical=\"true\"\n                android:layout_marginEnd=\"20dp\"\n                android:layout_marginLeft=\"@dimen/dp_110\"\n                android:layout_marginRight=\"@dimen/dp_15\"\n                android:src=\"@mipmap/btn_delete_3x\" />\n        </RelativeLayout>\n\n\n    </LinearLayout>\n</LinearLayout>\n\n```\n获取listview中的imgDelete控件，执行删除单条纪录的操作。\nShoppingCartListViewAdapter：\n \n```\n private View.OnClickListener onDelItem;//删除单条item的接口\n\n...\n\n\n  public View getView(final int i, View view, ViewGroup viewGroup) {\n        ViewHolder holder = null;\n        if (view == null) {\n            holder = new ViewHolder();\n            view = LayoutInflater.from(this.context).inflate(R.layout.shopping_listview_item, null, true);\n          //实例化item获取控件\n            holder.shopping_lv_delete = (ImageView) view.findViewById(R.id.shopping_lv_delete);\n            //设置回调监听\n            holder. shopping_lv_delete.setOnClickListener(onDelItem);\n            holder.shopping_lv_delete.setTag(i);\n            view.setTag(holder);\n\n        } else {\n            holder = (ViewHolder) view.getTag();\n        }\n\n\n class ViewHolder {\n        \n        ImageView shopping_lv_delete;\n    }\n    \n    /**\n    *定义监听接口\n    */\n public void setOnDelItem(View.OnClickListener onDelItem) {\n        this.onDelItem = onDelItem;\n    }\n```\nActivity：\n\n\n```\nprivate ShoppingCartListViewAdapter adapter;\nprivate ListView shopping_listview;\nprivate List<ShoppingCartListView> list = new ArrayList<ShoppingCartListView>();\n\n...\n\nshopping_lv_delete = (ImageView) findViewById(R.id.shopping_lv_delete);\nshopping_lv_delete.setOnClickListener(this);\n```\n\nonCreate方法中设置适配器的监听，\n\n```\n adapter = new ShoppingCartListViewAdapter(getActivity(), list);\n        shopping_listview.setAdapter(adapter);\n        **adapter.setOnDelItem(this);**\n```\n通过Tag的position，获取当前点击的item，\n这里使用了popupMenu。在点击删除的时候会弹出确认删除框\n\n```\n\n    if (tag != null && tag instanceof Integer) { \n                    int position = (Integer) tag;\n                    showPopupMenu(view, position);\n                }\n```\n\n\n```\n    //删除弹窗\n    public void showPopupMenu(final View view, final int position) {\n        final PopupMenu popup = new PopupMenu(getActivity(), view);\n        popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());\n        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem menuItem) {\n                switch (menuItem.getItemId()) {\n                    case R.id.remove:\n                        list.remove(position);\n                        adapter.notifyDataSetChanged();\n                        break;\n                }\n                return false;\n            }\n        });\n        popup.show();\n    }\n```\npopup\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <item\n            android:id=\"@+id/remove\"\n            android:title=\"@string/delete\"/>\n    </menu>\n\n```","slug":"20161004","published":1,"updated":"2019-07-03T07:40:53.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxmzrkz1000hglu2mm76z0hz","content":"<p>ListView布局包括checkbox(复选框)、img、title（商品名称）、type（分类）、两个Button（加减）、三个textview（原价，单价，数量），imgDelete（delete）<br><a id=\"more\"></a></p>\n<p><img src=\"http://img.blog.csdn.net/20160924180402067\" alt=\"这里写图片描述\"></p>\n<p>xml：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;90dp&quot;</div><div class=\"line\">    android:background=&quot;@color/white&quot;</div><div class=\"line\">    android:gravity=&quot;center_vertical&quot;</div><div class=\"line\">    android:orientation=&quot;horizontal&quot;&gt;</div><div class=\"line\">    &lt;!-- 小对勾的布局 --&gt;</div><div class=\"line\">    &lt;CheckBox</div><div class=\"line\">        android:id=&quot;@+id/shopping_lv_checkbox&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_marginLeft=&quot;@dimen/dp_10&quot;</div><div class=\"line\">        android:focusable=&quot;false&quot;</div><div class=\"line\">        android:focusableInTouchMode=&quot;false&quot; /&gt;</div><div class=\"line\">    &lt;!-- 图片布局 --&gt;</div><div class=\"line\">    &lt;ImageView</div><div class=\"line\">        android:id=&quot;@+id/shopping_lv_img&quot;</div><div class=\"line\">        android:layout_width=&quot;64dp&quot;</div><div class=\"line\">        android:layout_height=&quot;64dp&quot;</div><div class=\"line\">        android:layout_margin=&quot;10dp&quot;</div><div class=\"line\">        android:scaleType=&quot;centerCrop&quot;</div><div class=\"line\">        android:src=&quot;@mipmap/tuceng1&quot; /&gt;</div><div class=\"line\">    &lt;!-- 商品名称和价格的布局 --&gt;</div><div class=\"line\">    &lt;LinearLayout</div><div class=\"line\">        android:layout_width=&quot;fill_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:orientation=&quot;vertical&quot;&gt;</div><div class=\"line\">        &lt;!-- 商品名称的布局 --&gt;</div><div class=\"line\">        &lt;RelativeLayout</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">            android:layout_marginTop=&quot;@dimen/dp_5&quot;</div><div class=\"line\">            android:gravity=&quot;center_vertical&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_title&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:text=&quot;连衣裙女夏季&quot;</div><div class=\"line\">                android:textSize=&quot;@dimen/sp_14&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_moneyDel&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_alignParentEnd=&quot;true&quot;</div><div class=\"line\">                android:layout_alignParentTop=&quot;true&quot;</div><div class=\"line\">                android:layout_marginEnd=&quot;20dp&quot;</div><div class=\"line\">                android:text=&quot;1111&quot;</div><div class=\"line\">                android:textSize=&quot;@dimen/sp_14&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;/RelativeLayout&gt;</div><div class=\"line\">        &lt;!-- 价格的布局 --&gt;</div><div class=\"line\">        &lt;RelativeLayout</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;30dp&quot;</div><div class=\"line\">            android:gravity=&quot;center_vertical&quot;</div><div class=\"line\">            android:orientation=&quot;horizontal&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_content&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_marginTop=&quot;10dp&quot;</div><div class=\"line\">                android:text=&quot;500g&quot;</div><div class=\"line\">                android:textSize=&quot;12sp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_money&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_alignParentEnd=&quot;true&quot;</div><div class=\"line\">                android:layout_alignTop=&quot;@+id/shopping_lv_content&quot;</div><div class=\"line\">                android:layout_gravity=&quot;bottom&quot;</div><div class=\"line\">                android:layout_marginEnd=&quot;20dp&quot;</div><div class=\"line\">                android:text=&quot;￥66&quot;</div><div class=\"line\">                android:textColor=&quot;@color/balance_bg&quot;</div><div class=\"line\">                android:textSize=&quot;16sp&quot; /&gt;</div><div class=\"line\">        &lt;/RelativeLayout&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;RelativeLayout</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;33dp&quot;</div><div class=\"line\">            android:gravity=&quot;center_vertical&quot;</div><div class=\"line\">            android:orientation=&quot;horizontal&quot;&gt;</div><div class=\"line\">            &lt;!-- 加号 --&gt;</div><div class=\"line\">            &lt;ImageView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_sub&quot;</div><div class=\"line\">                android:layout_width=&quot;30dp&quot;</div><div class=\"line\">                android:layout_height=&quot;30dp&quot;</div><div class=\"line\">                android:background=&quot;@drawable/add_button_shape&quot;</div><div class=\"line\">                android:src=&quot;@mipmap/icon_minus_3x&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_number&quot;</div><div class=\"line\">                android:layout_width=&quot;30dp&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_centerVertical=&quot;true&quot;</div><div class=\"line\">                android:layout_marginLeft=&quot;@dimen/dp_10&quot;</div><div class=\"line\">                android:layout_marginStart=&quot;10dp&quot;</div><div class=\"line\">                android:layout_toEndOf=&quot;@+id/shopping_lv_sub&quot;</div><div class=\"line\">                android:gravity=&quot;center&quot;</div><div class=\"line\">                android:inputType=&quot;&quot;</div><div class=\"line\">                android:text=&quot;1&quot;</div><div class=\"line\">                android:textSize=&quot;13sp&quot; /&gt;</div><div class=\"line\">            &lt;!-- 减号--&gt;</div><div class=\"line\">            &lt;ImageView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_add&quot;</div><div class=\"line\">                android:layout_width=&quot;30dp&quot;</div><div class=\"line\">                android:layout_height=&quot;30dp&quot;</div><div class=\"line\">                android:layout_alignTop=&quot;@+id/shopping_lv_sub&quot;</div><div class=\"line\">                android:layout_marginLeft=&quot;@dimen/dp_10&quot;</div><div class=\"line\">                android:layout_toEndOf=&quot;@+id/shopping_lv_number&quot;</div><div class=\"line\">                android:background=&quot;@drawable/add_button_shape&quot;</div><div class=\"line\">                android:src=&quot;@mipmap/icon_add_3x&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;ImageView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_delete&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_alignParentEnd=&quot;true&quot;</div><div class=\"line\">                android:layout_centerVertical=&quot;true&quot;</div><div class=\"line\">                android:layout_marginEnd=&quot;20dp&quot;</div><div class=\"line\">                android:layout_marginLeft=&quot;@dimen/dp_110&quot;</div><div class=\"line\">                android:layout_marginRight=&quot;@dimen/dp_15&quot;</div><div class=\"line\">                android:src=&quot;@mipmap/btn_delete_3x&quot; /&gt;</div><div class=\"line\">        &lt;/RelativeLayout&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>获取listview中的imgDelete控件，执行删除单条纪录的操作。<br>ShoppingCartListViewAdapter：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"> private View.OnClickListener onDelItem;//删除单条item的接口</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  public View getView(final int i, View view, ViewGroup viewGroup) &#123;</div><div class=\"line\">        ViewHolder holder = null;</div><div class=\"line\">        if (view == null) &#123;</div><div class=\"line\">            holder = new ViewHolder();</div><div class=\"line\">            view = LayoutInflater.from(this.context).inflate(R.layout.shopping_listview_item, null, true);</div><div class=\"line\">          //实例化item获取控件</div><div class=\"line\">            holder.shopping_lv_delete = (ImageView) view.findViewById(R.id.shopping_lv_delete);</div><div class=\"line\">            //设置回调监听</div><div class=\"line\">            holder. shopping_lv_delete.setOnClickListener(onDelItem);</div><div class=\"line\">            holder.shopping_lv_delete.setTag(i);</div><div class=\"line\">            view.setTag(holder);</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            holder = (ViewHolder) view.getTag();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> class ViewHolder &#123;</div><div class=\"line\">        </div><div class=\"line\">        ImageView shopping_lv_delete;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">    *定义监听接口</div><div class=\"line\">    */</div><div class=\"line\"> public void setOnDelItem(View.OnClickListener onDelItem) &#123;</div><div class=\"line\">        this.onDelItem = onDelItem;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>Activity：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">private ShoppingCartListViewAdapter adapter;</div><div class=\"line\">private ListView shopping_listview;</div><div class=\"line\">private List&lt;ShoppingCartListView&gt; list = new ArrayList&lt;ShoppingCartListView&gt;();</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">shopping_lv_delete = (ImageView) findViewById(R.id.shopping_lv_delete);</div><div class=\"line\">shopping_lv_delete.setOnClickListener(this);</div></pre></td></tr></table></figure>\n<p>onCreate方法中设置适配器的监听，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter = new ShoppingCartListViewAdapter(getActivity(), list);</div><div class=\"line\">       shopping_listview.setAdapter(adapter);</div><div class=\"line\">       **adapter.setOnDelItem(this);**</div></pre></td></tr></table></figure>\n<p>通过Tag的position，获取当前点击的item，<br>这里使用了popupMenu。在点击删除的时候会弹出确认删除框</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">if (tag != null &amp;&amp; tag instanceof Integer) &#123; </div><div class=\"line\">                int position = (Integer) tag;</div><div class=\"line\">                showPopupMenu(view, position);</div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//删除弹窗</div><div class=\"line\">public void showPopupMenu(final View view, final int position) &#123;</div><div class=\"line\">    final PopupMenu popup = new PopupMenu(getActivity(), view);</div><div class=\"line\">    popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());</div><div class=\"line\">    popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean onMenuItemClick(MenuItem menuItem) &#123;</div><div class=\"line\">            switch (menuItem.getItemId()) &#123;</div><div class=\"line\">                case R.id.remove:</div><div class=\"line\">                    list.remove(position);</div><div class=\"line\">                    adapter.notifyDataSetChanged();</div><div class=\"line\">                    break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    popup.show();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>popup</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">    &lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">        &lt;item</div><div class=\"line\">            android:id=&quot;@+id/remove&quot;</div><div class=\"line\">            android:title=&quot;@string/delete&quot;/&gt;</div><div class=\"line\">    &lt;/menu&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>ListView布局包括checkbox(复选框)、img、title（商品名称）、type（分类）、两个Button（加减）、三个textview（原价，单价，数量），imgDelete（delete）<br>","more":"</p>\n<p><img src=\"http://img.blog.csdn.net/20160924180402067\" alt=\"这里写图片描述\"></p>\n<p>xml：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;90dp&quot;</div><div class=\"line\">    android:background=&quot;@color/white&quot;</div><div class=\"line\">    android:gravity=&quot;center_vertical&quot;</div><div class=\"line\">    android:orientation=&quot;horizontal&quot;&gt;</div><div class=\"line\">    &lt;!-- 小对勾的布局 --&gt;</div><div class=\"line\">    &lt;CheckBox</div><div class=\"line\">        android:id=&quot;@+id/shopping_lv_checkbox&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_marginLeft=&quot;@dimen/dp_10&quot;</div><div class=\"line\">        android:focusable=&quot;false&quot;</div><div class=\"line\">        android:focusableInTouchMode=&quot;false&quot; /&gt;</div><div class=\"line\">    &lt;!-- 图片布局 --&gt;</div><div class=\"line\">    &lt;ImageView</div><div class=\"line\">        android:id=&quot;@+id/shopping_lv_img&quot;</div><div class=\"line\">        android:layout_width=&quot;64dp&quot;</div><div class=\"line\">        android:layout_height=&quot;64dp&quot;</div><div class=\"line\">        android:layout_margin=&quot;10dp&quot;</div><div class=\"line\">        android:scaleType=&quot;centerCrop&quot;</div><div class=\"line\">        android:src=&quot;@mipmap/tuceng1&quot; /&gt;</div><div class=\"line\">    &lt;!-- 商品名称和价格的布局 --&gt;</div><div class=\"line\">    &lt;LinearLayout</div><div class=\"line\">        android:layout_width=&quot;fill_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:orientation=&quot;vertical&quot;&gt;</div><div class=\"line\">        &lt;!-- 商品名称的布局 --&gt;</div><div class=\"line\">        &lt;RelativeLayout</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">            android:layout_marginTop=&quot;@dimen/dp_5&quot;</div><div class=\"line\">            android:gravity=&quot;center_vertical&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_title&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:text=&quot;连衣裙女夏季&quot;</div><div class=\"line\">                android:textSize=&quot;@dimen/sp_14&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_moneyDel&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_alignParentEnd=&quot;true&quot;</div><div class=\"line\">                android:layout_alignParentTop=&quot;true&quot;</div><div class=\"line\">                android:layout_marginEnd=&quot;20dp&quot;</div><div class=\"line\">                android:text=&quot;1111&quot;</div><div class=\"line\">                android:textSize=&quot;@dimen/sp_14&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;/RelativeLayout&gt;</div><div class=\"line\">        &lt;!-- 价格的布局 --&gt;</div><div class=\"line\">        &lt;RelativeLayout</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;30dp&quot;</div><div class=\"line\">            android:gravity=&quot;center_vertical&quot;</div><div class=\"line\">            android:orientation=&quot;horizontal&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_content&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_marginTop=&quot;10dp&quot;</div><div class=\"line\">                android:text=&quot;500g&quot;</div><div class=\"line\">                android:textSize=&quot;12sp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_money&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_alignParentEnd=&quot;true&quot;</div><div class=\"line\">                android:layout_alignTop=&quot;@+id/shopping_lv_content&quot;</div><div class=\"line\">                android:layout_gravity=&quot;bottom&quot;</div><div class=\"line\">                android:layout_marginEnd=&quot;20dp&quot;</div><div class=\"line\">                android:text=&quot;￥66&quot;</div><div class=\"line\">                android:textColor=&quot;@color/balance_bg&quot;</div><div class=\"line\">                android:textSize=&quot;16sp&quot; /&gt;</div><div class=\"line\">        &lt;/RelativeLayout&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;RelativeLayout</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;33dp&quot;</div><div class=\"line\">            android:gravity=&quot;center_vertical&quot;</div><div class=\"line\">            android:orientation=&quot;horizontal&quot;&gt;</div><div class=\"line\">            &lt;!-- 加号 --&gt;</div><div class=\"line\">            &lt;ImageView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_sub&quot;</div><div class=\"line\">                android:layout_width=&quot;30dp&quot;</div><div class=\"line\">                android:layout_height=&quot;30dp&quot;</div><div class=\"line\">                android:background=&quot;@drawable/add_button_shape&quot;</div><div class=\"line\">                android:src=&quot;@mipmap/icon_minus_3x&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;TextView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_number&quot;</div><div class=\"line\">                android:layout_width=&quot;30dp&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_centerVertical=&quot;true&quot;</div><div class=\"line\">                android:layout_marginLeft=&quot;@dimen/dp_10&quot;</div><div class=\"line\">                android:layout_marginStart=&quot;10dp&quot;</div><div class=\"line\">                android:layout_toEndOf=&quot;@+id/shopping_lv_sub&quot;</div><div class=\"line\">                android:gravity=&quot;center&quot;</div><div class=\"line\">                android:inputType=&quot;&quot;</div><div class=\"line\">                android:text=&quot;1&quot;</div><div class=\"line\">                android:textSize=&quot;13sp&quot; /&gt;</div><div class=\"line\">            &lt;!-- 减号--&gt;</div><div class=\"line\">            &lt;ImageView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_add&quot;</div><div class=\"line\">                android:layout_width=&quot;30dp&quot;</div><div class=\"line\">                android:layout_height=&quot;30dp&quot;</div><div class=\"line\">                android:layout_alignTop=&quot;@+id/shopping_lv_sub&quot;</div><div class=\"line\">                android:layout_marginLeft=&quot;@dimen/dp_10&quot;</div><div class=\"line\">                android:layout_toEndOf=&quot;@+id/shopping_lv_number&quot;</div><div class=\"line\">                android:background=&quot;@drawable/add_button_shape&quot;</div><div class=\"line\">                android:src=&quot;@mipmap/icon_add_3x&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;ImageView</div><div class=\"line\">                android:id=&quot;@+id/shopping_lv_delete&quot;</div><div class=\"line\">                android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">                android:layout_alignParentEnd=&quot;true&quot;</div><div class=\"line\">                android:layout_centerVertical=&quot;true&quot;</div><div class=\"line\">                android:layout_marginEnd=&quot;20dp&quot;</div><div class=\"line\">                android:layout_marginLeft=&quot;@dimen/dp_110&quot;</div><div class=\"line\">                android:layout_marginRight=&quot;@dimen/dp_15&quot;</div><div class=\"line\">                android:src=&quot;@mipmap/btn_delete_3x&quot; /&gt;</div><div class=\"line\">        &lt;/RelativeLayout&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>获取listview中的imgDelete控件，执行删除单条纪录的操作。<br>ShoppingCartListViewAdapter：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"> private View.OnClickListener onDelItem;//删除单条item的接口</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  public View getView(final int i, View view, ViewGroup viewGroup) &#123;</div><div class=\"line\">        ViewHolder holder = null;</div><div class=\"line\">        if (view == null) &#123;</div><div class=\"line\">            holder = new ViewHolder();</div><div class=\"line\">            view = LayoutInflater.from(this.context).inflate(R.layout.shopping_listview_item, null, true);</div><div class=\"line\">          //实例化item获取控件</div><div class=\"line\">            holder.shopping_lv_delete = (ImageView) view.findViewById(R.id.shopping_lv_delete);</div><div class=\"line\">            //设置回调监听</div><div class=\"line\">            holder. shopping_lv_delete.setOnClickListener(onDelItem);</div><div class=\"line\">            holder.shopping_lv_delete.setTag(i);</div><div class=\"line\">            view.setTag(holder);</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            holder = (ViewHolder) view.getTag();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> class ViewHolder &#123;</div><div class=\"line\">        </div><div class=\"line\">        ImageView shopping_lv_delete;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">    *定义监听接口</div><div class=\"line\">    */</div><div class=\"line\"> public void setOnDelItem(View.OnClickListener onDelItem) &#123;</div><div class=\"line\">        this.onDelItem = onDelItem;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>Activity：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">private ShoppingCartListViewAdapter adapter;</div><div class=\"line\">private ListView shopping_listview;</div><div class=\"line\">private List&lt;ShoppingCartListView&gt; list = new ArrayList&lt;ShoppingCartListView&gt;();</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">shopping_lv_delete = (ImageView) findViewById(R.id.shopping_lv_delete);</div><div class=\"line\">shopping_lv_delete.setOnClickListener(this);</div></pre></td></tr></table></figure>\n<p>onCreate方法中设置适配器的监听，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter = new ShoppingCartListViewAdapter(getActivity(), list);</div><div class=\"line\">       shopping_listview.setAdapter(adapter);</div><div class=\"line\">       **adapter.setOnDelItem(this);**</div></pre></td></tr></table></figure>\n<p>通过Tag的position，获取当前点击的item，<br>这里使用了popupMenu。在点击删除的时候会弹出确认删除框</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">if (tag != null &amp;&amp; tag instanceof Integer) &#123; </div><div class=\"line\">                int position = (Integer) tag;</div><div class=\"line\">                showPopupMenu(view, position);</div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//删除弹窗</div><div class=\"line\">public void showPopupMenu(final View view, final int position) &#123;</div><div class=\"line\">    final PopupMenu popup = new PopupMenu(getActivity(), view);</div><div class=\"line\">    popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());</div><div class=\"line\">    popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() &#123;</div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean onMenuItemClick(MenuItem menuItem) &#123;</div><div class=\"line\">            switch (menuItem.getItemId()) &#123;</div><div class=\"line\">                case R.id.remove:</div><div class=\"line\">                    list.remove(position);</div><div class=\"line\">                    adapter.notifyDataSetChanged();</div><div class=\"line\">                    break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    popup.show();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>popup</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">    &lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">        &lt;item</div><div class=\"line\">            android:id=&quot;@+id/remove&quot;</div><div class=\"line\">            android:title=&quot;@string/delete&quot;/&gt;</div><div class=\"line\">    &lt;/menu&gt;</div></pre></td></tr></table></figure>"},{"title":"RecyclerViewHeader+ViewFlipper仿淘宝头条滚动效果","date":"2019-07-03T07:40:53.351Z","description":null,"_content":"\nRecyclerViewHeader+ViewFlipper仿淘宝头条滚动效果\n\n<!-- more -->\n\n\n\n![效果图](http://upload-images.jianshu.io/upload_images/2858691-657f2882d4db6a31.gif?imageMogr2/auto-orient/strip)\n\n1、需要导入的包：\n\n```\n    //RecyclerView\n    compile 'com.android.support:recyclerview-v7:23.1.0'\n    //RecyclerViewHeader\n    compile 'com.bartoszlipinski:recyclerviewheader2:2.0.1'\n```\n版本可以根据自己需要进行适当修改。\n\n2、这用了个下拉刷新控件\n内部嵌套的是RecyclerView、RecyclerViewHeader、ViewFlipper.\n```\n        <android.support.v4.widget.SwipeRefreshLayout\n            android:id=\"@+id/swipeRefreshLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n            <RelativeLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\">\n\n                <android.support.v7.widget.RecyclerView\n                    android:id=\"@+id/recyclerView\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"\n                    android:dividerHeight=\"2dp\" />\n\n                <com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader\n                    android:id=\"@+id/recyclerView_header\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_gravity=\"top\">\n\n                    <RelativeLayout\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\">\n\n                        <LinearLayout\n                            android:layout_width=\"match_parent\"\n                            android:layout_height=\"68dp\"\n                            android:background=\"#FFF6F6F6\"\n                            android:orientation=\"horizontal\"\n                            android:paddingBottom=\"6dp\"\n                            android:paddingTop=\"10dp\"\n                            android:visibility=\"visible\">\n\n                            <ImageView\n                                android:layout_width=\"wrap_content\"\n                                android:layout_height=\"match_parent\"\n                                android:background=\"@color/white\"\n                                android:paddingBottom=\"10dp\"\n                                android:paddingLeft=\"6dp\"\n                                android:paddingTop=\"10dp\"\n                                android:src=\"@drawable/icon_viewfip_left\" />\n\n                            <ViewFlipper\n                                android:id=\"@+id/vf\"\n                                android:layout_width=\"match_parent\"\n                                android:layout_height=\"match_parent\"\n                                android:autoStart=\"true\"\n                                android:background=\"#ffffff\"\n                                android:flipInterval=\"3000\"\n                                android:inAnimation=\"@anim/anim_marquee_in\"\n                                android:outAnimation=\"@anim/anim_marquee_out\" />\n                        </LinearLayout>\n                    </RelativeLayout>\n                </com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader>\n\n            </RelativeLayout>\n        </android.support.v4.widget.SwipeRefreshLayout>\n\n```\n这里有两个坑需要注意：\n* 给recyclerview添加Header的时候，注意RecyclerView的父布局只能是RelativeLayout、LinearLayout、和FrameLayout中的其中一种，否则会添加失败。建议使用RelativeLayout\n* 在activity中动态添加flipper数据的时候，不要放在下拉刷新的监听控件里，否则会造成滚动布局重叠的bug。\n\n3、如果想实现轮播时的效果，需要加上\n```\nandroid:inAnimation=\"@anim/anim_marquee_in\"\nandroid:outAnimation=\"@anim/anim_marquee_out\" />\n```\nanim_marquee_in:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <translate\n        android:duration=\"1500\"\n        android:fromYDelta=\"100%p\"\n        android:toYDelta=\"0\"/>\n</set>\n```\nanim_marquee_out:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <translate\n        android:duration=\"1500\"\n        android:fromYDelta=\"0\"\n        android:toYDelta=\"-100%p\"/>\n\n</set>\n```\n\n4、添加header，给ViewFlipper添加数据\n\n```\n    /*添加header*/\n    private void initHeader() {\n        //开始滚动\n        vf.startFlipping();\n        View view = View.inflate(this, R.layout.item_viewflipper, null);\n        TextView tv = (TextView) view.findViewById(R.id.item_viewfip_tv);\n        tv.setText(\"新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢！\");\n        //添加View\n        vf.addView(view);\n        //添加header\n        recyclerViewHeader.attachTo(recyclerView);\n    }\n```\nitem的布局\nitem_viewflipper：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"8dp\"\n    android:gravity=\"center_vertical\"\n    android:orientation=\"horizontal\">\n\n\n    <TextView\n        android:layout_width=\"34dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"活动\"\n        android:gravity=\"center_horizontal\"\n        android:background=\"@drawable/item_viewfip_shape\"\n        android:textColor=\"#F14C00\"\n        android:textSize=\"10sp\" />\n\n    <TextView\n        android:id=\"@+id/item_viewfip_tv\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:ellipsize=\"end\"\n        android:maxLines=\"2\"\n        android:layout_marginLeft=\"6dp\"\n        android:textColor=\"#FF333333\"\n        android:textSize=\"14sp\" />\n\n</LinearLayout>\n```\n\n其实就两行代码就可以实现效果。\n但是只有一个view，要想添加多个view实现多条数据滚动的话需要创建多个view，然后分别add。\n这样的弊端是：固定死的view数量，有时候实际开发中需要从服务器获取数据，这时候就比较尴尬了！\n\n5、所以有必要说一下实际项目中用的办法\n以数组的形式，根据后台返回List数量，然后创建相关数量的view添加到滚动视图中\n```\n    List<View> views = new ArrayList<>();\n\n /**\n     * 设置循环滚动的View数组\n     *\n     * @param views\n     */\n    public void setViews(List<View> views) {\n        if (views == null || views.size() == 0) return;\n        vf.removeAllViews();\n        for (int i = 0; i < views.size(); i++) {\n            vf.addView(views.get(i));\n        }\n        vf.startFlipping();\n    }\n```\n添加的时候使用\n```\nviews.add(view);\nvf.setViews(views);\n```\n\n6、如果项目中有多处用到改控件的话，我们不妨把该方法封装到自定义ViewFlipper中，方便以后使用。\n写法跟activity中一样：\n```\n /**\n     * 设置循环滚动的View数组\n     *\n     * @param views\n     */\n    public void setViews(List<View> views) {\n        if (views == null || views.size() == 0) return;\n        removeAllViews();\n        for (int i = 0; i < views.size(); i++) {\n            addView(views.get(i));\n        }\n        startFlipping();\n    }\n```\n\n7、监听实现有多种方法\n\n一种是类似淘宝的点进去是个列表，直接监听ViewFlipper的点击事件就行\n\n第二种是根据不同类型打开不同页面，需要根据后台返回结果，进行数据传递打开相关页面。\n这样的效果需要监听item里面的控件，在请求返回结果的时候，监听，根据list索引取值:\n```\nfor (int i = 0; i < hdList.size(); i++) {\n    View view = View.inflate(getActivity(),   R.layout.item_main_fragment_vf, null);\n                        TextView tv1 = (TextView) moreView.findViewById(R.id.item_viewfip_tv);\n\n                        tv1.setText(hdList.get(i).title);\n                        final int finalI = i;\n                        tv1.setOnClickListener(new OnClickListener() {\n                            @Override\n                            public void onClick(View v) {\n                                Intent intent = new Intent(getActivity(), HDDetailsActivity.class);\n                                intent.putExtra(\"title\", hdList.get(finalI).title);\n                                intent.putExtra(\"id\", hdList.get(finalI).id);\n                                intent.putExtra(\"url\", hdList.get(finalI).actUrl);\n                                getActivity().startActivity(intent);\n                            }\n                        });\n\n                        views.add(view);\n                        main_forum_vf.setViews(views);\n}\n\n\n```\n\n\n还有一种是手势的监听，这种是最复杂的方法，不但能对手势监听操作，还可以实现viewpager切换的效果。具体方法可以去研究研究。\n\n-----\n源码放在了Github需要的可以去查看：https://github.com/wapchief/android-CollectionDemo","source":"_posts/20170709_3.md","raw":"---\ntitle: RecyclerViewHeader+ViewFlipper仿淘宝头条滚动效果\ndate: 2017年7月9日18:00:08\ncategories: \ntags: [android] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: \n\n---\n\nRecyclerViewHeader+ViewFlipper仿淘宝头条滚动效果\n\n<!-- more -->\n\n\n\n![效果图](http://upload-images.jianshu.io/upload_images/2858691-657f2882d4db6a31.gif?imageMogr2/auto-orient/strip)\n\n1、需要导入的包：\n\n```\n    //RecyclerView\n    compile 'com.android.support:recyclerview-v7:23.1.0'\n    //RecyclerViewHeader\n    compile 'com.bartoszlipinski:recyclerviewheader2:2.0.1'\n```\n版本可以根据自己需要进行适当修改。\n\n2、这用了个下拉刷新控件\n内部嵌套的是RecyclerView、RecyclerViewHeader、ViewFlipper.\n```\n        <android.support.v4.widget.SwipeRefreshLayout\n            android:id=\"@+id/swipeRefreshLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n            <RelativeLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\">\n\n                <android.support.v7.widget.RecyclerView\n                    android:id=\"@+id/recyclerView\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"\n                    android:dividerHeight=\"2dp\" />\n\n                <com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader\n                    android:id=\"@+id/recyclerView_header\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_gravity=\"top\">\n\n                    <RelativeLayout\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\">\n\n                        <LinearLayout\n                            android:layout_width=\"match_parent\"\n                            android:layout_height=\"68dp\"\n                            android:background=\"#FFF6F6F6\"\n                            android:orientation=\"horizontal\"\n                            android:paddingBottom=\"6dp\"\n                            android:paddingTop=\"10dp\"\n                            android:visibility=\"visible\">\n\n                            <ImageView\n                                android:layout_width=\"wrap_content\"\n                                android:layout_height=\"match_parent\"\n                                android:background=\"@color/white\"\n                                android:paddingBottom=\"10dp\"\n                                android:paddingLeft=\"6dp\"\n                                android:paddingTop=\"10dp\"\n                                android:src=\"@drawable/icon_viewfip_left\" />\n\n                            <ViewFlipper\n                                android:id=\"@+id/vf\"\n                                android:layout_width=\"match_parent\"\n                                android:layout_height=\"match_parent\"\n                                android:autoStart=\"true\"\n                                android:background=\"#ffffff\"\n                                android:flipInterval=\"3000\"\n                                android:inAnimation=\"@anim/anim_marquee_in\"\n                                android:outAnimation=\"@anim/anim_marquee_out\" />\n                        </LinearLayout>\n                    </RelativeLayout>\n                </com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader>\n\n            </RelativeLayout>\n        </android.support.v4.widget.SwipeRefreshLayout>\n\n```\n这里有两个坑需要注意：\n* 给recyclerview添加Header的时候，注意RecyclerView的父布局只能是RelativeLayout、LinearLayout、和FrameLayout中的其中一种，否则会添加失败。建议使用RelativeLayout\n* 在activity中动态添加flipper数据的时候，不要放在下拉刷新的监听控件里，否则会造成滚动布局重叠的bug。\n\n3、如果想实现轮播时的效果，需要加上\n```\nandroid:inAnimation=\"@anim/anim_marquee_in\"\nandroid:outAnimation=\"@anim/anim_marquee_out\" />\n```\nanim_marquee_in:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <translate\n        android:duration=\"1500\"\n        android:fromYDelta=\"100%p\"\n        android:toYDelta=\"0\"/>\n</set>\n```\nanim_marquee_out:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <translate\n        android:duration=\"1500\"\n        android:fromYDelta=\"0\"\n        android:toYDelta=\"-100%p\"/>\n\n</set>\n```\n\n4、添加header，给ViewFlipper添加数据\n\n```\n    /*添加header*/\n    private void initHeader() {\n        //开始滚动\n        vf.startFlipping();\n        View view = View.inflate(this, R.layout.item_viewflipper, null);\n        TextView tv = (TextView) view.findViewById(R.id.item_viewfip_tv);\n        tv.setText(\"新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢！\");\n        //添加View\n        vf.addView(view);\n        //添加header\n        recyclerViewHeader.attachTo(recyclerView);\n    }\n```\nitem的布局\nitem_viewflipper：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"8dp\"\n    android:gravity=\"center_vertical\"\n    android:orientation=\"horizontal\">\n\n\n    <TextView\n        android:layout_width=\"34dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"活动\"\n        android:gravity=\"center_horizontal\"\n        android:background=\"@drawable/item_viewfip_shape\"\n        android:textColor=\"#F14C00\"\n        android:textSize=\"10sp\" />\n\n    <TextView\n        android:id=\"@+id/item_viewfip_tv\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:ellipsize=\"end\"\n        android:maxLines=\"2\"\n        android:layout_marginLeft=\"6dp\"\n        android:textColor=\"#FF333333\"\n        android:textSize=\"14sp\" />\n\n</LinearLayout>\n```\n\n其实就两行代码就可以实现效果。\n但是只有一个view，要想添加多个view实现多条数据滚动的话需要创建多个view，然后分别add。\n这样的弊端是：固定死的view数量，有时候实际开发中需要从服务器获取数据，这时候就比较尴尬了！\n\n5、所以有必要说一下实际项目中用的办法\n以数组的形式，根据后台返回List数量，然后创建相关数量的view添加到滚动视图中\n```\n    List<View> views = new ArrayList<>();\n\n /**\n     * 设置循环滚动的View数组\n     *\n     * @param views\n     */\n    public void setViews(List<View> views) {\n        if (views == null || views.size() == 0) return;\n        vf.removeAllViews();\n        for (int i = 0; i < views.size(); i++) {\n            vf.addView(views.get(i));\n        }\n        vf.startFlipping();\n    }\n```\n添加的时候使用\n```\nviews.add(view);\nvf.setViews(views);\n```\n\n6、如果项目中有多处用到改控件的话，我们不妨把该方法封装到自定义ViewFlipper中，方便以后使用。\n写法跟activity中一样：\n```\n /**\n     * 设置循环滚动的View数组\n     *\n     * @param views\n     */\n    public void setViews(List<View> views) {\n        if (views == null || views.size() == 0) return;\n        removeAllViews();\n        for (int i = 0; i < views.size(); i++) {\n            addView(views.get(i));\n        }\n        startFlipping();\n    }\n```\n\n7、监听实现有多种方法\n\n一种是类似淘宝的点进去是个列表，直接监听ViewFlipper的点击事件就行\n\n第二种是根据不同类型打开不同页面，需要根据后台返回结果，进行数据传递打开相关页面。\n这样的效果需要监听item里面的控件，在请求返回结果的时候，监听，根据list索引取值:\n```\nfor (int i = 0; i < hdList.size(); i++) {\n    View view = View.inflate(getActivity(),   R.layout.item_main_fragment_vf, null);\n                        TextView tv1 = (TextView) moreView.findViewById(R.id.item_viewfip_tv);\n\n                        tv1.setText(hdList.get(i).title);\n                        final int finalI = i;\n                        tv1.setOnClickListener(new OnClickListener() {\n                            @Override\n                            public void onClick(View v) {\n                                Intent intent = new Intent(getActivity(), HDDetailsActivity.class);\n                                intent.putExtra(\"title\", hdList.get(finalI).title);\n                                intent.putExtra(\"id\", hdList.get(finalI).id);\n                                intent.putExtra(\"url\", hdList.get(finalI).actUrl);\n                                getActivity().startActivity(intent);\n                            }\n                        });\n\n                        views.add(view);\n                        main_forum_vf.setViews(views);\n}\n\n\n```\n\n\n还有一种是手势的监听，这种是最复杂的方法，不但能对手势监听操作，还可以实现viewpager切换的效果。具体方法可以去研究研究。\n\n-----\n源码放在了Github需要的可以去查看：https://github.com/wapchief/android-CollectionDemo","slug":"20170709_3","published":1,"updated":"2019-07-03T07:40:53.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxmzrkz2000jglu21jrx8q97","content":"<p>RecyclerViewHeader+ViewFlipper仿淘宝头条滚动效果</p>\n<a id=\"more\"></a>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-657f2882d4db6a31.gif?imageMogr2/auto-orient/strip\" alt=\"效果图\"></p>\n<p>1、需要导入的包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//RecyclerView</div><div class=\"line\">compile &apos;com.android.support:recyclerview-v7:23.1.0&apos;</div><div class=\"line\">//RecyclerViewHeader</div><div class=\"line\">compile &apos;com.bartoszlipinski:recyclerviewheader2:2.0.1&apos;</div></pre></td></tr></table></figure>\n<p>版本可以根据自己需要进行适当修改。</p>\n<p>2、这用了个下拉刷新控件<br>内部嵌套的是RecyclerView、RecyclerViewHeader、ViewFlipper.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v4.widget.SwipeRefreshLayout</div><div class=\"line\">    android:id=&quot;@+id/swipeRefreshLayout&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;RelativeLayout</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;android.support.v7.widget.RecyclerView</div><div class=\"line\">            android:id=&quot;@+id/recyclerView&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">            android:dividerHeight=&quot;2dp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader</div><div class=\"line\">            android:id=&quot;@+id/recyclerView_header&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">            android:layout_gravity=&quot;top&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;RelativeLayout</div><div class=\"line\">                android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">                &lt;LinearLayout</div><div class=\"line\">                    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">                    android:layout_height=&quot;68dp&quot;</div><div class=\"line\">                    android:background=&quot;#FFF6F6F6&quot;</div><div class=\"line\">                    android:orientation=&quot;horizontal&quot;</div><div class=\"line\">                    android:paddingBottom=&quot;6dp&quot;</div><div class=\"line\">                    android:paddingTop=&quot;10dp&quot;</div><div class=\"line\">                    android:visibility=&quot;visible&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">                    &lt;ImageView</div><div class=\"line\">                        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                        android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">                        android:background=&quot;@color/white&quot;</div><div class=\"line\">                        android:paddingBottom=&quot;10dp&quot;</div><div class=\"line\">                        android:paddingLeft=&quot;6dp&quot;</div><div class=\"line\">                        android:paddingTop=&quot;10dp&quot;</div><div class=\"line\">                        android:src=&quot;@drawable/icon_viewfip_left&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">                    &lt;ViewFlipper</div><div class=\"line\">                        android:id=&quot;@+id/vf&quot;</div><div class=\"line\">                        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">                        android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">                        android:autoStart=&quot;true&quot;</div><div class=\"line\">                        android:background=&quot;#ffffff&quot;</div><div class=\"line\">                        android:flipInterval=&quot;3000&quot;</div><div class=\"line\">                        android:inAnimation=&quot;@anim/anim_marquee_in&quot;</div><div class=\"line\">                        android:outAnimation=&quot;@anim/anim_marquee_out&quot; /&gt;</div><div class=\"line\">                &lt;/LinearLayout&gt;</div><div class=\"line\">            &lt;/RelativeLayout&gt;</div><div class=\"line\">        &lt;/com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/RelativeLayout&gt;</div><div class=\"line\">&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>这里有两个坑需要注意：</p>\n<ul>\n<li>给recyclerview添加Header的时候，注意RecyclerView的父布局只能是RelativeLayout、LinearLayout、和FrameLayout中的其中一种，否则会添加失败。建议使用RelativeLayout</li>\n<li>在activity中动态添加flipper数据的时候，不要放在下拉刷新的监听控件里，否则会造成滚动布局重叠的bug。</li>\n</ul>\n<p>3、如果想实现轮播时的效果，需要加上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:inAnimation=&quot;@anim/anim_marquee_in&quot;</div><div class=\"line\">android:outAnimation=&quot;@anim/anim_marquee_out&quot; /&gt;</div></pre></td></tr></table></figure></p>\n<p>anim_marquee_in:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;translate</div><div class=\"line\">        android:duration=&quot;1500&quot;</div><div class=\"line\">        android:fromYDelta=&quot;100%p&quot;</div><div class=\"line\">        android:toYDelta=&quot;0&quot;/&gt;</div><div class=\"line\">&lt;/set&gt;</div></pre></td></tr></table></figure></p>\n<p>anim_marquee_out:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;translate</div><div class=\"line\">        android:duration=&quot;1500&quot;</div><div class=\"line\">        android:fromYDelta=&quot;0&quot;</div><div class=\"line\">        android:toYDelta=&quot;-100%p&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/set&gt;</div></pre></td></tr></table></figure></p>\n<p>4、添加header，给ViewFlipper添加数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*添加header*/</div><div class=\"line\">private void initHeader() &#123;</div><div class=\"line\">    //开始滚动</div><div class=\"line\">    vf.startFlipping();</div><div class=\"line\">    View view = View.inflate(this, R.layout.item_viewflipper, null);</div><div class=\"line\">    TextView tv = (TextView) view.findViewById(R.id.item_viewfip_tv);</div><div class=\"line\">    tv.setText(&quot;新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢！&quot;);</div><div class=\"line\">    //添加View</div><div class=\"line\">    vf.addView(view);</div><div class=\"line\">    //添加header</div><div class=\"line\">    recyclerViewHeader.attachTo(recyclerView);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>item的布局<br>item_viewflipper：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    android:padding=&quot;8dp&quot;</div><div class=\"line\">    android:gravity=&quot;center_vertical&quot;</div><div class=\"line\">    android:orientation=&quot;horizontal&quot;&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:layout_width=&quot;34dp&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:text=&quot;活动&quot;</div><div class=\"line\">        android:gravity=&quot;center_horizontal&quot;</div><div class=\"line\">        android:background=&quot;@drawable/item_viewfip_shape&quot;</div><div class=\"line\">        android:textColor=&quot;#F14C00&quot;</div><div class=\"line\">        android:textSize=&quot;10sp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/item_viewfip_tv&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:ellipsize=&quot;end&quot;</div><div class=\"line\">        android:maxLines=&quot;2&quot;</div><div class=\"line\">        android:layout_marginLeft=&quot;6dp&quot;</div><div class=\"line\">        android:textColor=&quot;#FF333333&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>其实就两行代码就可以实现效果。<br>但是只有一个view，要想添加多个view实现多条数据滚动的话需要创建多个view，然后分别add。<br>这样的弊端是：固定死的view数量，有时候实际开发中需要从服务器获取数据，这时候就比较尴尬了！</p>\n<p>5、所以有必要说一下实际项目中用的办法<br>以数组的形式，根据后台返回List数量，然后创建相关数量的view添加到滚动视图中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">   List&lt;View&gt; views = new ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">    * 设置循环滚动的View数组</div><div class=\"line\">    *</div><div class=\"line\">    * @param views</div><div class=\"line\">    */</div><div class=\"line\">   public void setViews(List&lt;View&gt; views) &#123;</div><div class=\"line\">       if (views == null || views.size() == 0) return;</div><div class=\"line\">       vf.removeAllViews();</div><div class=\"line\">       for (int i = 0; i &lt; views.size(); i++) &#123;</div><div class=\"line\">           vf.addView(views.get(i));</div><div class=\"line\">       &#125;</div><div class=\"line\">       vf.startFlipping();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>添加的时候使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">views.add(view);</div><div class=\"line\">vf.setViews(views);</div></pre></td></tr></table></figure></p>\n<p>6、如果项目中有多处用到改控件的话，我们不妨把该方法封装到自定义ViewFlipper中，方便以后使用。<br>写法跟activity中一样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">    * 设置循环滚动的View数组</div><div class=\"line\">    *</div><div class=\"line\">    * @param views</div><div class=\"line\">    */</div><div class=\"line\">   public void setViews(List&lt;View&gt; views) &#123;</div><div class=\"line\">       if (views == null || views.size() == 0) return;</div><div class=\"line\">       removeAllViews();</div><div class=\"line\">       for (int i = 0; i &lt; views.size(); i++) &#123;</div><div class=\"line\">           addView(views.get(i));</div><div class=\"line\">       &#125;</div><div class=\"line\">       startFlipping();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>7、监听实现有多种方法</p>\n<p>一种是类似淘宝的点进去是个列表，直接监听ViewFlipper的点击事件就行</p>\n<p>第二种是根据不同类型打开不同页面，需要根据后台返回结果，进行数据传递打开相关页面。<br>这样的效果需要监听item里面的控件，在请求返回结果的时候，监听，根据list索引取值:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (int i = 0; i &lt; hdList.size(); i++) &#123;</div><div class=\"line\">    View view = View.inflate(getActivity(),   R.layout.item_main_fragment_vf, null);</div><div class=\"line\">                        TextView tv1 = (TextView) moreView.findViewById(R.id.item_viewfip_tv);</div><div class=\"line\"></div><div class=\"line\">                        tv1.setText(hdList.get(i).title);</div><div class=\"line\">                        final int finalI = i;</div><div class=\"line\">                        tv1.setOnClickListener(new OnClickListener() &#123;</div><div class=\"line\">                            @Override</div><div class=\"line\">                            public void onClick(View v) &#123;</div><div class=\"line\">                                Intent intent = new Intent(getActivity(), HDDetailsActivity.class);</div><div class=\"line\">                                intent.putExtra(&quot;title&quot;, hdList.get(finalI).title);</div><div class=\"line\">                                intent.putExtra(&quot;id&quot;, hdList.get(finalI).id);</div><div class=\"line\">                                intent.putExtra(&quot;url&quot;, hdList.get(finalI).actUrl);</div><div class=\"line\">                                getActivity().startActivity(intent);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div><div class=\"line\"></div><div class=\"line\">                        views.add(view);</div><div class=\"line\">                        main_forum_vf.setViews(views);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一种是手势的监听，这种是最复杂的方法，不但能对手势监听操作，还可以实现viewpager切换的效果。具体方法可以去研究研究。</p>\n<hr>\n<p>源码放在了Github需要的可以去查看：<a href=\"https://github.com/wapchief/android-CollectionDemo\" target=\"_blank\" rel=\"external\">https://github.com/wapchief/android-CollectionDemo</a></p>\n","site":{"data":{}},"excerpt":"<p>RecyclerViewHeader+ViewFlipper仿淘宝头条滚动效果</p>","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/2858691-657f2882d4db6a31.gif?imageMogr2/auto-orient/strip\" alt=\"效果图\"></p>\n<p>1、需要导入的包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//RecyclerView</div><div class=\"line\">compile &apos;com.android.support:recyclerview-v7:23.1.0&apos;</div><div class=\"line\">//RecyclerViewHeader</div><div class=\"line\">compile &apos;com.bartoszlipinski:recyclerviewheader2:2.0.1&apos;</div></pre></td></tr></table></figure>\n<p>版本可以根据自己需要进行适当修改。</p>\n<p>2、这用了个下拉刷新控件<br>内部嵌套的是RecyclerView、RecyclerViewHeader、ViewFlipper.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v4.widget.SwipeRefreshLayout</div><div class=\"line\">    android:id=&quot;@+id/swipeRefreshLayout&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;RelativeLayout</div><div class=\"line\">        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;android.support.v7.widget.RecyclerView</div><div class=\"line\">            android:id=&quot;@+id/recyclerView&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">            android:dividerHeight=&quot;2dp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader</div><div class=\"line\">            android:id=&quot;@+id/recyclerView_header&quot;</div><div class=\"line\">            android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">            android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">            android:layout_gravity=&quot;top&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">            &lt;RelativeLayout</div><div class=\"line\">                android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">                android:layout_height=&quot;wrap_content&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">                &lt;LinearLayout</div><div class=\"line\">                    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">                    android:layout_height=&quot;68dp&quot;</div><div class=\"line\">                    android:background=&quot;#FFF6F6F6&quot;</div><div class=\"line\">                    android:orientation=&quot;horizontal&quot;</div><div class=\"line\">                    android:paddingBottom=&quot;6dp&quot;</div><div class=\"line\">                    android:paddingTop=&quot;10dp&quot;</div><div class=\"line\">                    android:visibility=&quot;visible&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">                    &lt;ImageView</div><div class=\"line\">                        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">                        android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">                        android:background=&quot;@color/white&quot;</div><div class=\"line\">                        android:paddingBottom=&quot;10dp&quot;</div><div class=\"line\">                        android:paddingLeft=&quot;6dp&quot;</div><div class=\"line\">                        android:paddingTop=&quot;10dp&quot;</div><div class=\"line\">                        android:src=&quot;@drawable/icon_viewfip_left&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">                    &lt;ViewFlipper</div><div class=\"line\">                        android:id=&quot;@+id/vf&quot;</div><div class=\"line\">                        android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">                        android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">                        android:autoStart=&quot;true&quot;</div><div class=\"line\">                        android:background=&quot;#ffffff&quot;</div><div class=\"line\">                        android:flipInterval=&quot;3000&quot;</div><div class=\"line\">                        android:inAnimation=&quot;@anim/anim_marquee_in&quot;</div><div class=\"line\">                        android:outAnimation=&quot;@anim/anim_marquee_out&quot; /&gt;</div><div class=\"line\">                &lt;/LinearLayout&gt;</div><div class=\"line\">            &lt;/RelativeLayout&gt;</div><div class=\"line\">        &lt;/com.bartoszlipinski.recyclerviewheader2.RecyclerViewHeader&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/RelativeLayout&gt;</div><div class=\"line\">&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>这里有两个坑需要注意：</p>\n<ul>\n<li>给recyclerview添加Header的时候，注意RecyclerView的父布局只能是RelativeLayout、LinearLayout、和FrameLayout中的其中一种，否则会添加失败。建议使用RelativeLayout</li>\n<li>在activity中动态添加flipper数据的时候，不要放在下拉刷新的监听控件里，否则会造成滚动布局重叠的bug。</li>\n</ul>\n<p>3、如果想实现轮播时的效果，需要加上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:inAnimation=&quot;@anim/anim_marquee_in&quot;</div><div class=\"line\">android:outAnimation=&quot;@anim/anim_marquee_out&quot; /&gt;</div></pre></td></tr></table></figure></p>\n<p>anim_marquee_in:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;translate</div><div class=\"line\">        android:duration=&quot;1500&quot;</div><div class=\"line\">        android:fromYDelta=&quot;100%p&quot;</div><div class=\"line\">        android:toYDelta=&quot;0&quot;/&gt;</div><div class=\"line\">&lt;/set&gt;</div></pre></td></tr></table></figure></p>\n<p>anim_marquee_out:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;translate</div><div class=\"line\">        android:duration=&quot;1500&quot;</div><div class=\"line\">        android:fromYDelta=&quot;0&quot;</div><div class=\"line\">        android:toYDelta=&quot;-100%p&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/set&gt;</div></pre></td></tr></table></figure></p>\n<p>4、添加header，给ViewFlipper添加数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*添加header*/</div><div class=\"line\">private void initHeader() &#123;</div><div class=\"line\">    //开始滚动</div><div class=\"line\">    vf.startFlipping();</div><div class=\"line\">    View view = View.inflate(this, R.layout.item_viewflipper, null);</div><div class=\"line\">    TextView tv = (TextView) view.findViewById(R.id.item_viewfip_tv);</div><div class=\"line\">    tv.setText(&quot;新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢新鲜水果限时开抢！&quot;);</div><div class=\"line\">    //添加View</div><div class=\"line\">    vf.addView(view);</div><div class=\"line\">    //添加header</div><div class=\"line\">    recyclerViewHeader.attachTo(recyclerView);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>item的布局<br>item_viewflipper：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot;</div><div class=\"line\">    android:padding=&quot;8dp&quot;</div><div class=\"line\">    android:gravity=&quot;center_vertical&quot;</div><div class=\"line\">    android:orientation=&quot;horizontal&quot;&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:layout_width=&quot;34dp&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:text=&quot;活动&quot;</div><div class=\"line\">        android:gravity=&quot;center_horizontal&quot;</div><div class=\"line\">        android:background=&quot;@drawable/item_viewfip_shape&quot;</div><div class=\"line\">        android:textColor=&quot;#F14C00&quot;</div><div class=\"line\">        android:textSize=&quot;10sp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;TextView</div><div class=\"line\">        android:id=&quot;@+id/item_viewfip_tv&quot;</div><div class=\"line\">        android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:ellipsize=&quot;end&quot;</div><div class=\"line\">        android:maxLines=&quot;2&quot;</div><div class=\"line\">        android:layout_marginLeft=&quot;6dp&quot;</div><div class=\"line\">        android:textColor=&quot;#FF333333&quot;</div><div class=\"line\">        android:textSize=&quot;14sp&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>其实就两行代码就可以实现效果。<br>但是只有一个view，要想添加多个view实现多条数据滚动的话需要创建多个view，然后分别add。<br>这样的弊端是：固定死的view数量，有时候实际开发中需要从服务器获取数据，这时候就比较尴尬了！</p>\n<p>5、所以有必要说一下实际项目中用的办法<br>以数组的形式，根据后台返回List数量，然后创建相关数量的view添加到滚动视图中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">   List&lt;View&gt; views = new ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">    * 设置循环滚动的View数组</div><div class=\"line\">    *</div><div class=\"line\">    * @param views</div><div class=\"line\">    */</div><div class=\"line\">   public void setViews(List&lt;View&gt; views) &#123;</div><div class=\"line\">       if (views == null || views.size() == 0) return;</div><div class=\"line\">       vf.removeAllViews();</div><div class=\"line\">       for (int i = 0; i &lt; views.size(); i++) &#123;</div><div class=\"line\">           vf.addView(views.get(i));</div><div class=\"line\">       &#125;</div><div class=\"line\">       vf.startFlipping();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>添加的时候使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">views.add(view);</div><div class=\"line\">vf.setViews(views);</div></pre></td></tr></table></figure></p>\n<p>6、如果项目中有多处用到改控件的话，我们不妨把该方法封装到自定义ViewFlipper中，方便以后使用。<br>写法跟activity中一样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">    * 设置循环滚动的View数组</div><div class=\"line\">    *</div><div class=\"line\">    * @param views</div><div class=\"line\">    */</div><div class=\"line\">   public void setViews(List&lt;View&gt; views) &#123;</div><div class=\"line\">       if (views == null || views.size() == 0) return;</div><div class=\"line\">       removeAllViews();</div><div class=\"line\">       for (int i = 0; i &lt; views.size(); i++) &#123;</div><div class=\"line\">           addView(views.get(i));</div><div class=\"line\">       &#125;</div><div class=\"line\">       startFlipping();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>7、监听实现有多种方法</p>\n<p>一种是类似淘宝的点进去是个列表，直接监听ViewFlipper的点击事件就行</p>\n<p>第二种是根据不同类型打开不同页面，需要根据后台返回结果，进行数据传递打开相关页面。<br>这样的效果需要监听item里面的控件，在请求返回结果的时候，监听，根据list索引取值:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (int i = 0; i &lt; hdList.size(); i++) &#123;</div><div class=\"line\">    View view = View.inflate(getActivity(),   R.layout.item_main_fragment_vf, null);</div><div class=\"line\">                        TextView tv1 = (TextView) moreView.findViewById(R.id.item_viewfip_tv);</div><div class=\"line\"></div><div class=\"line\">                        tv1.setText(hdList.get(i).title);</div><div class=\"line\">                        final int finalI = i;</div><div class=\"line\">                        tv1.setOnClickListener(new OnClickListener() &#123;</div><div class=\"line\">                            @Override</div><div class=\"line\">                            public void onClick(View v) &#123;</div><div class=\"line\">                                Intent intent = new Intent(getActivity(), HDDetailsActivity.class);</div><div class=\"line\">                                intent.putExtra(&quot;title&quot;, hdList.get(finalI).title);</div><div class=\"line\">                                intent.putExtra(&quot;id&quot;, hdList.get(finalI).id);</div><div class=\"line\">                                intent.putExtra(&quot;url&quot;, hdList.get(finalI).actUrl);</div><div class=\"line\">                                getActivity().startActivity(intent);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div><div class=\"line\"></div><div class=\"line\">                        views.add(view);</div><div class=\"line\">                        main_forum_vf.setViews(views);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一种是手势的监听，这种是最复杂的方法，不但能对手势监听操作，还可以实现viewpager切换的效果。具体方法可以去研究研究。</p>\n<hr>\n<p>源码放在了Github需要的可以去查看：<a href=\"https://github.com/wapchief/android-CollectionDemo\" target=\"_blank\" rel=\"external\">https://github.com/wapchief/android-CollectionDemo</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjxmzrkxl0000glu21q4iqxay","tag_id":"cjxmzrkxw0002glu2tps2g3y1","_id":"cjxmzrky20006glu2rtzdi97a"},{"post_id":"cjxmzrkxl0000glu21q4iqxay","tag_id":"cjxmzrky10004glu22e5xvq50","_id":"cjxmzrky30007glu2yarzija1"},{"post_id":"cjxmzrkxu0001glu2i9ao1n5b","tag_id":"cjxmzrky20005glu2v9879vl9","_id":"cjxmzrky40009glu2lt3167cz"},{"post_id":"cjxmzrkxz0003glu2y2vxb5h9","tag_id":"cjxmzrky30008glu2xvasfuta","_id":"cjxmzrky4000bglu2s6j4qd0u"},{"post_id":"cjxmzrkxz0003glu2y2vxb5h9","tag_id":"cjxmzrky4000aglu2opgafoi7","_id":"cjxmzrky4000cglu2sjxr7p1j"},{"post_id":"cjxmzrkz0000gglu21kuwtz6n","tag_id":"cjxmzrky10004glu22e5xvq50","_id":"cjxmzrkz2000iglu297fid6ml"},{"post_id":"cjxmzrkz1000hglu2mm76z0hz","tag_id":"cjxmzrky10004glu22e5xvq50","_id":"cjxmzrkz4000lglu21zc559t7"},{"post_id":"cjxmzrkz2000jglu21jrx8q97","tag_id":"cjxmzrky10004glu22e5xvq50","_id":"cjxmzrkz4000mglu2oi7pi4u6"},{"post_id":"cjxmzrkyx000dglu27s5ss5s7","tag_id":"cjxmzrky30008glu2xvasfuta","_id":"cjxmzrkz5000oglu2vs616nek"},{"post_id":"cjxmzrkyx000dglu27s5ss5s7","tag_id":"cjxmzrkz0000fglu2wugba77c","_id":"cjxmzrkz5000pglu20elcavc6"},{"post_id":"cjxmzrkyx000dglu27s5ss5s7","tag_id":"cjxmzrkz3000kglu2w8lbztcw","_id":"cjxmzrkz5000qglu2mi2be7kt"},{"post_id":"cjxmzrkyy000eglu22o55c98i","tag_id":"cjxmzrky10004glu22e5xvq50","_id":"cjxmzrkz6000rglu2sa0twcjm"},{"post_id":"cjxmzrkyy000eglu22o55c98i","tag_id":"cjxmzrkz4000nglu2uahfmdh8","_id":"cjxmzrkz6000sglu2crfjzxuf"}],"Tag":[{"name":"git","_id":"cjxmzrkxw0002glu2tps2g3y1"},{"name":"android","_id":"cjxmzrky10004glu22e5xvq50"},{"name":"产品","_id":"cjxmzrky20005glu2v9879vl9"},{"name":"hexo","_id":"cjxmzrky30008glu2xvasfuta"},{"name":"博客","_id":"cjxmzrky4000aglu2opgafoi7"},{"name":"css","_id":"cjxmzrkz0000fglu2wugba77c"},{"name":"html","_id":"cjxmzrkz3000kglu2w8lbztcw"},{"name":"kotlin","_id":"cjxmzrkz4000nglu2uahfmdh8"}]}}